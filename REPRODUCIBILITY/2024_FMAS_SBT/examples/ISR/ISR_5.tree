configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
}
enumerations {
    #{ here you specify the enumerations used in the model}#
}
constants {
    x_min := 0, y_min := 0, x_max := 10, y_max := 10, tree_count := 2, vision_range := 4, tree_range := 2, y_change := 2, movement_cooldown := 5
} end_constants

variables {
    variable {bl cur_x VAR [x_min, x_max] assign {result {x_min}}}
    variable {bl cur_y VAR [y_min, y_max] assign {result {y_min}}}
    variable {bl dest_x VAR [x_min, x_max] assign {result {x_min}}}
    variable {bl dest_y VAR [y_min, y_max] assign {result {y_min}}}
    variable {bl x_mode VAR BOOLEAN assign {result {False}}}
    variable {bl y_dir VAR {-1, 1} assign {result {1}}}
    variable {bl victory VAR BOOLEAN assign {result {False}}}
    variable {env tree_x DEFINE INT array tree_count default {assign { result{2}}} constant_index index_of {1} assign {result{5}}}
    variable {env tree_y DEFINE INT array tree_count default {assign { result{2}}} constant_index index_of {1} assign {result{5}}}
    variable {env tar_x VAR [x_min, x_max] assign {result {(loop, loop_var, [x_min, x_max] such_that True, loop_var)}}}
    variable {env tar_y VAR [y_min, y_max] assign {result {(loop, loop_var, [y_min, y_max] such_that True, loop_var)}}}
    variable {env timer VAR [0, movement_cooldown] assign {result{movement_cooldown}}}
} end_variables

environment_update {
    variable_statement {
	tar_x
	assign {
	    case { (eq, timer, 0) } end_case result {tar_x, (min, x_max, (add, tar_x, 1)), (max, x_min, (sub, tar_x, 1))} end_result
	    result { tar_x } end_result
	} end_assign
    } end_variable_statement
    variable_statement {
	tar_y
	assign {
	    case { (eq, timer, 0) } end_case result {tar_y, (min, y_max, (add, tar_y, 1)), (max, y_min, (sub, tar_y, 1))} end_result
	    result { tar_y } end_result
	} end_assign
    } end_variable_statement
    variable_statement {
	timer
	assign {
	    case {(eq, timer, 0) } result {movement_cooldown}
	    result {(max, 0, (sub, timer, 1))}
	}
    }
} end_environment_update

checks {
    check {
	not_at_destination
	arguments {}
	read_variables {cur_x, cur_y, dest_x, dest_y}
	condition { (not, (and, (eq, cur_x, dest_x), (eq, cur_y, dest_y)))}
    }
    check {
	y_too_small
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (lt, cur_y, dest_y)}
    }
    check {
	y_too_big
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (gt, cur_y, dest_y)}
    }
    check {
	x_too_small
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (lt, cur_x, dest_x)}
    }
    check {
	x_too_big
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (gt, cur_x, dest_x)}
    }
} end_checks

environment_checks {
    environment_check {
	target_in_sight
	arguments{}
	read_variables {cur_x, cur_y} end_read_variables
	condition {
	    (and,
		(lte, (add, (abs, (sub, cur_x, tar_x)), (abs, (sub, cur_y, tar_y))), vision_range),
		(loop, loop_index, [0, (sub, tree_count, 1)] such_that True,
		    (or,
			(gt, (add, (abs, (sub, (index, tree_x, constant_index loop_index), tar_x)), (abs, (sub, (index, tree_y, constant_index loop_index), tar_y))), tree_range),
			(and, (eq, (index, tree_x, constant_index loop_index), cur_x), (eq, (index, tree_y, constant_index loop_index), cur_y)),
			(and, (eq, (index, tree_x, constant_index loop_index), tar_x), (eq, (index, tree_y, constant_index loop_index), tar_y)),
			(and, (lt, (index, tree_x, constant_index loop_index), cur_x), (lt, (index, tree_x, constant_index loop_index), tar_x)),
			(and, (lt, (index, tree_y, constant_index loop_index), cur_y), (lt, (index, tree_y, constant_index loop_index), tar_y)),
			(and, (gt, (index, tree_x, constant_index loop_index), cur_x), (gt, (index, tree_x, constant_index loop_index), tar_x)),
			(and, (gt, (index, tree_y, constant_index loop_index), cur_y), (gt, (index, tree_y, constant_index loop_index), tar_y))
		    )
		)
	    )
	} end_condition
    } end_environment_check
    
} end_environment_checks

actions {
    #{ action nodes are defined here }#
    action {
	update_destination
	arguments{}
	local_variables {} end_local_variables
	read_variables {y_dir, x_mode} end_read_variables
	write_variables {dest_x, dest_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		dest_x
		assign {
		    case {x_mode}
		    result {(if, (eq, dest_x, x_max), x_min, x_max)}
		    result {dest_x}
		}
	    }
	    variable_statement {
		dest_y
		assign {
		    case {(not, x_mode)}
		    result {(min, y_max, (max, y_min, (add, dest_y, (mult, y_dir, y_change))))}
		    result {dest_y}
		}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	move
	arguments{delta_x := INT, delta_y := INT}
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {cur_x, cur_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		cur_x assign {result {(max, x_min, (min, x_max, (add, delta_x, cur_x)))}}
	    }
	    variable_statement {
		cur_y assign {result {(max, y_min, (min, y_max, (add, delta_y, cur_y)))}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	send_victory
	arguments{}
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {victory} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		victory assign {result {True}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	update_direction
	arguments{}
	local_variables { } end_local_variables
	read_variables {cur_y} end_read_variables
	write_variables {y_dir, x_mode} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		y_dir
		assign {
		    case { (eq, cur_y, y_max)}
		    result {-1}
		    case { (eq, cur_y, y_min)}
		    result {1}
		    result {y_dir}
		}
	    }
	    variable_statement {
		x_mode
		assign {result {(not, x_mode)}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    }
} end_actions

sub_trees {
    sub_tree {
	DESTINATION_SUBTREE
	composite {
	    destination selector
	    children {
		not_at_destination {} #{Checks destination}#
		composite {
		    new_destination sequence
		    children {
			update_direction {} #{Updates the direction we're going in.}#
			update_destination {} #{Sets the new destination}#
		    }
		}
	    }
	}
    }
    sub_tree {
	MOVEMENT_SUBTREE
	composite {
	    destination_and_movement sequence
	    children {
		insert {DESTINATION_SUBTREE}
		composite {
		    movement selector
		    children {
			composite {
			    try_up sequence
			    children {
				y_too_small {}
				go_up : move {0, 1}
			    }
			}
			composite {
			    try_down sequence
			    children {
				y_too_big {}
				go_down : move {0, -1}
			    }
			}
			composite {
			    try_left sequence
			    children {
				x_too_big {}
				go_left : move {-1, 0}
			    }
			}
			composite {
			    try_right sequence
			    children {
				x_too_small {}
				go_right : move {1, 0}
			    }
			}
		    }
		}
	    }
	}
    }
} end_sub_trees

tree {
    composite {
	drone_control selector
	children {
	    composite {
		vision sequence
		children {
		    target_in_sight {}
		    send_victory {}
		    
		}
	    }
	    insert {MOVEMENT_SUBTREE}
	}
    }
} end_tree




tick_prerequisite { (not, victory) } end_tick_prerequisite
#{tick_prerequisite { True } end_tick_prerequisite}#
#{ if the condition is True, the tree ticks.
    If it is false, everything is done }#

specifications { #{ INVAR, LTL, and CTL specs go here }#
    CTLSPEC {(always_finally, victory at -1)}
    LTLSPEC {(finally_bounded, [0, 200], victory at -1)}
    #{CTLSPEC {(imply, (and, (eq, (index, tree_x 0, 0), 2), (eq, (index, tree_x 0, 1), 5), (eq, (index, tree_y 0, 0), 2), (eq, (index, tree_y 0, 1), 5)), (always_finally, victory -1))}}#
} end_specifications