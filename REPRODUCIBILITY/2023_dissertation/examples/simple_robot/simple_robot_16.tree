variables {
	variable { x VAR [0, 15] } end_variable
	variable { y VAR [0, 15] } end_variable
	variable { target_x VAR [0, 15] } end_variable
	variable { target_y VAR [0, 15] } end_variable
	variable { mission VAR BOOLEAN } end_variable
} end_variables

local_variables {
	variable { saw_target VAR BOOLEAN } end_variable
} end_local_variables

environment {
	environment_variables {
		environment_variable { x_goal VAR [0, 15] } end_environment_variable
		environment_variable { y_goal VAR [0, 15] } end_environment_variable
		environment_variable { x_true VAR [0, 15] } end_environment_variable
		environment_variable { y_true VAR [0, 15] } end_environment_variable
		environment_variable { remaining_goals VAR [0, 3] } end_environment_variable
	} end_environment_variables
	initial_values { } end_initial_values
	update_values {
		environment_statement {
			env remaining_goals
			case { (and, (equal, env x_goal, env x_true), (equal, env y_goal, env y_true)) } end_case
			result { (max, 0, (subtraction, env remaining_goals, 1)) } end_result
			result { env remaining_goals } end_result
		} end_environment_statement
		environment_statement {
			env x_goal
			case { (equal, 0, env remaining_goals ) } end_case
			result { env x_goal } end_result
			case { (and, (equal, env x_goal, env x_true), (equal, env y_goal, env y_true)) } end_case
			result { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 } end_result
			result { env x_goal } end_result
		} end_environment_statement
		environment_statement {
			env y_goal
			case { (equal, 0, env remaining_goals) } end_case
			result { env y_goal } end_result
			case { (and, (equal, env x_goal, env x_true), (equal, env y_goal, env y_true)) } end_case
			result { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15 } end_result
			result { env y_goal } end_result
		} end_environment_statement
	} end_update_values
} end_environment

checks {
	check {
		have_mission
		read_variables { mission } end_read_variables
		condition { mission } end_condition
	} end_check
	check {
		target_reached
		read_variables { x y target_x target_y } end_read_variables
		condition { (and, (equal, x, target_x), (equal, y, target_y)) } end_condition
	} end_check
	check {
		x_too_small
		read_variables { target_x x } end_read_variables
		condition { (less_than, x, target_x) } end_condition
	} end_check
	check {
		x_too_big
		read_variables { target_x x } end_read_variables
		condition { (greater_than, x, target_x) } end_condition
	} end_check
	check {
		y_too_small
		read_variables { target_y y } end_read_variables
		condition { (less_than, y, target_y) } end_condition
	} end_check
	check {
		y_too_big
		read_variables { target_y y } end_read_variables
		condition { (greater_than, y, target_y) } end_condition
	} end_check
} end_checks

environment_checks {
} end_environment_checks

actions {
	action {
		get_mission
		imports {'robot'} end_imports
		read_variables {} end_read_variables
		write_variables {mission target_x target_y} end_write_variables
		initial_values {
			variable_statement {
				mission result { False } end_result
			} end_variable_statement
			variable_statement {
				target_x result { 0 } end_result
			} end_variable_statement
			variable_statement {
				target_y result { 0 } end_result
			} end_variable_statement
		} end_initial_values
		update {
			read_environment {
				python_function { from 'robot' 'get_mission' args } end_python_function
				condition { True } end_condition
				variable_environment_statement {target_x result { env x_goal } end_result} end_variable_environment_statement
				variable_environment_statement {target_y result { env y_goal } end_result} end_variable_environment_statement
			} end_read_environment
			variable_statement {
				mission
				result { True } end_result
			} end_variable_statement
			return_statement {
				result { success } end_result
			} end_return_statement
		} end_update
	} end_action


	action {
		get_position
		imports {'robot'} end_imports
		read_variables {} end_read_variables
		write_variables { x y } end_write_variables
		initial_values {
			variable_statement {
				x result { 0 } end_result
			} end_variable_statement
			variable_statement {
				y result { 0 } end_result
			} end_variable_statement
		} end_initial_values
		update {
			read_environment {
				python_function { from 'robot' 'get_position' args } end_python_function
				condition { True } end_condition
				variable_environment_statement {x result { env x_true } end_result} end_variable_environment_statement
				variable_environment_statement {y result { env y_true } end_result} end_variable_environment_statement
			} end_read_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action

	action {
		clear_mission
		read_variables {} end_read_variables
		write_variables { mission } end_write_variables
		initial_values {} end_initial_values
		update {
			variable_statement {
				mission
				result { False } end_result
			} end_variable_statement
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action

	action {
		go_right
		imports { 'robot' } end_imports
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
				python_function { from 'robot' 'go_x' args 1 } end_python_function
				update_values {
					environment_statement {
						env x_true result { (min, 15, (addition, env x_true, 1)) } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action

	action {
		go_left
		imports { 'robot' } end_imports
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
				python_function { from 'robot' 'go_x' args -1 } end_python_function
				update_values {
					environment_statement {
						env x_true result { (max, 0, (subtraction, env x_true, 1)) } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action

	action {
		go_up
		imports { 'robot' } end_imports
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
				python_function { from 'robot' 'go_y' args 1 } end_python_function
				update_values {
					environment_statement {
						env y_true result { (min, 15, (addition, env y_true, 1)) } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action

	action {
		go_down
		imports { 'robot' } end_imports
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
				python_function { from 'robot' 'go_y' args -1 } end_python_function
				update_values {
					environment_statement {
						env y_true result { (max, 0, (subtraction, env y_true, 1)) } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action
} end_actions

root_node
composite {
	robot_control
	sequence
	children {
		get_position
		decorator {
			reset_completed_mission_FiS
			X_is_Y
			X failure
			Y success
			child
			composite {
				reset_completed_mission
				sequence
				children {
					target_reached
					clear_mission
				} end_children
			} end_composite
		} end_decorator
		composite {
			confirm_mission
			selector
			children {
				have_mission
				get_mission
			} end_children
		} end_composite
		composite {
			move_robot
			selector
			children {
				composite {
					try_right
					sequence
					children {
						x_too_small
						go_right
					} end_children
				} end_composite
				composite {
					try_left
					sequence
					children {
						x_too_big
						go_left
					} end_children
				} end_composite
				composite {
					try_up
					sequence
					children {
						y_too_small
						go_up
					} end_children
				} end_composite
				composite {
					try_down
					sequence
					children {
						y_too_big
						go_down
					} end_children
				} end_composite
			} end_children
		} end_composite
	} end_children
} end_composite

tick_prerequisite { (greater_than, env remaining_goals, 0) } end_tick_prerequisite
specifications {
	INVARSPEC {(less_than_or_equal, (count, (active, go_down), (active, go_left), (active, go_right), (active, go_up)), 1)} end_INVARSPEC
	LTLSPEC { (finally, (equal, env remaining_goals -1, 0)) } end_LTLSPEC
	CTLSPEC { (always_finally, (equal, env remaining_goals -1, 0)) } end_CTLSPEC
} end_specifications