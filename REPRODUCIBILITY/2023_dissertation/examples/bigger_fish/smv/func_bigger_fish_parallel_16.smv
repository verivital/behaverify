MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__biggest_fish_sequence := -3;
		resume_from_here_in_subtree__decorator13 := -3;
		resume_from_here_in_subtree__decorator14 := -3;
		resume_from_here_in_subtree__decorator15 := -3;
		resume_from_here_in_subtree__decorator16 := -3;
		resume_from_here_in_subtree__parallel12 := -3;
		resume_from_here_in_subtree__decorator9 := -3;
		resume_from_here_in_subtree__decorator10 := -3;
		resume_from_here_in_subtree__decorator11 := -3;
		resume_from_here_in_subtree__decorator12 := -3;
		resume_from_here_in_subtree__parallel8 := -3;
		resume_from_here_in_subtree__decorator5 := -3;
		resume_from_here_in_subtree__decorator6 := -3;
		resume_from_here_in_subtree__decorator7 := -3;
		resume_from_here_in_subtree__decorator8 := -3;
		resume_from_here_in_subtree__parallel4 := -3;
		resume_from_here_in_subtree__decorator1 := -3;
		resume_from_here_in_subtree__decorator2 := -3;
		resume_from_here_in_subtree__decorator3 := -3;
		resume_from_here_in_subtree__decorator4 := -3;
		resume_from_here_in_subtree__decorator0 := -3;
		biggest_fish_sequence.active := TRUE;
		parallel12.status := parallel12.active ? parallel12.internal_status : invalid;
		parallel12.internal_status := 
			case
				count(decorator9.internal_status = failure, decorator10.internal_status = failure, decorator11.internal_status = failure, decorator12.internal_status = failure, parallel8.internal_status = failure) >= 1 : failure;
				count(decorator9.internal_status = success, decorator10.internal_status = success, decorator11.internal_status = success, decorator12.internal_status = success, parallel8.internal_status = success) >= 1 : success;
				TRUE : running;
			esac;
		parallel16.status := parallel16.active ? parallel16.internal_status : invalid;
		parallel16.internal_status := 
			case
				count(decorator13.internal_status = failure, decorator14.internal_status = failure, decorator15.internal_status = failure, decorator16.internal_status = failure, parallel12.internal_status = failure) >= 1 : failure;
				count(decorator13.internal_status = success, decorator14.internal_status = success, decorator15.internal_status = success, decorator16.internal_status = success, parallel12.internal_status = success) >= 1 : success;
				TRUE : running;
			esac;
		parallel4.status := parallel4.active ? parallel4.internal_status : invalid;
		parallel4.internal_status := 
			case
				count(decorator1.internal_status = failure, decorator2.internal_status = failure, decorator3.internal_status = failure, decorator4.internal_status = failure, decorator0.internal_status = failure) >= 1 : failure;
				count(decorator1.internal_status = success, decorator2.internal_status = success, decorator3.internal_status = success, decorator4.internal_status = success, decorator0.internal_status = success) >= 1 : success;
				TRUE : running;
			esac;
		parallel8.status := parallel8.active ? parallel8.internal_status : invalid;
		parallel8.internal_status := 
			case
				count(decorator5.internal_status = failure, decorator6.internal_status = failure, decorator7.internal_status = failure, decorator8.internal_status = failure, parallel4.internal_status = failure) >= 1 : failure;
				count(decorator5.internal_status = success, decorator6.internal_status = success, decorator7.internal_status = success, decorator8.internal_status = success, parallel4.internal_status = success) >= 1 : success;
				TRUE : running;
			esac;
		--START OF BLACKBOARD DEFINITIONS
		var_biggest_fish_stage_1 := 
			case
				!(bigger_fish.active) : var_biggest_fish;
				TRUE : min((1 + var_biggest_fish), 199);
			esac;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		bigger_fish : success_DEFAULT_module;
		biggest_fish_is0 : biggest_fish_is0_module(var_biggest_fish);
		biggest_fish_is1 : biggest_fish_is1_module(var_biggest_fish);
		biggest_fish_is10 : biggest_fish_is10_module(var_biggest_fish);
		biggest_fish_is11 : biggest_fish_is11_module(var_biggest_fish);
		biggest_fish_is12 : biggest_fish_is12_module(var_biggest_fish);
		biggest_fish_is13 : biggest_fish_is13_module(var_biggest_fish);
		biggest_fish_is14 : biggest_fish_is14_module(var_biggest_fish);
		biggest_fish_is15 : biggest_fish_is15_module(var_biggest_fish);
		biggest_fish_is16 : biggest_fish_is16_module(var_biggest_fish);
		biggest_fish_is2 : biggest_fish_is2_module(var_biggest_fish);
		biggest_fish_is3 : biggest_fish_is3_module(var_biggest_fish);
		biggest_fish_is4 : biggest_fish_is4_module(var_biggest_fish);
		biggest_fish_is5 : biggest_fish_is5_module(var_biggest_fish);
		biggest_fish_is6 : biggest_fish_is6_module(var_biggest_fish);
		biggest_fish_is7 : biggest_fish_is7_module(var_biggest_fish);
		biggest_fish_is8 : biggest_fish_is8_module(var_biggest_fish);
		biggest_fish_is9 : biggest_fish_is9_module(var_biggest_fish);
		biggest_fish_sequence_NEXT_2 : composite_sequence_without_memory_END;
		biggest_fish_sequence_NEXT_1 : composite_sequence_without_memory(biggest_fish_sequence_NEXT_2, bigger_fish);
		biggest_fish_sequence : composite_sequence_without_memory(biggest_fish_sequence_NEXT_1, special_decorator);
		decorator0 : decorator_X_is_Y(biggest_fish_is0, failure, running);
		decorator1 : decorator_X_is_Y(biggest_fish_is1, failure, running);
		decorator10 : decorator_X_is_Y(biggest_fish_is10, failure, running);
		decorator11 : decorator_X_is_Y(biggest_fish_is11, failure, running);
		decorator12 : decorator_X_is_Y(biggest_fish_is12, failure, running);
		decorator13 : decorator_X_is_Y(biggest_fish_is13, failure, running);
		decorator14 : decorator_X_is_Y(biggest_fish_is14, failure, running);
		decorator15 : decorator_X_is_Y(biggest_fish_is15, failure, running);
		decorator16 : decorator_X_is_Y(biggest_fish_is16, failure, running);
		decorator2 : decorator_X_is_Y(biggest_fish_is2, failure, running);
		decorator3 : decorator_X_is_Y(biggest_fish_is3, failure, running);
		decorator4 : decorator_X_is_Y(biggest_fish_is4, failure, running);
		decorator5 : decorator_X_is_Y(biggest_fish_is5, failure, running);
		decorator6 : decorator_X_is_Y(biggest_fish_is6, failure, running);
		decorator7 : decorator_X_is_Y(biggest_fish_is7, failure, running);
		decorator8 : decorator_X_is_Y(biggest_fish_is8, failure, running);
		decorator9 : decorator_X_is_Y(biggest_fish_is9, failure, running);
		parallel12_NEXT_5 : composite_parallel_without_memory_END;
		parallel12_NEXT_4 : composite_parallel_without_memory(parallel12_NEXT_5, parallel8);
		parallel12_NEXT_3 : composite_parallel_without_memory(parallel12_NEXT_4, decorator12);
		parallel12_NEXT_2 : composite_parallel_without_memory(parallel12_NEXT_3, decorator11);
		parallel12_NEXT_1 : composite_parallel_without_memory(parallel12_NEXT_2, decorator10);
		parallel12 : composite_parallel_without_memory(parallel12_NEXT_1, decorator9);
		parallel16_NEXT_5 : composite_parallel_without_memory_END;
		parallel16_NEXT_4 : composite_parallel_without_memory(parallel16_NEXT_5, parallel12);
		parallel16_NEXT_3 : composite_parallel_without_memory(parallel16_NEXT_4, decorator16);
		parallel16_NEXT_2 : composite_parallel_without_memory(parallel16_NEXT_3, decorator15);
		parallel16_NEXT_1 : composite_parallel_without_memory(parallel16_NEXT_2, decorator14);
		parallel16 : composite_parallel_without_memory(parallel16_NEXT_1, decorator13);
		parallel4_NEXT_5 : composite_parallel_without_memory_END;
		parallel4_NEXT_4 : composite_parallel_without_memory(parallel4_NEXT_5, decorator0);
		parallel4_NEXT_3 : composite_parallel_without_memory(parallel4_NEXT_4, decorator4);
		parallel4_NEXT_2 : composite_parallel_without_memory(parallel4_NEXT_3, decorator3);
		parallel4_NEXT_1 : composite_parallel_without_memory(parallel4_NEXT_2, decorator2);
		parallel4 : composite_parallel_without_memory(parallel4_NEXT_1, decorator1);
		parallel8_NEXT_5 : composite_parallel_without_memory_END;
		parallel8_NEXT_4 : composite_parallel_without_memory(parallel8_NEXT_5, parallel4);
		parallel8_NEXT_3 : composite_parallel_without_memory(parallel8_NEXT_4, decorator8);
		parallel8_NEXT_2 : composite_parallel_without_memory(parallel8_NEXT_3, decorator7);
		parallel8_NEXT_1 : composite_parallel_without_memory(parallel8_NEXT_2, decorator6);
		parallel8 : composite_parallel_without_memory(parallel8_NEXT_1, decorator5);
		special_decorator : decorator_X_is_Y(parallel16, running, failure);
		--START OF BLACKBOARD VARIABLES DECLARATION
		var_biggest_fish : 0..199;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(var_biggest_fish) := 
			case
				TRUE : 0;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(var_biggest_fish) := var_biggest_fish_stage_1;
		--END OF BLACKBOARD VARIABLES TRANSITION

LTLSPEC F(G((var_biggest_fish = 17)));
CTLSPEC AF(AG((var_biggest_fish = 17)));
MODULE define_nodes
	DEFINE
		biggest_fish_sequence := 0;
		special_decorator := 1;
		parallel16 := 2;
		decorator13 := 3;
		biggest_fish_is13 := 4;
		decorator14 := 5;
		biggest_fish_is14 := 6;
		decorator15 := 7;
		biggest_fish_is15 := 8;
		decorator16 := 9;
		biggest_fish_is16 := 10;
		parallel12 := 11;
		decorator9 := 12;
		biggest_fish_is9 := 13;
		decorator10 := 14;
		biggest_fish_is10 := 15;
		decorator11 := 16;
		biggest_fish_is11 := 17;
		decorator12 := 18;
		biggest_fish_is12 := 19;
		parallel8 := 20;
		decorator5 := 21;
		biggest_fish_is5 := 22;
		decorator6 := 23;
		biggest_fish_is6 := 24;
		decorator7 := 25;
		biggest_fish_is7 := 26;
		decorator8 := 27;
		biggest_fish_is8 := 28;
		parallel4 := 29;
		decorator1 := 30;
		biggest_fish_is1 := 31;
		decorator2 := 32;
		biggest_fish_is2 := 33;
		decorator3 := 34;
		biggest_fish_is3 := 35;
		decorator4 := 36;
		biggest_fish_is4 := 37;
		decorator0 := 38;
		biggest_fish_is0 := 39;
		bigger_fish := 40;
MODULE composite_sequence_without_memory(next_composite, child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child.internal_status = success : next_composite.internal_status;
				TRUE : child.internal_status;
			esac;
		child.active := active;
		next_composite.active := active & (child.internal_status = success);

MODULE composite_sequence_without_memory_END
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? success : invalid;
		internal_status := success;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child_0.status = incoming_status : outgoing_status;
				TRUE : child_0.status;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				TRUE : TRUE;
			esac;
MODULE composite_parallel_without_memory(next_composite, child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		child.active := active;
		next_composite.active := active;

MODULE composite_parallel_without_memory_END
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
MODULE biggest_fish_is0_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 0)) ? success : failure;
MODULE biggest_fish_is1_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 1)) ? success : failure;
MODULE biggest_fish_is10_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 10)) ? success : failure;
MODULE biggest_fish_is11_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 11)) ? success : failure;
MODULE biggest_fish_is12_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 12)) ? success : failure;
MODULE biggest_fish_is13_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 13)) ? success : failure;
MODULE biggest_fish_is14_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 14)) ? success : failure;
MODULE biggest_fish_is15_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 15)) ? success : failure;
MODULE biggest_fish_is16_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 16)) ? success : failure;
MODULE biggest_fish_is2_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 2)) ? success : failure;
MODULE biggest_fish_is3_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 3)) ? success : failure;
MODULE biggest_fish_is4_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 4)) ? success : failure;
MODULE biggest_fish_is5_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 5)) ? success : failure;
MODULE biggest_fish_is6_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 6)) ? success : failure;
MODULE biggest_fish_is7_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 7)) ? success : failure;
MODULE biggest_fish_is8_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 8)) ? success : failure;
MODULE biggest_fish_is9_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 9)) ? success : failure;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
