MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__biggest_fish_sequence := -3;
		biggest_fish_sequence.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		var_biggest_fish_stage_1 := 
			case
				!(bigger_fish.active) : var_biggest_fish;
				TRUE : min((1 + var_biggest_fish), 99);
			esac;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		bigger_fish : success_DEFAULT_module;
		biggest_fish_is0 : biggest_fish_is0_module(var_biggest_fish);
		biggest_fish_is1 : biggest_fish_is1_module(var_biggest_fish);
		biggest_fish_is2 : biggest_fish_is2_module(var_biggest_fish);
		biggest_fish_is3 : biggest_fish_is3_module(var_biggest_fish);
		biggest_fish_is4 : biggest_fish_is4_module(var_biggest_fish);
		biggest_fish_is5 : biggest_fish_is5_module(var_biggest_fish);
		biggest_fish_is6 : biggest_fish_is6_module(var_biggest_fish);
		biggest_fish_sequence_NEXT_2 : composite_sequence_without_memory_END;
		biggest_fish_sequence_NEXT_1 : composite_sequence_without_memory(biggest_fish_sequence_NEXT_2, bigger_fish);
		biggest_fish_sequence : composite_sequence_without_memory(biggest_fish_sequence_NEXT_1, special_decorator);
		decorator0 : decorator_inverter(biggest_fish_is0);
		decorator1 : decorator_inverter(biggest_fish_is1);
		decorator2 : decorator_inverter(biggest_fish_is2);
		decorator3 : decorator_inverter(biggest_fish_is3);
		decorator4 : decorator_inverter(biggest_fish_is4);
		decorator5 : decorator_inverter(biggest_fish_is5);
		decorator6 : decorator_inverter(biggest_fish_is6);
		sequence2_NEXT_3 : composite_sequence_without_memory_END;
		sequence2_NEXT_2 : composite_sequence_without_memory(sequence2_NEXT_3, decorator2);
		sequence2_NEXT_1 : composite_sequence_without_memory(sequence2_NEXT_2, decorator1);
		sequence2 : composite_sequence_without_memory(sequence2_NEXT_1, decorator0);
		sequence6_NEXT_5 : composite_sequence_without_memory_END;
		sequence6_NEXT_4 : composite_sequence_without_memory(sequence6_NEXT_5, sequence2);
		sequence6_NEXT_3 : composite_sequence_without_memory(sequence6_NEXT_4, decorator6);
		sequence6_NEXT_2 : composite_sequence_without_memory(sequence6_NEXT_3, decorator5);
		sequence6_NEXT_1 : composite_sequence_without_memory(sequence6_NEXT_2, decorator4);
		sequence6 : composite_sequence_without_memory(sequence6_NEXT_1, decorator3);
		special_decorator : decorator_inverter(sequence6);
		--START OF BLACKBOARD VARIABLES DECLARATION
		var_biggest_fish : 0..99;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(var_biggest_fish) := 
			case
				TRUE : 0;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(var_biggest_fish) := var_biggest_fish_stage_1;
		--END OF BLACKBOARD VARIABLES TRANSITION

LTLSPEC F(G((var_biggest_fish = 7)));
CTLSPEC AF(AG((var_biggest_fish = 7)));
MODULE define_nodes
	DEFINE
		biggest_fish_sequence := 0;
		special_decorator := 1;
		sequence6 := 2;
		decorator3 := 3;
		biggest_fish_is3 := 4;
		decorator4 := 5;
		biggest_fish_is4 := 6;
		decorator5 := 7;
		biggest_fish_is5 := 8;
		decorator6 := 9;
		biggest_fish_is6 := 10;
		sequence2 := 11;
		decorator0 := 12;
		biggest_fish_is0 := 13;
		decorator1 := 14;
		biggest_fish_is1 := 15;
		decorator2 := 16;
		biggest_fish_is2 := 17;
		bigger_fish := 18;
MODULE composite_sequence_without_memory(next_composite, child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child.internal_status = success : next_composite.internal_status;
				TRUE : child.internal_status;
			esac;
		child.active := active;
		next_composite.active := active & (child.internal_status = success);

MODULE composite_sequence_without_memory_END
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? success : invalid;
		internal_status := success;
MODULE decorator_inverter(child_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child_0.status = success : failure;
				child_0.status = failure : success;
				TRUE : child_0.status;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				TRUE : TRUE;
			esac;
MODULE biggest_fish_is0_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 0)) ? success : failure;
MODULE biggest_fish_is1_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 1)) ? success : failure;
MODULE biggest_fish_is2_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 2)) ? success : failure;
MODULE biggest_fish_is3_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 3)) ? success : failure;
MODULE biggest_fish_is4_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 4)) ? success : failure;
MODULE biggest_fish_is5_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 5)) ? success : failure;
MODULE biggest_fish_is6_module(var_biggest_fish)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_biggest_fish = 6)) ? success : failure;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
