configuration{}
enumerations{}
constants{
    'x_max' := 7,
    'y_max' := 7
}

variables {
    variable { env x_goal VAR [0, 'x_max'] assign {result {range, 0, 'x_max', True} } }
    variable { env y_goal VAR [0, 'y_max'] assign {result {range, 0, 'y_max', True} } }
    variable { env x_true VAR [0, 'x_max'] assign {result {range, 0, 'x_max', True} } }
    variable { env y_true VAR [0, 'y_max'] assign {result {range, 0, 'y_max', True} } }
    variable { env remaining_goals VAR [0, 3] assign {result {range, 1, 3, True} } }
}

environment_update {
    variable_statement {
	remaining_goals
	assign{
	    case { (and, (equal, x_goal, x_true), (equal, y_goal, y_true)) } end_case
	    result { (max, 0, (subtraction, remaining_goals, 1)) } 
	    result { remaining_goals } 
	}
    }
    variable_statement {
	x_goal
	assign{
	    case { (equal, 0, remaining_goals ) } end_case
	    result { x_goal } 
	    case { (and, (equal, x_goal, x_true), (equal, y_goal, y_true)) } end_case
	    result {range, 0, 'x_max', True} 
	    result { x_goal } 
	}
    }
    variable_statement {
	y_goal
	assign {
	    case { (equal, 0, remaining_goals) } end_case
	    result { y_goal } 
	    case { (and, (equal, x_goal, x_true), (equal, y_goal, y_true)) } end_case
	    result {range, 0, 'y_max', True} 
	    result { y_goal } 
	}
    }
}

checks {
} end_checks

environment_checks {
    environment_check {
	x_too_small
	arguments {}
	read_variables {} end_read_variables
	condition { (less_than, x_true, x_goal) } end_condition
    }
    environment_check {
	x_too_big
	arguments {}
	read_variables {} end_read_variables
	condition { (greater_than, x_true, x_goal) } end_condition
    }
    environment_check {
	y_too_small
	arguments {}
	read_variables {} end_read_variables
	condition { (less_than, y_true, y_goal) } end_condition
    }
    environment_check {
	y_too_big
	arguments {}
	read_variables {} end_read_variables
	condition { (greater_than, y_true, y_goal) } end_condition
    }
} end_environment_checks

actions {
    
    action {
	go_x
	arguments { 'x_dir' := INT }
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables {} end_write_variables
	initial_values {} end_initial_values
	update {
	    write_environment { go_x_func
		variable_statement {
		    x_true assign {result { (max, 0, (min, 'x_max', (addition, x_true, 'x_dir'))) } }
		}
	    } end_write_environment
	    return_statement { result { success }  } end_return_statement
	} end_update
    } end_action
    
    action {
	go_y
	arguments { 'y_dir' := INT }
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables {} end_write_variables
	initial_values {} end_initial_values
	update {
	    write_environment { go_y_func
		variable_statement {
		    y_true assign{result { (max, 0, (min, 'y_max', (addition, y_true, 'y_dir'))) } }
		} 
	    } end_write_environment
	    return_statement { result { success }  } end_return_statement
	} end_update
    } end_action
} end_actions

sub_trees {
}end_sub_trees
tree{
    composite {
	move_robot
	selector
	children {
	    composite {
		try_right
		sequence
		children {
		    x_too_small {}
		    go_x {1}
		} end_children
	    } end_composite
	    composite {
		try_left
		sequence
		children {
		    x_too_big {}
		    go_x {-1}
		} end_children
	    } end_composite
	    composite {
		try_up
		sequence
		children {
		    y_too_small {}
		    go_y {1}
		} end_children
	    } end_composite
	    composite {
		try_down
		sequence
		children {
		    y_too_big {}
		    go_y {-1}
		} end_children
	    } end_composite
	} end_children
    } end_composite
} end_tree

tick_prerequisite { (greater_than, remaining_goals, 0) } end_tick_prerequisite
specifications {
    LTLSPEC { (finally, (equal, remaining_goals -1, 0)) } end_LTLSPEC
    CTLSPEC { (always_finally, (equal, remaining_goals -1, 0)) } end_CTLSPEC
} end_specifications