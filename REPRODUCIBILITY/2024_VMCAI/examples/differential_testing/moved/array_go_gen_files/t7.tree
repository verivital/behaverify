configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 array 3 VAR [-5, -2]
		range
		assign {
			case {(equivalent, True, (greater_than, (multiplication, -5, 4), (max, -77, 5)))} result { (min, -2, (max, -5, (abs, -5)))}
			case {(not_equal, True, (xnor, False, True))} result { (min, -2, (max, -5, (subtraction, (multiplication, 2, -3, 5, -43), -65)))}
			result {(min, -2, (max, -5, (abs, (count, (and, True, True), (and, False, True)))))}
		}
	}
	variable { env envVAR1 VAR BOOLEAN
		assign {
			case {False} result { (equal, (index, blVAR0, 0), (min, -77, (index, blVAR0, 0)))}
			result {(xor, (less_than, (index, blVAR0, 1), -4), (xnor, False, True))}
		}
	}
	variable { env envVAR2 VAR BOOLEAN
		assign {
			result {(less_than, (index, blVAR0, 0), (subtraction, (index, blVAR0, 1), (index, blVAR0, 2)))}
		}
	}
	variable { env envFROZENVAR3 FROZENVAR BOOLEAN
		assign {
			result {(and, envVAR2, True)}
		}
	}
	variable { local localFROZENVAR4 FROZENVAR [2, 5]
		assign {
			case {(equal, (min, -19, (index, blVAR0, 0)), (index, blVAR0, 1))} result { (min, 5, (max, 2, (negative, (max, (count, (greater_than, 62, 83), (greater_than, -59, 19)), (index, blVAR0, 1)))))}
			case {(implies, (xor, False, False), False)} result { (min, 5, (max, 2, (count, (equivalent, (or, False, False), (implies, False, True)), (implies, False, (less_than_or_equal, (addition, (index, blVAR0, 0), (index, blVAR0, 2), (index, blVAR0, 2), (index, blVAR0, 0)), (index, blVAR0, 1))))))}
			result {(min, 5, (max, 2, (min, (index, blVAR0, 1), (index, blVAR0, 2))))}
		}
	}
	variable { bl blDEFINE5 array 3 DEFINE BOOLEAN
		range
		assign {
			case {(implies, False, False)} result { True}
			case {False} result { False}
			result {False}
		}
	}
	variable { env envDEFINE6 array 3 DEFINE INT
		range
		assign {
			result {(min, 5, (max, 2, (index, blVAR0, 2)))}
		}
	}
	variable { bl blDEFINE7 array 2 DEFINE BOOLEAN
		per_index
		assign {
			case {(equal, (equal, -25, (negative, 49)), (and, False, (index, blDEFINE5, 1)))} result { (xnor, (index, blDEFINE5, 1), (index, blDEFINE5, 2))}
			case {(equivalent, (greater_than_or_equal, 50, (index, blVAR0, 1)), (less_than, (index, blVAR0, 0), (index, blVAR0, 1)))} result { (implies, True, (greater_than_or_equal, -78, (index, blVAR0, 0)))}
			result {(equivalent, (index, blDEFINE5, 2), (or, (index, blDEFINE5, 1), (index, blDEFINE5, 2)))}
		}
		assign {
			case {(equivalent, True, (index, blDEFINE5, 0))} result { (greater_than_or_equal, (index, blVAR0, 1), (abs, 27))}
			case {(and, (equal, (index, blDEFINE5, 2), True), (greater_than, (multiplication, (index, blVAR0, 2), 8, (index, blVAR0, 2), 5), (index, blVAR0, 2)))} result { (less_than_or_equal, 11, (index, blVAR0, 1))}
			result {(index, blDEFINE5, 1)}
		}
	}
	variable { local localDEFINE8 DEFINE INT
		assign {
			case {(xnor, (index, blDEFINE7, 1), True)} result { (min, 5, (max, 2, (abs, (index, blVAR0, 2))))}
			case {(xnor, (equal, False, (xor, (index, blDEFINE7, 1), (index, blDEFINE7, 0))), (index, blDEFINE7, 1))} result { (min, 5, (max, 2, (max, -49, (abs, (index, blVAR0, 2)))))}
			result {(min, 5, (max, 2, (min, (index, blVAR0, 0), (index, blVAR0, 1))))}
		}
	}
}
environment_update {
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blDEFINE5, blDEFINE7}
		condition{True}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blDEFINE5, blDEFINE7}
		condition{(less_than, (index, blVAR0, 2), (index, blVAR0, 2))}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {localDEFINE8}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE7}
		initial_values {

		}
		update {
			write_environment {
				a1_write_before_1
				variable_statement{ envVAR1
				assign {
					case {(xor, (equal, (multiplication, localDEFINE8, (index, envDEFINE6, 1), 67), (negative, (index, envDEFINE6, 0))), True)} result { (equal, (xor, envVAR1, True), (equal, (min, localDEFINE8, -83), (count, (equal, (index, blDEFINE5, 0), envFROZENVAR3), (greater_than, -51, -9), (xor, True, True), (equal, False, envVAR1))))}
					case {(xor, (index, blDEFINE7, 0), (implies, False, envVAR2))} result { (xnor, (less_than_or_equal, localDEFINE8, (abs, localDEFINE8)), (implies, False, False))}
					result {False}
				}
				}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 2, (max, 0, (count, (not_equal, False, (index, blDEFINE7, 0)), (less_than, (negative, (index, blVAR0, 2)), 58))))}
				assign {
					result {(min, -2, (max, -5, -50))}
				}
				index_of { (min, 2, (max, 0, (min, (multiplication, localDEFINE8, -12, localDEFINE8, (index, blVAR0, 0)), localDEFINE8)))}
				assign {
					result {(min, -2, (max, -5, (abs, 20)))}
				}
			}
			return_statement {
				case { (xnor, (index, blDEFINE5, 1), (equivalent, (index, blDEFINE5, 2), (index, blDEFINE7, 0)))} result { success}
				case { (index, blDEFINE7, 1)} result { running}
				case { (xor, (implies, (and, (index, blDEFINE5, 2), False), True), (greater_than_or_equal, (count, (implies, False, (index, blDEFINE5, 2)), (equivalent, (index, blDEFINE7, 0), True)), -46))} result { success}
				result {running}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localDEFINE8}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE7}
		initial_values {
			variable_statement{ localDEFINE8
			assign {
				case {(equivalent, False, True)} result { (min, 5, (max, 2, (abs, (index, blVAR0, 1))))}
				case {(index, blDEFINE7, 0)} result { (min, 5, (max, 2, (addition, (index, blVAR0, 1), (index, blVAR0, 0), 55, -97)))}
				result {(min, 5, (max, 2, (min, 8, (count, (implies, False, (index, blDEFINE7, 0)), (and, (index, blDEFINE5, 0), True), (or, (index, blDEFINE5, 1), False)))))}
			}
			}

		}
		update {
			read_environment {
				a2_read_before_0
				condition {(equal, (xnor, False, (equivalent, envFROZENVAR3, (index, blDEFINE7, 0))), (not_equal, (index, blVAR0, 0), 14))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 2, (max, 0, (count, (or, envFROZENVAR3, envFROZENVAR3), (less_than, localDEFINE8, -90))))}
					assign {
						case {(greater_than_or_equal, 38, (index, blVAR0, 1))} result { (min, -2, (max, -5, (max, (index, envDEFINE6, 1), (multiplication, localDEFINE8, -32))))}
						case {(less_than_or_equal, -11, (index, blVAR0, 1))} result { (min, -2, (max, -5, (count, (and, (less_than_or_equal, (index, envDEFINE6, 2), (addition, localDEFINE8, 51, (index, envDEFINE6, 0), (index, envDEFINE6, 1))), (equivalent, envVAR1, (xnor, True, False))), (not_equal, (abs, (index, blVAR0, 1)), (subtraction, (index, blVAR0, 1), -58)), (or, (and, False, False), (equal, 28, (multiplication, 38, -99, localDEFINE8))))))}
						result {(min, -2, (max, -5, (max, (index, blVAR0, 2), (min, -93, (index, envDEFINE6, 1)))))}
					}
				}
			}
			return_statement {
				case { (greater_than_or_equal, (abs, 94), 18)} result { success}
				case { (less_than, (abs, -67), (max, localDEFINE8, 75))} result { failure}
				result {failure}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 2, (max, 0, (min, (abs, 32), -97)))}
				assign {
					result {(min, -2, (max, -5, -14))}
				}
				index_of { (min, 2, (max, 0, -29))}
				assign {
					result {(min, -2, (max, -5, (max, -2, localDEFINE8)))}
				}
				index_of { (min, 2, (max, 0, (min, (multiplication, 6, (min, 2, localDEFINE8)), (multiplication, 69, (index, blVAR0, 2)))))}
				assign {
					result {(min, -2, (max, -5, (addition, (index, blVAR0, 1), (max, 86, 33), (max, localDEFINE8, -7), (max, (index, blVAR0, 1), -33))))}
				}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localFROZENVAR4}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE7}
		initial_values {
			variable_statement{ localFROZENVAR4
			assign {
				result {(min, 5, (max, 2, (max, 81, (addition, -71, (index, blVAR0, 2)))))}
			}
			}

		}
		update {
			write_environment {
				a3_write_before_0
				variable_statement{ envVAR2
				assign {
					case {(greater_than, localFROZENVAR4, (index, envDEFINE6, 1))} result { envFROZENVAR3}
					result {(greater_than, (min, 50, -73), localFROZENVAR4)}
				}
				}
				variable_statement{ envVAR2
				assign {
					case {False} result { True}
					case {(xnor, True, True)} result { (equivalent, envVAR1, False)}
					result {(xor, (xnor, (index, blDEFINE7, 0), False), (and, envFROZENVAR3, (index, blDEFINE5, 0)))}
				}
				}
			}
			return_statement {
				case { (greater_than_or_equal, localFROZENVAR4, (index, blVAR0, 1))} result { running}
				case { (greater_than, -41, (index, blVAR0, 0))} result { failure}
				result {running}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {localFROZENVAR4, localDEFINE8}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE7}
		initial_values {
			variable_statement{ localFROZENVAR4
			assign {
				case {(or, (index, blDEFINE5, 1), (and, False, (index, blDEFINE7, 0)))} result { (min, 5, (max, 2, -12))}
				case {(xor, False, False)} result { (min, 5, (max, 2, (subtraction, -5, -59)))}
				result {(min, 5, (max, 2, (addition, (max, -91, -93), (index, blVAR0, 0), 8)))}
			}
			}
			variable_statement{ localDEFINE8
			assign {
				case {(or, (xor, True, (index, blDEFINE7, 0)), False)} result { (min, 5, (max, 2, (min, (min, (index, blVAR0, 1), (index, blVAR0, 0)), 72)))}
				result {(min, 5, (max, 2, (abs, -72)))}
			}
			}

		}
		update {
			variable_statement{ blVAR0
				per_index
				index_of { (min, 2, (max, 0, (abs, (max, (index, blVAR0, 2), localDEFINE8))))}
				assign {
					result {(min, -2, (max, -5, (count, (greater_than_or_equal, (addition, (index, blVAR0, 2), localDEFINE8, 41), (count, (xor, True, False), (equivalent, (index, blDEFINE7, 0), True), (equivalent, (index, blDEFINE7, 1), False))), (implies, (equivalent, True, False), (index, blDEFINE7, 0)), (xor, (greater_than, (negative, -26), localFROZENVAR4), (greater_than_or_equal, localDEFINE8, 99)), (less_than_or_equal, localDEFINE8, (subtraction, (multiplication, localDEFINE8, 39), -75)))))}
				}
			}
			write_environment {
				a4_write_before_0
				variable_statement{ envVAR2
				assign {
					result {(and, envVAR1, envFROZENVAR3)}
				}
				}
				variable_statement{ instant envVAR1
				assign {
					result {(or, False, False)}
				}
				}
			}
			return_statement {
				case { (xnor, (index, blDEFINE7, 1), (index, blDEFINE5, 1))} result { running}
				result {failure}
			}
		}
	}
}
sub_trees{}
tree {
	composite {
		sel0
		selector
		
		children {
			composite {
				sel1
				selector
				with_partial_memory
				children {
					a4{}
					a2{}
					a4{}
				}
			}
			a1{}
			c1{}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications