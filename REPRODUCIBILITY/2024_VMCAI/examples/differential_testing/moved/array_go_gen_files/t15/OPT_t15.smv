MODULE main
    VAR
        system : system_module;
--------------SPECIFICATIONS



--------------END OF SPECIFICATIONS

MODULE system_module
    CONSTANTS
        success, failure, running, invalid, no, both, yes;
    DEFINE
        resume_from_here_in_subtree__dec_sf0 := -3;
        resume_from_here_in_subtree__c2 := -3;
        resume_from_here_in_subtree__c1 := -3;
        dec_sf0.active := TRUE;
        --START OF BLACKBOARD DEFINITIONS
        --END OF BLACKBOARD DEFINITIONS
    FROZENVAR
        --START OF BLACKBOARD FROZENVAR
        blVAR0_stage_0 : 2..5;
        envVAR1_stage_0 : 2..5;
        blFROZENVAR3_stage_0 : -5..-2;
        --END OF BLACKBOARD FROZENVAR
    VAR
        node_names : define_nodes;
        c2 : c2_module();
        c1 : c1_module();
        p_one1 : composite_parallel_success_on_one_without_memory_2(c2, c1);
        dec_sf0 : decorator_X_is_Y(p_one1, success, failure);
        --START OF BLACKBOARD VARIABLES DECLARATION
        --END OF BLACKBOARD VARIABLES DECLARATION
    ASSIGN
        --START OF BLACKBOARD VARIABLES INITIALIZATION
        init(blVAR0_stage_0) := 
            case
                TRUE : min(5, max(2, 11));
            esac;
        init(envVAR1_stage_0) := 
            case
                TRUE : min(5, max(2, -64));
            esac;
        init(blFROZENVAR3_stage_0) := 
            case
                ((TRUE xnor TRUE) xnor (TRUE = FALSE)) : min(-2, max(-5, min(max(blVAR0_stage_0, blVAR0_stage_0), max(87, 78))));
                ((FALSE -> (-1 >= 5)) xor ((TRUE <-> TRUE) xor (TRUE -> TRUE))) : min(-2, max(-5, count((both != yes), ((TRUE | TRUE) -> FALSE))));
                TRUE : min(-2, max(-5, 4));
            esac;
        --END OF BLACKBOARD VARIABLES INITIALIZATION
        --START OF BLACKBOARD VARIABLES TRANSITION
        --END OF BLACKBOARD VARIABLES TRANSITION

MODULE define_nodes
    DEFINE
        dec_sf0 := 0;
        p_one1 := 1;
        c2 := 2;
        c1 := 3;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                child_0.internal_status = incoming_status : outgoing_status;
                TRUE : child_0.internal_status;
            esac;
        child_0.active :=
            case
                !(active) : FALSE;
                TRUE : TRUE;
            esac;
MODULE composite_parallel_success_on_one_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                (child_0.internal_status = failure) : failure;
                (child_1.internal_status = failure) : failure;
                !(child_0.internal_status = running) : child_0.internal_status;
                !(child_1.internal_status = running) : child_1.internal_status;
                TRUE : running;
            esac;
        child_0.active := active;
        child_1.active := active;
MODULE c2_module()
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (FALSE) ? success : failure;
MODULE c1_module()
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (FALSE) ? success : failure;
