configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 array 2 VAR [-5, -2]
		per_index
		assign {
			case {(equivalent, True, True)} result { (min, -2, (max, -5, (abs, 40)))}
			case {(xor, True, (not_equal, -74, -2))} result { (min, -2, (max, -5, -3))}
			result {(min, -2, (max, -5, (count, (less_than, -59, -79), (equivalent, False, (xnor, True, True)), (xor, True, False))))}
		}
		assign {
			case {True} result { (min, -2, (max, -5, -66))}
			case {(greater_than, 2, -77)} result { (min, -2, (max, -5, -34))}
			result {(min, -2, (max, -5, (count, (equivalent, False, False), (and, True, True), (or, True, False))))}
		}
	}
	variable { env envVAR1 array 3 VAR {'yes', 'no', 'both'}
		range
		assign {
			case {(not_equal, True, (or, True, False))} result { 'no'}
			case {(greater_than_or_equal, (addition, (index, blVAR0, 1), (index, blVAR0, 0), 17), 39)} result { 'both'}
			result {'yes'}
		}
	}
	variable { bl blVAR2 array 3 VAR [2, 5]
		per_index
		assign {
			case {True} result { (min, 5, (max, 2, (subtraction, (max, (index, blVAR0, 1), 21), (addition, (index, blVAR0, 0), (index, blVAR0, 1), 72, 90))))}
			case {(implies, (implies, True, (equal, (index, blVAR0, 1), (index, blVAR0, 1))), (xnor, True, True))} result { (min, 5, (max, 2, (addition, (index, blVAR0, 0), 27)))}
			result {(min, 5, (max, 2, (abs, (count, (equal, (index, blVAR0, 1), 72), (less_than_or_equal, 32, (index, blVAR0, 1)), (equal, 'yes', 'no'), (xnor, (implies, False, True), (equal, 'both', 'both'))))))}
		}
		assign {
			result {(min, 5, (max, 2, (index, blVAR0, 0)))}
		}
		assign {
			case {(xnor, True, False)} result { (min, 5, (max, 2, (index, blVAR0, 0)))}
			result {(min, 5, (max, 2, (multiplication, (min, (index, blVAR0, 1), 94), -98, (count, (greater_than, (index, blVAR0, 0), (index, blVAR0, 0)), (and, False, False), (greater_than_or_equal, (index, blVAR0, 0), -57)), (index, blVAR0, 0))))}
		}
	}
	variable { env envVAR3 VAR [2, 5]
		assign {
			case {True} result { (min, 5, (max, 2, (max, (addition, (index, blVAR2, 2), (index, blVAR0, 1)), (min, -56, 88))))}
			case {(equivalent, (less_than, (index, blVAR2, 0), (index, blVAR0, 1)), (xnor, True, False))} result { (min, 5, (max, 2, (negative, (index, blVAR2, 2))))}
			result {(min, 5, (max, 2, (negative, (abs, -20))))}
		}
	}
	variable { bl blDEFINE4 DEFINE BOOLEAN
		assign {
			case {(or, (or, False, True), True)} result { (xnor, False, True)}
			case {False} result { False}
			result {False}
		}
	}
	variable { env envDEFINE5 array 2 DEFINE ENUM
		per_index
		assign {
			case {(greater_than, 69, 33)} result { (index, envVAR1, 0)}
			case {False} result { (index, envVAR1, 1)}
			result {'yes'}
		}
		assign {
			result {'no'}
		}
	}
	variable { env envDEFINE6 array 3 DEFINE INT
		per_index
		assign {
			result {(min, 5, (max, 2, (max, (negative, -51), (index, blVAR2, 1))))}
		}
		assign {
			case {True} result { (min, 5, (max, 2, envVAR3))}
			result {(min, 5, (max, 2, (min, (negative, -37), -70)))}
		}
		assign {
			case {(or, blDEFINE4, False)} result { (min, 5, (max, 2, envVAR3))}
			case {(less_than_or_equal, (addition, (index, blVAR0, 1), -16, 21), (negative, envVAR3))} result { (min, 5, (max, 2, (addition, 34, envVAR3, 45, 58)))}
			result {(min, 5, (max, 2, (index, blVAR2, 0)))}
		}
	}
	variable { bl blDEFINE7 array 3 DEFINE INT
		per_index
		assign {
			case {(not_equal, 'yes', 'yes')} result { (min, 5, (max, 2, (subtraction, (addition, (index, blVAR2, 1), (multiplication, (index, blVAR0, 0), (index, blVAR0, 1), 57), (addition, 86, (index, blVAR0, 0), (index, blVAR0, 1)), (subtraction, 86, (index, blVAR2, 1))), (min, (index, blVAR0, 1), (max, (index, blVAR0, 0), 90)))))}
			result {(min, 5, (max, 2, 52))}
		}
		assign {
			result {(min, 5, (max, 2, (multiplication, -78, (index, blVAR0, 0), -69, 92)))}
		}
		assign {
			case {(greater_than_or_equal, (min, -3, 53), -68)} result { (min, 5, (max, 2, 39))}
			case {False} result { (min, 5, (max, 2, (min, (negative, (min, (index, blVAR0, 0), (index, blVAR2, 1))), 47)))}
			result {(min, 5, (max, 2, (subtraction, (negative, (index, blVAR2, 0)), (subtraction, (index, blVAR0, 0), (index, blVAR2, 2)))))}
		}
	}
}
environment_update {
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (min, (index, blVAR2, 2), (index, blDEFINE7, 1))))}
		assign {
			case {(equal, 'both', (index, envDEFINE5, 0))} result { 'yes'}
			case {(greater_than_or_equal, (index, blVAR0, 0), (addition, (index, envDEFINE6, 1), -12, (subtraction, envVAR3, (index, blVAR2, 1)), (negative, 39)))} result { 'both'}
			result {(index, envVAR1, 2)}
		}
		index_of { (min, 2, (max, 0, (addition, envVAR3, (min, (index, blVAR2, 1), envVAR3), (count, (or, blDEFINE4, blDEFINE4), (not_equal, (index, envVAR1, 0), (index, envVAR1, 1))))))}
		assign {
			case {(greater_than, -2, (subtraction, (subtraction, -82, (index, envDEFINE6, 1)), (addition, 94, 37, -63, -99)))} result { (index, envDEFINE5, 0)}
			case {(greater_than_or_equal, (index, blDEFINE7, 0), envVAR3)} result { (index, envVAR1, 1)}
			result {'no'}
		}
		index_of { (min, 2, (max, 0, (negative, -73)))}
		assign {
			case {(and, (greater_than, -39, (index, blVAR0, 1)), (or, blDEFINE4, False))} result { (index, envVAR1, 0)}
			case {True} result { 'no'}
			result {(index, envVAR1, 1)}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (max, (index, envDEFINE6, 1), (index, envDEFINE6, 1))))}
		assign {
			result {(index, envDEFINE5, 0)}
		}
		index_of { (min, 2, (max, 0, (addition, (abs, -83), (max, 38, 54), (addition, (index, blVAR0, 0), 17, (index, blVAR2, 0), 90))))}
		assign {
			result {(index, envDEFINE5, 0)}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (min, 73, 3)))}
		assign {
			result {'both'}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (negative, (negative, (index, blVAR2, 0)))))}
		assign {
			case {(not_equal, (index, envVAR1, 2), (index, envDEFINE5, 1))} result { 'both'}
			result {(index, envDEFINE5, 0)}
		}
		index_of { (min, 2, (max, 0, (subtraction, (index, blVAR0, 1), 45)))}
		assign {
			case {(xor, (not_equal, (index, envVAR1, 0), 'both'), blDEFINE4)} result { (index, envDEFINE5, 1)}
			result {(index, envDEFINE5, 0)}
		}
		index_of { (min, 2, (max, 0, (index, blDEFINE7, 0)))}
		assign {
			case {(equal, 'yes', 'yes')} result { (index, envVAR1, 2)}
			result {(index, envDEFINE5, 1)}
		}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blVAR2, blDEFINE4, blDEFINE7}
		condition{blDEFINE4}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blVAR2, blDEFINE4, blDEFINE7}
		condition{(equal, blDEFINE4, False)}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4, blDEFINE7}
		initial_values {

		}
		update {
			return_statement {
				case { (implies, (less_than_or_equal, 1, (index, blVAR2, 1)), (greater_than_or_equal, (index, blVAR0, 1), (index, blVAR0, 1)))} result { success}
				case { True} result { success}
				result {failure}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4, blDEFINE7}
		initial_values {

		}
		update {
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, 79))}
				assign {
					case {(greater_than_or_equal, (index, blVAR2, 0), (index, blVAR0, 1))} result { (min, -2, (max, -5, (count, (greater_than_or_equal, (min, (index, blDEFINE7, 1), -89), (addition, 7, (index, blVAR2, 2), -53, (index, blDEFINE7, 0))), (xor, (and, (xnor, False, blDEFINE4), blDEFINE4), (greater_than, (multiplication, (index, blVAR0, 0), (index, blVAR0, 0)), -71)))))}
					case {(equivalent, False, True)} result { (min, -2, (max, -5, (addition, (index, blDEFINE7, 0), (index, blDEFINE7, 2), -76)))}
					result {(min, -2, (max, -5, (max, (index, blDEFINE7, 2), 20)))}
				}
				index_of { (min, 1, (max, 0, (count, (equal, 'both', 'no'), (equivalent, blDEFINE4, True), (xor, (implies, True, blDEFINE4), False))))}
				assign {
					case {(greater_than, 80, (index, blDEFINE7, 2))} result { (min, -2, (max, -5, (subtraction, (addition, (subtraction, -50, -58), (multiplication, (index, blVAR0, 0), (index, blVAR2, 0))), (index, blDEFINE7, 0))))}
					case {(less_than_or_equal, (max, (index, blVAR2, 1), (addition, (index, blVAR2, 0), -98, (index, blVAR0, 1), 35)), (negative, 77))} result { (min, -2, (max, -5, (negative, (addition, (index, blVAR0, 1), (index, blVAR0, 0), -71))))}
					result {(min, -2, (max, -5, (subtraction, (index, blDEFINE7, 2), (index, blDEFINE7, 1))))}
				}
			}
			return_statement {
				case { (greater_than, (addition, -12, -88, (subtraction, -52, (index, blVAR0, 0))), (index, blVAR0, 1))} result { failure}
				case { blDEFINE4} result { failure}
				result {failure}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4, blDEFINE7}
		initial_values {

		}
		update {
			variable_statement{ blVAR2
				per_index
				index_of { (min, 2, (max, 0, (negative, (max, -5, (index, blVAR0, 1)))))}
				assign {
					result {(min, 5, (max, 2, (subtraction, (min, (index, blVAR2, 2), (index, blDEFINE7, 2)), -5)))}
				}
				index_of { (min, 2, (max, 0, (subtraction, (index, blDEFINE7, 2), -34)))}
				assign {
					result {(min, 5, (max, 2, (index, blVAR2, 1)))}
				}
			}
			return_statement {
				result {success}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4, blDEFINE7}
		initial_values {

		}
		update {
			variable_statement{ blVAR2
				per_index
				index_of { (min, 2, (max, 0, (index, blDEFINE7, 1)))}
				assign {
					case {(implies, blDEFINE4, True)} result { (min, 5, (max, 2, (count, (greater_than, -93, (max, -69, (index, blVAR0, 1))), (greater_than, (index, blVAR2, 2), (multiplication, 15, -71, 55, (index, blVAR2, 1))), (less_than, (negative, 4), (multiplication, (index, blDEFINE7, 2), -9, (index, blVAR2, 1))), (not_equal, (index, blVAR0, 1), -58))))}
					result {(min, 5, (max, 2, (abs, (addition, -25, (index, blVAR0, 0), (index, blDEFINE7, 0), 85))))}
				}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (abs, (abs, -37))))}
				assign {
					case {(implies, blDEFINE4, blDEFINE4)} result { (min, -2, (max, -5, 42))}
					result {(min, -2, (max, -5, -42))}
				}
			}
			return_statement {
				case { (implies, (less_than, (index, blVAR0, 1), (index, blVAR2, 1)), blDEFINE4)} result { failure}
				case { (and, blDEFINE4, False)} result { failure}
				result {failure}
			}
		}
	}
}
sub_trees{}
tree {
	decorator {
		dec_rf0
		X_is_Y X running Y failure
		child {
			composite {
				p_all1
				parallel policy success_on_all
				
				children {
					composite {
						p_one2
						parallel policy success_on_one
						
						children {
							a4{}
							c1{}
							a1{}
						}
					}
					a4{}
				}
			}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications