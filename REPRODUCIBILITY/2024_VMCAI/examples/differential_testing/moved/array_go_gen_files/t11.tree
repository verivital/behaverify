configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 VAR [-5, -2]
		assign {
			result {(min, -2, (max, -5, (abs, (addition, -3, -97))))}
		}
	}
	variable { env envVAR1 array 3 VAR [2, 5]
		range
		assign {
			case {(implies, (or, True, False), (equal, blVAR0, (subtraction, -98, blVAR0)))} result { (min, 5, (max, 2, (max, (subtraction, 37, blVAR0), (abs, blVAR0))))}
			result {(min, 5, (max, 2, blVAR0))}
		}
	}
	variable { bl blVAR2 VAR BOOLEAN
		assign {
			result {(xnor, False, False)}
		}
	}
	variable { local localDEFINE3 array 2 DEFINE INT
		range
		assign {
			case {(less_than, blVAR0, blVAR0)} result { (min, 5, (max, 2, (max, blVAR0, blVAR0)))}
			result {(min, 5, (max, 2, (addition, -66, -68, (abs, blVAR0), 17)))}
		}
	}
	variable { bl blDEFINE4 DEFINE INT
		assign {
			result {(min, -2, (max, -5, (count, (less_than, -100, blVAR0), (equal, blVAR2, False), (greater_than, blVAR0, 15), (not_equal, blVAR0, blVAR0))))}
		}
	}
	variable { env envDEFINE5 array 3 DEFINE BOOLEAN
		per_index
		assign {
			case {(implies, (equivalent, blVAR2, True), True)} result { (equivalent, blVAR2, blVAR2)}
			case {(xor, blVAR2, blVAR2)} result { (less_than_or_equal, -2, -3)}
			result {(not_equal, blVAR0, (min, -95, blDEFINE4))}
		}
		assign {
			case {(greater_than, 10, 99)} result { True}
			case {blVAR2} result { (xnor, blVAR2, True)}
			result {(greater_than_or_equal, (subtraction, 0, 42), blDEFINE4)}
		}
		assign {
			case {(and, True, (greater_than_or_equal, blDEFINE4, blVAR0))} result { (greater_than, (addition, 80, -27, (index, envVAR1, 0), blVAR0), (max, 27, -51))}
			result {(equivalent, blVAR2, (less_than_or_equal, blVAR0, blDEFINE4))}
		}
	}
}
environment_update {
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (index, envVAR1, 0)))}
		assign {
			case {(xor, (equivalent, False, (or, blVAR2, blVAR2)), (less_than, blVAR0, (index, envVAR1, 1)))} result { (min, 5, (max, 2, (count, (xor, (or, blVAR2, blVAR2), (xnor, True, True)), (equivalent, (equivalent, True, False), (and, True, blVAR2)), (and, (greater_than_or_equal, -19, 36), (or, False, (index, envDEFINE5, 2))), (less_than, -73, (abs, blDEFINE4)))))}
			result {(min, 5, (max, 2, -28))}
		}
		index_of { (min, 2, (max, 0, (negative, -4)))}
		assign {
			case {(equal, (multiplication, (subtraction, blVAR0, 35), -76, (multiplication, blDEFINE4, blDEFINE4, 93, blVAR0), -49), blVAR0)} result { (min, 5, (max, 2, -84))}
			result {(min, 5, (max, 2, blVAR0))}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, 13))}
		assign {
			case {(equal, False, False)} result { (min, 5, (max, 2, (min, -11, (abs, 34))))}
			result {(min, 5, (max, 2, (abs, (count, (implies, True, (index, envDEFINE5, 0)), (equivalent, False, True)))))}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (abs, (min, (negative, -37), -71))))}
		assign {
			case {True} result { (min, 5, (max, 2, (negative, blVAR0)))}
			result {(min, 5, (max, 2, (multiplication, 27, (multiplication, 39, -77, (subtraction, 44, 48), -11), (index, envVAR1, 0))))}
		}
		index_of { (min, 2, (max, 0, (multiplication, (addition, 64, -55), (subtraction, 3, (index, envVAR1, 1)), (count, (equal, (index, envVAR1, 1), 41), (equivalent, False, True), (xor, (index, envDEFINE5, 0), (index, envDEFINE5, 0))), blDEFINE4)))}
		assign {
			case {True} result { (min, 5, (max, 2, (count, (xor, True, (implies, (index, envDEFINE5, 2), False)), (greater_than, -80, (subtraction, -25, -42)))))}
			result {(min, 5, (max, 2, (min, 15, blVAR0)))}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (max, (index, envVAR1, 1), -86)))}
		assign {
			case {blVAR2} result { (min, 5, (max, 2, blDEFINE4))}
			result {(min, 5, (max, 2, blVAR0))}
		}
		index_of { (min, 2, (max, 0, (count, (and, True, (index, envDEFINE5, 0)), (less_than, blDEFINE4, -31), (implies, True, True))))}
		assign {
			case {(greater_than_or_equal, -5, blDEFINE4)} result { (min, 5, (max, 2, (count, (greater_than, (count, (equal, blVAR2, False), (less_than_or_equal, 91, -39), (xor, (index, envDEFINE5, 2), blVAR2), (equivalent, True, True)), (addition, 49, -29, blVAR0, blVAR0)), (and, (less_than, (index, envVAR1, 1), 95), False), (not_equal, (or, blVAR2, blVAR2), True), (greater_than_or_equal, (max, 76, -72), -2))))}
			result {(min, 5, (max, 2, (abs, (count, (less_than, 63, blDEFINE4), (equal, blVAR2, True)))))}
		}
		index_of { (min, 2, (max, 0, 18))}
		assign {
			case {(equal, blVAR0, (negative, -29))} result { (min, 5, (max, 2, (negative, (min, (index, envVAR1, 0), 95))))}
			result {(min, 5, (max, 2, (max, (max, 44, blDEFINE4), (multiplication, 66, (abs, blDEFINE4), -44, -94))))}
		}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blVAR2, blDEFINE4}
		condition{(implies, False, False)}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blVAR2, blDEFINE4}
		condition{blVAR2}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			read_environment {
				a1_read_before_0
				condition {(greater_than, (negative, 80), (multiplication, 71, -5, (max, -80, blVAR0), -32))}
				variable_statement{ blVAR2
				assign {
					result {False}
				}
				}
			}
			return_statement {
				case { (less_than, -36, 98)} result { failure}
				case { (xor, blVAR2, blVAR2)} result { running}
				case { True} result { running}
				result {success}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localDEFINE3}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			return_statement {
				case { (xnor, blVAR2, True)} result { failure}
				case { (less_than_or_equal, (addition, -51, blDEFINE4), (subtraction, 98, 40))} result { failure}
				result {running}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localDEFINE3}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			variable_statement{ blVAR0
			assign {
				case {(less_than, (abs, blVAR0), 51)} result { (min, -2, (max, -5, (multiplication, (abs, (min, -62, -61)), (abs, (addition, 73, (index, localDEFINE3, 0), 37, 92)))))}
				result {(min, -2, (max, -5, (min, (negative, (index, localDEFINE3, 0)), (addition, (subtraction, 19, blVAR0), blDEFINE4, (addition, (index, localDEFINE3, 0), (index, localDEFINE3, 0), blVAR0, -100)))))}
			}
			}
			write_environment {
				a3_write_before_0
				variable_statement{ instant envVAR1
					per_index
					index_of { (min, 2, (max, 0, (count, (implies, True, (or, (index, envDEFINE5, 1), blVAR2)), (not_equal, (index, envDEFINE5, 1), (index, envDEFINE5, 0)), (not_equal, -90, (index, localDEFINE3, 0)), (implies, True, False))))}
					assign {
						result {(min, 5, (max, 2, (negative, (subtraction, (count, (or, True, blVAR2), (implies, False, blVAR2), (implies, True, blVAR2), (xor, False, True)), (negative, blDEFINE4)))))}
					}
					index_of { (min, 2, (max, 0, -23))}
					assign {
						result {(min, 5, (max, 2, (count, (greater_than_or_equal, (min, -14, -95), (min, -50, 18)), (xnor, blVAR2, (xnor, (index, envDEFINE5, 0), True)), (equal, True, False))))}
					}
				}
			}
			return_statement {
				case { False} result { success}
				case { (equivalent, (greater_than_or_equal, (addition, (index, localDEFINE3, 0), 79), (subtraction, -26, blVAR0)), (not_equal, blVAR2, True))} result { failure}
				result {success}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			read_environment {
				a4_read_before_1
				condition {(xnor, blVAR2, (index, envDEFINE5, 2))}
				variable_statement{ blVAR0
				assign {
					result {(min, -2, (max, -5, (count, (equivalent, True, (and, (index, envDEFINE5, 1), blVAR2)), (or, (greater_than_or_equal, -41, blVAR0), (index, envDEFINE5, 1)), (xor, (xor, (index, envDEFINE5, 0), (index, envDEFINE5, 1)), True))))}
				}
				}
			}
			read_environment {
				a4_read_before_0
				condition {(equivalent, (index, envDEFINE5, 0), False)}
				variable_statement{ blVAR0
				assign {
					case {(less_than_or_equal, (negative, blDEFINE4), (negative, (index, envVAR1, 2)))} result { (min, -2, (max, -5, (addition, blDEFINE4, (index, envVAR1, 2))))}
					result {(min, -2, (max, -5, -31))}
				}
				}
			}
			return_statement {
				result {success}
			}
			write_environment {
				a4_write_after_0
				variable_statement{ instant envVAR1
					per_index
					index_of { (min, 2, (max, 0, 88))}
					assign {
						case {(greater_than_or_equal, (negative, blDEFINE4), -70)} result { (min, 5, (max, 2, (min, (index, envVAR1, 1), 72)))}
						case {(not_equal, (greater_than_or_equal, (index, envVAR1, 2), -97), (and, blVAR2, True))} result { (min, 5, (max, 2, (min, (max, blDEFINE4, 6), (count, (less_than_or_equal, (min, (index, envVAR1, 0), 31), blVAR0), (implies, (less_than_or_equal, blVAR0, blDEFINE4), (implies, False, (index, envDEFINE5, 2))), (xor, (and, (index, envDEFINE5, 0), False), (implies, False, True))))))}
						result {(min, 5, (max, 2, blDEFINE4))}
					}
					index_of { (min, 2, (max, 0, (negative, 6)))}
					assign {
						case {(not_equal, (and, True, False), False)} result { (min, 5, (max, 2, (addition, (min, blDEFINE4, blDEFINE4), (multiplication, blVAR0, 76), 16)))}
						case {(less_than_or_equal, 61, (subtraction, (min, (index, envVAR1, 0), (index, envVAR1, 1)), (multiplication, blDEFINE4, blDEFINE4, blDEFINE4)))} result { (min, 5, (max, 2, (max, -6, blDEFINE4)))}
						result {(min, 5, (max, 2, (index, envVAR1, 1)))}
					}
				}
			}
		}
	}
}
sub_trees{}
tree {
	composite {
		p_all0
		parallel policy success_on_all
		
		children {
			a2{}
			composite {
				p_all1
				parallel policy success_on_all
				with_partial_memory
				children {
					a2{}
					a1{}
				}
			}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications