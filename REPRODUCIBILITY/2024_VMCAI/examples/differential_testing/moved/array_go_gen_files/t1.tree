configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 array 2 VAR [-5, -2]
		range
		assign {
			result {(min, -2, (max, -5, 15))}
		}
	}
	variable { env envVAR1 array 3 VAR [2, 5]
		per_index
		assign {
			case {(greater_than_or_equal, (subtraction, 57, 1), (max, (index, blVAR0, 1), (index, blVAR0, 0)))} result { (min, 5, (max, 2, (abs, (index, blVAR0, 1))))}
			case {(and, (implies, False, True), False)} result { (min, 5, (max, 2, (abs, (index, blVAR0, 1))))}
			result {(min, 5, (max, 2, 11))}
		}
		assign {
			result {(min, 5, (max, 2, (negative, (count, (equivalent, False, False), (greater_than, -80, -59), (implies, True, False)))))}
		}
		assign {
			result {(min, 5, (max, 2, (abs, (index, blVAR0, 0))))}
		}
	}
	variable { env envVAR2 array 3 VAR [-5, -2]
		per_index
		assign {
			result {(min, -2, (max, -5, (count, (and, False, (xor, True, True)), (greater_than, 30, 63))))}
		}
		assign {
			case {(less_than, (abs, (index, envVAR1, 0)), (multiplication, -87, -16, (index, envVAR1, 1), -1))} result { (min, -2, (max, -5, (subtraction, (multiplication, (index, blVAR0, 0), -22, 89), -10)))}
			case {(xor, (greater_than, (subtraction, (index, envVAR1, 0), 74), 54), (less_than_or_equal, 36, (index, envVAR1, 1)))} result { (min, -2, (max, -5, (subtraction, (multiplication, (min, (index, envVAR1, 2), (index, envVAR1, 2)), (index, blVAR0, 0)), (multiplication, -28, 8, (index, envVAR1, 1), (index, envVAR1, 0)))))}
			result {(min, -2, (max, -5, -61))}
		}
		assign {
			case {True} result { (min, -2, (max, -5, (index, envVAR1, 1)))}
			result {(min, -2, (max, -5, (max, (addition, (index, envVAR1, 1), 27), -3)))}
		}
	}
	variable { env envVAR3 VAR [2, 5]
		assign {
			result {(min, 5, (max, 2, (count, (greater_than_or_equal, (index, envVAR2, 0), -36), (equal, True, True))))}
		}
	}
	variable { env envFROZENVAR4 array 2 FROZENVAR [2, 5]
		range
		assign {
			result {(min, 5, (max, 2, (index, blVAR0, 1)))}
		}
	}
	variable { local localDEFINE5 DEFINE INT
		assign {
			case {(not_equal, (abs, -6), (negative, -30))} result { (min, 5, (max, 2, (multiplication, (min, -17, -47), (count, (or, True, True), (or, False, True)), (subtraction, (index, blVAR0, 0), (index, blVAR0, 1)))))}
			result {(min, 5, (max, 2, (multiplication, (count, (or, True, (greater_than_or_equal, (index, blVAR0, 1), (index, blVAR0, 0))), (implies, False, False), (or, (implies, False, False), True), (less_than, (addition, -93, -35, (index, blVAR0, 0), (index, blVAR0, 0)), (index, blVAR0, 0))), (count, (implies, False, (equivalent, False, False)), (less_than_or_equal, -81, (subtraction, (index, blVAR0, 0), (index, blVAR0, 1)))), (max, (index, blVAR0, 1), (index, blVAR0, 0)), (min, 46, 68))))}
		}
	}
	variable { local localDEFINE6 DEFINE BOOLEAN
		assign {
			result {(implies, True, True)}
		}
	}
	variable { bl blDEFINE7 DEFINE BOOLEAN
		assign {
			case {True} result { (not_equal, (negative, (index, blVAR0, 1)), (index, blVAR0, 1))}
			case {(and, (xnor, False, False), (greater_than_or_equal, (index, blVAR0, 0), (count, (less_than_or_equal, -26, (index, blVAR0, 1)), (less_than, -60, (index, blVAR0, 1)), (equal, -80, 91), (and, True, True))))} result { True}
			result {(and, (less_than_or_equal, (subtraction, (index, blVAR0, 1), -5), (negative, (index, blVAR0, 1))), True)}
		}
	}
}
environment_update {
	variable_statement{ envVAR3
	assign {
		case {(equivalent, blDEFINE7, (less_than, 70, (index, blVAR0, 0)))} result { (min, 5, (max, 2, (subtraction, (index, blVAR0, 0), (index, envVAR1, 1))))}
		result {(min, 5, (max, 2, (multiplication, (multiplication, (index, envFROZENVAR4, 0), -16, 61), (index, envFROZENVAR4, 1), (index, blVAR0, 1), (max, 76, -78))))}
	}
	}
	variable_statement{ envVAR2
		per_index
		index_of { (min, 2, (max, 0, (multiplication, (max, (index, envFROZENVAR4, 1), 67), (max, (abs, (index, envVAR1, 0)), 0), (addition, (index, envVAR1, 2), -12, (index, envVAR2, 2)))))}
		assign {
			case {(equal, (and, blDEFINE7, False), True)} result { (min, -2, (max, -5, -26))}
			case {blDEFINE7} result { (min, -2, (max, -5, (count, (implies, (xor, (equal, True, True), (xor, False, False)), False), (less_than, -39, (index, envVAR1, 1)), (xnor, (xnor, blDEFINE7, blDEFINE7), (implies, False, True)), (greater_than_or_equal, -61, (max, -82, (index, blVAR0, 0))))))}
			result {(min, -2, (max, -5, (index, envFROZENVAR4, 0)))}
		}
		index_of { (min, 2, (max, 0, (subtraction, -58, -97)))}
		assign {
			case {(and, (xnor, False, True), blDEFINE7)} result { (min, -2, (max, -5, (index, blVAR0, 1)))}
			case {(or, True, blDEFINE7)} result { (min, -2, (max, -5, (abs, (min, (index, envFROZENVAR4, 1), -93))))}
			result {(min, -2, (max, -5, (addition, (max, (count, (equivalent, False, True), (less_than_or_equal, -54, (index, envVAR2, 0)), (xor, True, blDEFINE7)), (multiplication, envVAR3, 6)), -16, (negative, 26), (max, 77, -24))))}
		}
		index_of { (min, 2, (max, 0, -22))}
		assign {
			case {(implies, False, blDEFINE7)} result { (min, -2, (max, -5, (negative, 73)))}
			case {(and, (not_equal, -75, (index, envVAR2, 1)), blDEFINE7)} result { (min, -2, (max, -5, (max, (max, envVAR3, envVAR3), -19)))}
			result {(min, -2, (max, -5, 38))}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (count, (equal, (subtraction, envVAR3, -73), (multiplication, 97, (index, envVAR1, 0), envVAR3)), (and, (not_equal, -36, (index, envVAR2, 0)), (less_than, envVAR3, 81)), (less_than, 43, (index, envFROZENVAR4, 0)), (xor, (greater_than, (index, envFROZENVAR4, 1), (index, envVAR2, 1)), True))))}
		assign {
			case {(or, blDEFINE7, blDEFINE7)} result { (min, 5, (max, 2, (subtraction, (min, envVAR3, -1), -27)))}
			case {(equal, blDEFINE7, (less_than, (index, envVAR1, 1), (index, envVAR1, 2)))} result { (min, 5, (max, 2, -59))}
			result {(min, 5, (max, 2, (multiplication, (index, blVAR0, 0), (multiplication, (multiplication, -99, envVAR3, 89), (abs, 50)))))}
		}
		index_of { (min, 2, (max, 0, (multiplication, (abs, 39), (multiplication, -42, (index, blVAR0, 1), -37, -65), (count, (or, blDEFINE7, True), (less_than_or_equal, -59, -65), (equal, blDEFINE7, False), (equal, -61, 47)), (multiplication, 95, 10, 69))))}
		assign {
			case {(implies, blDEFINE7, True)} result { (min, 5, (max, 2, (count, (or, True, True), (equivalent, True, blDEFINE7))))}
			case {(greater_than_or_equal, (index, envVAR1, 1), (index, envVAR2, 0))} result { (min, 5, (max, 2, (max, -62, -95)))}
			result {(min, 5, (max, 2, (max, envVAR3, envVAR3)))}
		}
		index_of { (min, 2, (max, 0, (abs, -38)))}
		assign {
			case {(equal, blDEFINE7, (less_than, 53, 61))} result { (min, 5, (max, 2, (subtraction, (subtraction, (multiplication, -77, 26, (index, envVAR2, 2), (index, blVAR0, 0)), -94), (subtraction, (index, envVAR2, 1), (index, envVAR1, 1)))))}
			case {False} result { (min, 5, (max, 2, (subtraction, (abs, (index, envFROZENVAR4, 0)), (count, (greater_than, envVAR3, -31), (xnor, False, True)))))}
			result {(min, 5, (max, 2, (index, envFROZENVAR4, 0)))}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (count, (or, blDEFINE7, True), (equal, blDEFINE7, False), (less_than_or_equal, (index, envFROZENVAR4, 0), 93))))}
		assign {
			result {(min, 5, (max, 2, (min, (count, (less_than_or_equal, (index, blVAR0, 1), (negative, (index, blVAR0, 1))), (implies, (or, False, blDEFINE7), (and, True, blDEFINE7)), (xnor, (xnor, True, blDEFINE7), False)), (abs, (abs, -1)))))}
		}
		index_of { (min, 2, (max, 0, (multiplication, 42, (multiplication, -100, -49))))}
		assign {
			result {(min, 5, (max, 2, (abs, envVAR3)))}
		}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blDEFINE7}
		condition{(xnor, (xnor, (implies, blDEFINE7, blDEFINE7), True), blDEFINE7)}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blDEFINE7}
		condition{(less_than_or_equal, (index, blVAR0, 1), (index, blVAR0, 1))}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {localDEFINE5}
		read_variables { }
		write_variables {blVAR0, blDEFINE7}
		initial_values {
			variable_statement{ localDEFINE5
			assign {
				result {(min, 5, (max, 2, (multiplication, (multiplication, (index, blVAR0, 0), 50, -15, (index, blVAR0, 1)), (negative, (index, blVAR0, 0)), (index, blVAR0, 1))))}
			}
			}

		}
		update {
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (max, 33, -79)))}
				assign {
					case {(equivalent, True, (less_than_or_equal, localDEFINE5, 91))} result { (min, -2, (max, -5, (min, (index, blVAR0, 0), 41)))}
					result {(min, -2, (max, -5, (index, blVAR0, 0)))}
				}
			}
			return_statement {
				result {success}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localDEFINE5}
		read_variables { }
		write_variables {blVAR0, blDEFINE7}
		initial_values {

		}
		update {
			return_statement {
				result {success}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (max, (abs, (index, blVAR0, 0)), 62)))}
				assign {
					result {(min, -2, (max, -5, -72))}
				}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (count, (xor, (implies, blDEFINE7, False), blDEFINE7), (and, (or, blDEFINE7, (xor, blDEFINE7, blDEFINE7)), True), (implies, blDEFINE7, blDEFINE7))))}
				assign {
					case {(less_than_or_equal, (addition, 15, (index, blVAR0, 0), (index, blVAR0, 0)), (index, blVAR0, 1))} result { (min, -2, (max, -5, 85))}
					case {(or, blDEFINE7, True)} result { (min, -2, (max, -5, (negative, (min, 2, localDEFINE5))))}
					result {(min, -2, (max, -5, (addition, (count, (less_than, 5, (index, blVAR0, 1)), (or, blDEFINE7, blDEFINE7), (or, False, True)), (addition, (negative, -86), localDEFINE5, 93))))}
				}
				index_of { (min, 1, (max, 0, (multiplication, (index, blVAR0, 1), (min, -51, (index, blVAR0, 0)))))}
				assign {
					case {(equal, blDEFINE7, blDEFINE7)} result { (min, -2, (max, -5, (max, -1, (multiplication, (addition, 59, (index, blVAR0, 1), (index, blVAR0, 0)), -52))))}
					case {(greater_than_or_equal, -30, localDEFINE5)} result { (min, -2, (max, -5, -75))}
					result {(min, -2, (max, -5, (negative, -77)))}
				}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blDEFINE7}
		initial_values {

		}
		update {
			return_statement {
				result {running}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (index, blVAR0, 0)))}
				assign {
					case {(xor, blDEFINE7, blDEFINE7)} result { (min, -2, (max, -5, (index, blVAR0, 0)))}
					case {(greater_than_or_equal, (negative, (index, blVAR0, 0)), (addition, (max, (index, blVAR0, 1), 10), (abs, 60), 27))} result { (min, -2, (max, -5, 3))}
					result {(min, -2, (max, -5, (index, blVAR0, 0)))}
				}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (index, blVAR0, 0)))}
				assign {
					case {(equal, (negative, (index, blVAR0, 0)), (min, (max, 12, (index, blVAR0, 0)), (subtraction, (index, blVAR0, 0), (index, blVAR0, 1))))} result { (min, -2, (max, -5, (negative, -36)))}
					case {(greater_than_or_equal, 5, (addition, 31, -78, (multiplication, -48, (index, blVAR0, 0), (index, blVAR0, 1), -6)))} result { (min, -2, (max, -5, (index, blVAR0, 0)))}
					result {(min, -2, (max, -5, 86))}
				}
				index_of { (min, 1, (max, 0, (multiplication, (index, blVAR0, 0), 61, 40)))}
				assign {
					case {(or, (less_than_or_equal, -94, (index, blVAR0, 1)), (greater_than, (index, blVAR0, 1), 90))} result { (min, -2, (max, -5, (subtraction, (index, blVAR0, 0), (index, blVAR0, 1))))}
					case {True} result { (min, -2, (max, -5, (index, blVAR0, 1)))}
					result {(min, -2, (max, -5, (subtraction, (multiplication, (index, blVAR0, 1), -13, -97), (index, blVAR0, 0))))}
				}
			}
			read_environment {
				a3_read_after_0
				condition {(or, blDEFINE7, (greater_than_or_equal, 38, -17))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (abs, 86)))}
					assign {
						result {(min, -2, (max, -5, (max, (index, envVAR1, 2), (min, (count, (greater_than, 15, 85), (implies, blDEFINE7, False)), (abs, envVAR3)))))}
					}
				}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {localDEFINE6}
		read_variables { }
		write_variables {blVAR0, blDEFINE7}
		initial_values {
			variable_statement{ localDEFINE6
			assign {
				case {(and, blDEFINE7, True)} result { (equal, 27, (index, blVAR0, 0))}
				result {(and, blDEFINE7, (xor, False, blDEFINE7))}
			}
			}

		}
		update {
			read_environment {
				a4_read_before_0
				condition {(equivalent, (equal, -47, 87), (less_than, 42, (multiplication, 5, -17)))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (min, 2, (index, envVAR1, 0))))}
					assign {
						result {(min, -2, (max, -5, (negative, (abs, (index, blVAR0, 0)))))}
					}
				}
			}
			return_statement {
				case { False} result { failure}
				case { (greater_than, (negative, -98), -68)} result { success}
				result {failure}
			}
		}
	}
}
sub_trees{}
tree {
	decorator {
		dec_sf0
		X_is_Y X success Y failure
		child {
			c1{}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications