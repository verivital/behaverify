configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 VAR [2, 5]
		assign {
			case {(or, False, False)} result { (min, 5, (max, 2, (abs, (abs, 2))))}
			case {True} result { (min, 5, (max, 2, 2))}
			result {(min, 5, (max, 2, (min, (count, (equivalent, False, (or, False, True)), (equivalent, (and, True, False), (and, False, True)), (less_than_or_equal, (min, -81, -44), (min, -5, -64))), -99)))}
		}
	}
	variable { env envVAR1 VAR BOOLEAN
		assign {
			case {(greater_than, blVAR0, (subtraction, (addition, -64, -49, blVAR0, -44), (addition, -1, 0)))} result { False}
			result {False}
		}
	}
	variable { env envVAR2 VAR {'yes', 'no', 'both'}
		assign {
			case {(equal, 'yes', 'no')} result { 'both'}
			case {(less_than, 88, -67)} result { 'both'}
			result {'yes'}
		}
	}
	variable { bl blVAR3 VAR [2, 5]
		assign {
			result {(min, 5, (max, 2, (abs, (negative, (subtraction, 3, -70)))))}
		}
	}
	variable { local localVAR4 VAR BOOLEAN
		assign {
			case {False} result { (and, True, (greater_than_or_equal, blVAR0, blVAR3))}
			case {(greater_than, blVAR0, blVAR0)} result { (greater_than_or_equal, 6, blVAR3)}
			result {True}
		}
	}
	variable { env envFROZENVAR5 FROZENVAR [2, 5]
		assign {
			case {(less_than_or_equal, (addition, blVAR0, 92, blVAR0, blVAR0), (subtraction, blVAR0, 21))} result { (min, 5, (max, 2, (min, (negative, blVAR3), (max, 72, -23))))}
			result {(min, 5, (max, 2, (multiplication, -3, 54, blVAR3, 20)))}
		}
	}
	variable { env envFROZENVAR6 array 2 FROZENVAR BOOLEAN
		per_index
		assign {
			case {(equal, 'both', 'both')} result { (greater_than_or_equal, 8, blVAR0)}
			case {(equivalent, True, envVAR1)} result { False}
			result {envVAR1}
		}
		assign {
			case {(xnor, envVAR1, True)} result { (greater_than, blVAR0, blVAR3)}
			case {(or, envVAR1, envVAR1)} result { (or, envVAR1, envVAR1)}
			result {(less_than, blVAR0, envFROZENVAR5)}
		}
	}
	variable { bl blDEFINE7 array 3 DEFINE BOOLEAN
		range
		assign {
			result {True}
		}
	}
	variable { local localDEFINE8 DEFINE INT
		assign {
			case {(or, (xor, False, (xnor, True, (index, blDEFINE7, 2))), (greater_than_or_equal, 16, blVAR3))} result { (min, 5, (max, 2, (abs, (min, (negative, -91), (count, (or, (index, blDEFINE7, 0), (index, blDEFINE7, 1)), (less_than_or_equal, -12, blVAR0))))))}
			case {(or, (index, blDEFINE7, 1), (xor, True, True))} result { (min, 5, (max, 2, (multiplication, -15, (max, (max, blVAR3, 26), (negative, 25)))))}
			result {(min, 5, (max, 2, (multiplication, (negative, blVAR0), blVAR3)))}
		}
	}
	variable { local localDEFINE9 array 3 DEFINE INT
		range
		assign {
			case {(xnor, False, (index, blDEFINE7, 1))} result { (min, 5, (max, 2, (multiplication, (count, (equal, True, True), (equivalent, True, (index, blDEFINE7, 2)), (greater_than_or_equal, blVAR3, blVAR0)), blVAR0)))}
			result {(min, 5, (max, 2, (subtraction, blVAR0, -29)))}
		}
	}
	variable { local localDEFINE10 DEFINE BOOLEAN
		assign {
			case {(greater_than_or_equal, 37, (abs, -23))} result { (xor, (index, blDEFINE7, 2), False)}
			case {(not_equal, 'no', 'both')} result { (greater_than, blVAR0, blVAR0)}
			result {(equivalent, False, (equivalent, (index, blDEFINE7, 1), False))}
		}
	}
}
environment_update {
	variable_statement{ envVAR1
	assign {
		case {False} result { (equal, True, envVAR1)}
		result {(less_than, 64, 36)}
	}
	}
	variable_statement{ envVAR2
	assign {
		result {envVAR2}
	}
	}
	variable_statement{ envVAR2
	assign {
		case {(equal, (max, blVAR0, blVAR3), (abs, -31))} result { envVAR2}
		result {envVAR2}
	}
	}
	variable_statement{ envVAR1
	assign {
		result {(index, blDEFINE7, 2)}
	}
	}
	variable_statement{ envVAR2
	assign {
		case {(equal, 27, blVAR3)} result { envVAR2}
		result {envVAR2}
	}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blVAR3, blDEFINE7}
		condition{(or, False, (index, blDEFINE7, 0))}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blVAR3, blDEFINE7}
		condition{(equal, (abs, 92), blVAR0)}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {localVAR4, localDEFINE8}
		read_variables { }
		write_variables {blVAR0, blVAR3, blDEFINE7}
		initial_values {

		}
		update {
			return_statement {
				result {running}
			}
			variable_statement{ localVAR4
			assign {
				case {(and, (not_equal, -44, -6), (or, False, True))} result { (implies, False, (greater_than, 23, -59))}
				result {(not_equal, blVAR0, (subtraction, (addition, blVAR0, 8, 13, blVAR3), -53))}
			}
			}
			variable_statement{ blVAR0
			assign {
				result {(min, 5, (max, 2, 71))}
			}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localVAR4, localDEFINE8, localDEFINE10}
		read_variables { }
		write_variables {blVAR0, blVAR3, blDEFINE7}
		initial_values {
			variable_statement{ localVAR4
			assign {
				result {(less_than_or_equal, blVAR3, (multiplication, blVAR0, blVAR0, -88, 59))}
			}
			}
			variable_statement{ localDEFINE8
			assign {
				case {False} result { (min, 5, (max, 2, (min, blVAR0, blVAR3)))}
				case {(index, blDEFINE7, 1)} result { (min, 5, (max, 2, (addition, (addition, (negative, blVAR0), (multiplication, blVAR3, blVAR0)), -89, 57, (abs, blVAR3))))}
				result {(min, 5, (max, 2, (min, 15, 79)))}
			}
			}

		}
		update {
			return_statement {
				case { (implies, (or, False, localVAR4), localVAR4)} result { failure}
				result {running}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localVAR4, localDEFINE9}
		read_variables { }
		write_variables {blVAR0, blVAR3, blDEFINE7}
		initial_values {

		}
		update {
			return_statement {
				case { (implies, (not_equal, 3, -74), (greater_than_or_equal, 50, (index, localDEFINE9, 2)))} result { running}
				result {failure}
			}
			variable_statement{ localVAR4
			assign {
				case {(implies, True, localVAR4)} result { (less_than, blVAR0, 46)}
				case {(index, blDEFINE7, 0)} result { (less_than, blVAR0, (index, localDEFINE9, 2))}
				result {(xnor, (and, True, localVAR4), (implies, (index, blDEFINE7, 0), (index, blDEFINE7, 0)))}
			}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {localDEFINE8, localDEFINE9}
		read_variables { }
		write_variables {blVAR0, blVAR3, blDEFINE7}
		initial_values {
			variable_statement{ localDEFINE9
				per_index
				assign {
					case {(equal, (less_than_or_equal, -38, blVAR0), False)} result { (min, 5, (max, 2, (subtraction, 0, blVAR3)))}
					result {(min, 5, (max, 2, blVAR3))}
				}
				assign {
					case {(implies, False, (index, blDEFINE7, 2))} result { (min, 5, (max, 2, (max, (negative, blVAR3), (addition, blVAR3, 37, 4, blVAR3))))}
					result {(min, 5, (max, 2, (count, (xor, (index, blDEFINE7, 0), True), (xor, False, False))))}
				}
				assign {
					case {(equal, -2, -23)} result { (min, 5, (max, 2, blVAR0))}
					result {(min, 5, (max, 2, (count, (greater_than_or_equal, blVAR3, (count, (greater_than_or_equal, -83, blVAR3), (less_than, -90, (max, blVAR3, -51)), (less_than_or_equal, blVAR0, (multiplication, blVAR0, -68, 57, blVAR0)), (xnor, True, (greater_than, blVAR3, -92)))), (less_than_or_equal, 71, (min, -94, -75)))))}
				}
			}

		}
		update {
			read_environment {
				a4_read_before_1
				condition {(index, envFROZENVAR6, 1)}
				variable_statement{ blVAR0
				assign {
					case {(equal, (greater_than_or_equal, -53, envFROZENVAR5), (xor, (equivalent, False, (index, blDEFINE7, 2)), (and, True, True)))} result { (min, 5, (max, 2, -74))}
					result {(min, 5, (max, 2, (abs, (max, blVAR3, -33))))}
				}
				}
			}
			read_environment {
				a4_read_before_0
				condition {(less_than_or_equal, (index, localDEFINE9, 2), (negative, blVAR3))}
				variable_statement{ blVAR3
				assign {
					case {(greater_than_or_equal, localDEFINE8, 65)} result { (min, 5, (max, 2, (negative, blVAR3)))}
					case {(greater_than_or_equal, (abs, 92), localDEFINE8)} result { (min, 5, (max, 2, (max, (max, 64, -91), localDEFINE8)))}
					result {(min, 5, (max, 2, (addition, 75, 33, 27)))}
				}
				}
			}
			return_statement {
				case { (greater_than, (abs, 56), (min, -30, localDEFINE8))} result { failure}
				result {success}
			}
			variable_statement{ blVAR3
			assign {
				case {(xor, True, False)} result { (min, 5, (max, 2, (negative, -91)))}
				case {(greater_than, (multiplication, blVAR3, 8), (addition, blVAR0, -67, (abs, -44)))} result { (min, 5, (max, 2, (negative, -70)))}
				result {(min, 5, (max, 2, (count, (xor, (index, blDEFINE7, 0), False), (xor, (xnor, (index, blDEFINE7, 2), (index, blDEFINE7, 0)), (index, blDEFINE7, 0)), (and, (greater_than_or_equal, (subtraction, 39, 70), (min, -36, 35)), (less_than_or_equal, 35, (addition, -22, blVAR3))))))}
			}
			}
			write_environment {
				a4_write_after_0
				variable_statement{ instant envVAR2
				assign {
					case {True} result { envVAR2}
					case {(or, (xnor, envVAR1, (index, blDEFINE7, 0)), (and, True, (index, envFROZENVAR6, 0)))} result { envVAR2}
					result {envVAR2}
				}
				}
			}
		}
	}
}
sub_trees{}
tree {
	decorator {
		dec_sf0
		X_is_Y X success Y failure
		child {
			a2{}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications