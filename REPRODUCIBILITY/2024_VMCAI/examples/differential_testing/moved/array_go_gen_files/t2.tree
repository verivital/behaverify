configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 VAR [-5, -2]
		assign {
			case {(xnor, False, (not_equal, (less_than_or_equal, 14, -3), (greater_than_or_equal, 31, 24)))} result { (min, -2, (max, -5, 97))}
			result {(min, -2, (max, -5, (min, 100, (max, -100, (addition, 3, 3, 88, -14)))))}
		}
	}
	variable { env envVAR1 VAR BOOLEAN
		assign {
			result {True}
		}
	}
	variable { bl blVAR2 VAR {'yes', 'no', 'both'}
		assign {
			case {(and, False, (greater_than, (min, 100, (max, -100, (min, 51, blVAR0))), blVAR0))} result { 'yes'}
			case {(less_than, blVAR0, blVAR0)} result { 'no'}
			result {'no'}
		}
	}
	variable { bl blVAR3 array 2 VAR {'yes', 'no', 'both'}
		range
		assign {
			result {'both'}
		}
	}
	variable { local localVAR4 VAR BOOLEAN
		assign {
			case {True} result { (xor, True, False)}
			result {(greater_than_or_equal, (count, (equivalent, False, True), (xnor, True, True)), blVAR0)}
		}
	}
	variable { env envDEFINE5 DEFINE INT
		assign {
			result {(min, -2, (max, -5, -16))}
		}
	}
	variable { env envDEFINE6 DEFINE ENUM
		assign {
			result {blVAR2}
		}
	}
	variable { env envDEFINE7 DEFINE INT
		assign {
			case {(not_equal, blVAR2, 'yes')} result { (min, 5, (max, 2, (min, 100, (max, -100, (subtraction, (min, 100, (max, -100, (abs, (min, 100, (max, -100, (min, envDEFINE5, 19)))))), (count, (xor, (xor, envVAR1, envVAR1), True), (less_than, (min, 100, (max, -100, (subtraction, envDEFINE5, 94))), (min, 100, (max, -100, (min, blVAR0, envDEFINE5)))), (and, (and, True, envVAR1), (implies, True, False)), (and, (xor, envVAR1, False), envVAR1)))))))}
			case {(greater_than, (min, 100, (max, -100, (negative, 0))), (min, 100, (max, -100, (multiplication, envDEFINE5, envDEFINE5, blVAR0, envDEFINE5))))} result { (min, 5, (max, 2, (count, (implies, envVAR1, (equivalent, envVAR1, True)), (xor, (xnor, (and, envVAR1, True), False), (or, (xnor, envVAR1, False), (less_than, blVAR0, envDEFINE5))))))}
			result {(min, 5, (max, 2, (min, 100, (max, -100, (max, blVAR0, envDEFINE5)))))}
		}
	}
	variable { env envDEFINE8 array 2 DEFINE INT
		per_index
		assign {
			result {(min, 5, (max, 2, envDEFINE7))}
		}
		assign {
			case {(and, (xnor, envVAR1, envVAR1), (implies, False, True))} result { (min, 5, (max, 2, (min, 100, (max, -100, (negative, -91)))))}
			result {(min, 5, (max, 2, (min, 100, (max, -100, (multiplication, 78, -16, 72)))))}
		}
	}
}
environment_update {
	variable_statement{ envVAR1
	assign {
		result {True}
	}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blVAR2, blVAR3}
		condition{(or, True, False)}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blVAR2, blVAR3}
		condition{False}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blVAR3}
		initial_values {

		}
		update {
			return_statement {
				result {running}
			}
			read_environment {
				a1_read_after_0
				condition {True}
				variable_statement{ blVAR3
					per_index
					index_of { (min, 1, (max, 0, (min, 100, (max, -100, (max, (index, envDEFINE8, 1), envDEFINE5)))))}
					assign {
						case {(greater_than, envDEFINE7, 8)} result { 'no'}
						case {(less_than_or_equal, envDEFINE7, envDEFINE7)} result { 'no'}
						result {'both'}
					}
				}
				variable_statement{ blVAR2
				assign {
					case {envVAR1} result { 'both'}
					case {(less_than, 74, (index, envDEFINE8, 1))} result { (index, blVAR3, 1)}
					result {'yes'}
				}
				}
				variable_statement{ blVAR2
				assign {
					case {(less_than_or_equal, -66, (min, 100, (max, -100, (subtraction, blVAR0, 97))))} result { 'both'}
					case {(equal, (min, 100, (max, -100, (multiplication, 76, 94))), envDEFINE5)} result { (index, blVAR3, 0)}
					result {envDEFINE6}
				}
				}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blVAR3}
		initial_values {

		}
		update {
			return_statement {
				case { (less_than_or_equal, -1, blVAR0)} result { success}
				case { (equal, blVAR0, blVAR0)} result { running}
				result {running}
			}
			variable_statement{ blVAR3
				per_index
				index_of { (min, 1, (max, 0, (min, 100, (max, -100, (negative, blVAR0)))))}
				assign {
					case {(less_than_or_equal, (min, 100, (max, -100, (max, 24, -19))), (min, 100, (max, -100, (min, blVAR0, blVAR0))))} result { 'yes'}
					case {(less_than, 17, (min, 100, (max, -100, (addition, blVAR0, (min, 100, (max, -100, (negative, blVAR0))), (min, 100, (max, -100, (multiplication, blVAR0, blVAR0)))))))} result { blVAR2}
					result {(index, blVAR3, 1)}
				}
				index_of { (min, 1, (max, 0, (min, 100, (max, -100, (addition, 64, blVAR0)))))}
				assign {
					case {(equal, False, (equivalent, False, True))} result { (index, blVAR3, 0)}
					case {(less_than_or_equal, blVAR0, blVAR0)} result { 'no'}
					result {'both'}
				}
			}
			variable_statement{ blVAR3
				per_index
				index_of { (min, 1, (max, 0, (min, 100, (max, -100, (multiplication, (min, 100, (max, -100, (subtraction, -82, blVAR0))), -59, blVAR0)))))}
				assign {
					case {(greater_than_or_equal, (count, (less_than_or_equal, blVAR0, (count, (xor, False, True), (greater_than, blVAR0, blVAR0), (greater_than_or_equal, blVAR0, -10))), (or, True, False), (or, True, True)), (count, (less_than_or_equal, (min, 100, (max, -100, (addition, blVAR0, -80))), blVAR0), (and, (equal, 'both', 'both'), False), (greater_than_or_equal, blVAR0, blVAR0), (equivalent, False, True)))} result { 'yes'}
					result {(index, blVAR3, 0)}
				}
				index_of { (min, 1, (max, 0, (min, 100, (max, -100, (addition, 63, blVAR0)))))}
				assign {
					case {(not_equal, 'yes', 'both')} result { 'no'}
					result {'both'}
				}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localVAR4}
		read_variables { }
		write_variables {blVAR0, blVAR2, blVAR3}
		initial_values {
			variable_statement{ localVAR4
			assign {
				case {(not_equal, blVAR0, 18)} result { (and, (or, False, False), (xor, False, (equivalent, False, True)))}
				result {(greater_than, blVAR0, (min, 100, (max, -100, (negative, blVAR0))))}
			}
			}

		}
		update {
			variable_statement{ blVAR0
			assign {
				case {(xor, localVAR4, True)} result { (min, -2, (max, -5, (count, (less_than_or_equal, (min, 100, (max, -100, (subtraction, blVAR0, blVAR0))), (min, 100, (max, -100, (abs, 47)))), (less_than, (min, 100, (max, -100, (multiplication, blVAR0, blVAR0, blVAR0, blVAR0))), (min, 100, (max, -100, (abs, blVAR0)))))))}
				result {(min, -2, (max, -5, (min, 100, (max, -100, (subtraction, blVAR0, 25)))))}
			}
			}
			write_environment {
				a3_write_before_2
				variable_statement{ envVAR1
				assign {
					case {False} result { localVAR4}
					result {True}
				}
				}
			}
			variable_statement{ blVAR2
			assign {
				case {(or, True, True)} result { (index, blVAR3, 1)}
				case {localVAR4} result { 'no'}
				result {(index, blVAR3, 1)}
			}
			}
			write_environment {
				a3_write_before_0
				variable_statement{ envVAR1
				assign {
					result {localVAR4}
				}
				}
			}
			return_statement {
				result {failure}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {localVAR4}
		read_variables { }
		write_variables {blVAR0, blVAR2, blVAR3}
		initial_values {

		}
		update {
			read_environment {
				a4_read_before_0
				condition {(and, True, envVAR1)}
				variable_statement{ blVAR0
				assign {
					case {(greater_than_or_equal, blVAR0, envDEFINE5)} result { (min, -2, (max, -5, -51))}
					result {(min, -2, (max, -5, (min, 100, (max, -100, (max, (index, envDEFINE8, 0), envDEFINE7)))))}
				}
				}
			}
			return_statement {
				case { (less_than_or_equal, -35, 33)} result { success}
				result {success}
			}
			write_environment {
				a4_write_after_0
				variable_statement{ instant envVAR1
				assign {
					result {True}
				}
				}
			}
		}
	}
}
sub_trees{}
tree {
	c1{}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications