configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 array 3 VAR [-5, -2]
		per_index
		assign {
			case {(equivalent, (xor, False, False), (implies, False, False))} result { (min, -2, (max, -5, (subtraction, 74, (max, -80, -2))))}
			result {(min, -2, (max, -5, (max, 2, -22)))}
		}
		assign {
			case {True} result { (min, -2, (max, -5, (negative, (addition, (count, (equivalent, False, True), (not_equal, 4, 5)), 4, -66))))}
			case {(and, True, False)} result { (min, -2, (max, -5, (abs, (subtraction, (count, (and, True, False), (xnor, True, True), (equivalent, False, False)), (negative, -80)))))}
			result {(min, -2, (max, -5, (negative, (multiplication, 23, 75, -45))))}
		}
		assign {
			result {(min, -2, (max, -5, -87))}
		}
	}
	variable { env envVAR1 array 3 VAR {'yes', 'no', 'both'}
		per_index
		assign {
			case {(less_than, (addition, (index, blVAR0, 1), -7), (abs, -94))} result { 'yes'}
			result {'yes'}
		}
		assign {
			case {(equivalent, True, True)} result { 'yes'}
			case {(implies, (or, True, True), (equal, 'no', 'both'))} result { 'yes'}
			result {'no'}
		}
		assign {
			case {(not_equal, True, False)} result { 'yes'}
			case {False} result { 'yes'}
			result {'no'}
		}
	}
	variable { env envVAR2 array 3 VAR {'yes', 'no', 'both'}
		per_index
		assign {
			case {(or, False, (or, True, True))} result { 'no'}
			case {(implies, True, False)} result { (index, envVAR1, 0)}
			result {'both'}
		}
		assign {
			case {(not_equal, 'both', 'no')} result { (index, envVAR1, 1)}
			case {(less_than, 92, (subtraction, (count, (not_equal, False, True), (and, True, True)), (count, (or, True, False), (greater_than_or_equal, -54, 40), (not_equal, True, True), (greater_than_or_equal, (index, blVAR0, 1), (index, blVAR0, 1)))))} result { (index, envVAR1, 2)}
			result {'both'}
		}
		assign {
			case {(implies, False, (less_than, (index, blVAR0, 1), (index, blVAR0, 2)))} result { 'both'}
			case {False} result { (index, envVAR1, 0)}
			result {(index, envVAR1, 1)}
		}
	}
	variable { local localVAR3 array 2 VAR BOOLEAN
		per_index
		assign {
			case {(equivalent, True, True)} result { (not_equal, 'both', 'both')}
			case {True} result { (less_than, -26, -63)}
			result {True}
		}
		assign {
			case {False} result { True}
			result {(not_equal, 'yes', 'no')}
		}
	}
	variable { env envVAR4 VAR BOOLEAN
		assign {
			case {(not_equal, (subtraction, (index, blVAR0, 2), (index, blVAR0, 0)), (count, (xor, False, (xor, False, False)), (or, False, (equal, False, False))))} result { (greater_than, 16, -20)}
			case {(and, True, False)} result { (xnor, True, True)}
			result {(implies, False, (greater_than, 97, (index, blVAR0, 0)))}
		}
	}
	variable { bl blDEFINE5 DEFINE INT
		assign {
			result {(min, -2, (max, -5, (index, blVAR0, 2)))}
		}
	}
	variable { env envDEFINE6 DEFINE BOOLEAN
		assign {
			case {envVAR4} result { True}
			result {(less_than, blDEFINE5, (index, blVAR0, 2))}
		}
	}
}
environment_update {
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blDEFINE5}
		condition{(xnor, False, (not_equal, (max, 40, (index, blVAR0, 0)), (max, (index, blVAR0, 1), 90)))}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blDEFINE5}
		condition{False}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blDEFINE5}
		initial_values {

		}
		update {
			variable_statement{ blVAR0
				per_index
				index_of { (min, 2, (max, 0, blDEFINE5))}
				assign {
					result {(min, -2, (max, -5, blDEFINE5))}
				}
				index_of { (min, 2, (max, 0, (max, blDEFINE5, (addition, 0, 5))))}
				assign {
					result {(min, -2, (max, -5, (max, (addition, (index, blVAR0, 1), blDEFINE5, (index, blVAR0, 1), blDEFINE5), (index, blVAR0, 1))))}
				}
			}
			read_environment {
				a1_read_before_0
				condition {(implies, (xnor, (implies, False, envDEFINE6), (or, envDEFINE6, envVAR4)), (greater_than, -26, -97))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 2, (max, 0, (count, (less_than, (index, blVAR0, 2), (min, -22, (index, blVAR0, 1))), (less_than_or_equal, blDEFINE5, blDEFINE5))))}
					assign {
						result {(min, -2, (max, -5, 19))}
					}
				}
			}
			return_statement {
				result {failure}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localVAR3}
		read_variables { }
		write_variables {blVAR0, blDEFINE5}
		initial_values {

		}
		update {
			return_statement {
				result {running}
			}
			write_environment {
				a2_write_after_1
				variable_statement{ instant envVAR4
				assign {
					case {(xor, envVAR4, False)} result { (greater_than_or_equal, (index, blVAR0, 1), (min, blDEFINE5, blDEFINE5))}
					result {(or, False, envVAR4)}
				}
				}
			}
			variable_statement{ localVAR3
				per_index
				index_of { (min, 1, (max, 0, 74))}
				assign {
					case {(not_equal, (index, localVAR3, 0), (index, localVAR3, 0))} result { True}
					result {(less_than, blDEFINE5, (multiplication, (index, blVAR0, 2), (index, blVAR0, 2), 67))}
				}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blDEFINE5}
		initial_values {

		}
		update {
			read_environment {
				a3_read_before_1
				condition {(xor, False, envDEFINE6)}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 2, (max, 0, (multiplication, 30, -15, (negative, -93))))}
					assign {
						case {False} result { (min, -2, (max, -5, blDEFINE5))}
						case {(greater_than, (max, 41, 12), (max, -12, (index, blVAR0, 0)))} result { (min, -2, (max, -5, 33))}
						result {(min, -2, (max, -5, (negative, (subtraction, 76, (min, blDEFINE5, -47)))))}
					}
					index_of { (min, 2, (max, 0, (max, 89, -12)))}
					assign {
						case {(greater_than_or_equal, 31, (count, (not_equal, blDEFINE5, 24), (and, envVAR4, envVAR4), (less_than, blDEFINE5, blDEFINE5), (less_than, -49, blDEFINE5)))} result { (min, -2, (max, -5, (abs, -84)))}
						case {(not_equal, False, True)} result { (min, -2, (max, -5, (max, 98, blDEFINE5)))}
						result {(min, -2, (max, -5, (count, (equal, envVAR4, envVAR4), (greater_than_or_equal, -72, (index, blVAR0, 2)))))}
					}
					index_of { (min, 2, (max, 0, (index, blVAR0, 1)))}
					assign {
						case {(equal, (index, envVAR1, 1), 'both')} result { (min, -2, (max, -5, (negative, -13)))}
						case {(not_equal, 84, (addition, 51, blDEFINE5, blDEFINE5, 33))} result { (min, -2, (max, -5, (count, (less_than_or_equal, -91, (index, blVAR0, 2)), (less_than, (index, blVAR0, 1), (index, blVAR0, 2)), (and, envDEFINE6, envDEFINE6), (implies, False, False))))}
						result {(min, -2, (max, -5, (negative, (index, blVAR0, 1))))}
					}
				}
			}
			read_environment {
				a3_read_before_0
				condition {(greater_than_or_equal, (count, (equal, envVAR4, envDEFINE6), (greater_than_or_equal, blDEFINE5, blDEFINE5), (equivalent, True, envDEFINE6)), (negative, blDEFINE5))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 2, (max, 0, 96))}
					assign {
						case {(and, envVAR4, (not_equal, False, False))} result { (min, -2, (max, -5, 56))}
						case {(xor, True, True)} result { (min, -2, (max, -5, (negative, (count, (or, False, envDEFINE6), (equal, False, envDEFINE6), (implies, envDEFINE6, True), (implies, False, True)))))}
						result {(min, -2, (max, -5, (negative, (index, blVAR0, 0))))}
					}
					index_of { (min, 2, (max, 0, (abs, blDEFINE5)))}
					assign {
						case {False} result { (min, -2, (max, -5, 63))}
						case {envDEFINE6} result { (min, -2, (max, -5, (count, (equal, envDEFINE6, False), (greater_than_or_equal, -83, 10), (less_than, blDEFINE5, (index, blVAR0, 2)))))}
						result {(min, -2, (max, -5, -33))}
					}
				}
			}
			return_statement {
				case { (greater_than_or_equal, (count, (implies, True, False), (and, True, False), (equal, True, True)), (abs, blDEFINE5))} result { success}
				result {failure}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 2, (max, 0, (count, (greater_than_or_equal, (index, blVAR0, 0), -90), (implies, (equivalent, False, (xor, True, True)), (greater_than_or_equal, blDEFINE5, blDEFINE5)))))}
				assign {
					case {(greater_than, -71, (index, blVAR0, 0))} result { (min, -2, (max, -5, (index, blVAR0, 1)))}
					result {(min, -2, (max, -5, (abs, -31)))}
				}
			}
			read_environment {
				a3_read_after_0
				condition {(xor, True, True)}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 2, (max, 0, (negative, (max, -52, -32))))}
					assign {
						case {(and, False, False)} result { (min, -2, (max, -5, (multiplication, -42, (index, blVAR0, 0), -58)))}
						result {(min, -2, (max, -5, (negative, blDEFINE5)))}
					}
				}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {localVAR3}
		read_variables { }
		write_variables {blVAR0, blDEFINE5}
		initial_values {

		}
		update {
			return_statement {
				case { (equal, (equal, (min, 51, (index, blVAR0, 1)), blDEFINE5), (xnor, False, (or, (index, localVAR3, 1), (index, localVAR3, 1))))} result { failure}
				case { (greater_than_or_equal, (index, blVAR0, 2), (subtraction, (index, blVAR0, 0), -63))} result { running}
				result {success}
			}
		}
	}
}
sub_trees{}
tree {
	composite {
		sel0
		selector
		with_partial_memory
		children {
			composite {
				sel1
				selector
				
				children {
					a1{}
					c2{}
					a4{}
				}
			}
			composite {
				p_all2
				parallel policy success_on_all
				
				children {
					a4{}
					a1{}
				}
			}
			c1{}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications