configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 array 2 VAR [2, 5]
		range
		assign {
			result {(min, 5, (max, 2, (min, 100, (max, -100, (multiplication, (min, 100, (max, -100, (negative, -12))), (min, 100, (max, -100, (negative, (min, 100, (max, -100, (negative, 2)))))), -3, (min, 100, (max, -100, (abs, 4))))))))}
		}
	}
	variable { env envVAR1 VAR [-5, -2]
		assign {
			case {(equivalent, False, True)} result { (min, -2, (max, -5, 23))}
			case {(equal, (min, 100, (max, -100, (addition, (index, blVAR0, 0), 32, (index, blVAR0, 0), 22))), (min, 100, (max, -100, (subtraction, (index, blVAR0, 0), (min, 100, (max, -100, (min, -80, (index, blVAR0, 0))))))))} result { (min, -2, (max, -5, (min, 100, (max, -100, (abs, (min, 100, (max, -100, (multiplication, (count, (implies, True, True), (greater_than, -64, (index, blVAR0, 1)), (xor, True, False), (greater_than_or_equal, (index, blVAR0, 0), -3)), (min, 100, (max, -100, (max, (index, blVAR0, 0), (index, blVAR0, 1)))), (min, 100, (max, -100, (abs, -43))), (min, 100, (max, -100, (max, 48, (index, blVAR0, 1))))))))))))}
			result {(min, -2, (max, -5, (min, 100, (max, -100, (negative, (min, 100, (max, -100, (addition, (index, blVAR0, 1), (count, (implies, True, True), (xnor, True, True), (xnor, True, False)), (min, 100, (max, -100, (multiplication, -37, (index, blVAR0, 0), (index, blVAR0, 0), 83))), 42))))))))}
		}
	}
	variable { bl blVAR2 VAR [-5, -2]
		assign {
			case {(greater_than, (index, blVAR0, 0), -29)} result { (min, -2, (max, -5, (min, 100, (max, -100, (negative, (min, 100, (max, -100, (multiplication, (index, blVAR0, 1), (min, 100, (max, -100, (max, (index, blVAR0, 1), (index, blVAR0, 1)))), -24, (index, blVAR0, 0)))))))))}
			result {(min, -2, (max, -5, (min, 100, (max, -100, (multiplication, (index, blVAR0, 0), (min, 100, (max, -100, (multiplication, (index, blVAR0, 1), -86, -89))), (index, blVAR0, 0), (index, blVAR0, 1))))))}
		}
	}
	variable { env envFROZENVAR3 array 3 FROZENVAR [2, 5]
		range
		assign {
			result {(min, 5, (max, 2, (min, 100, (max, -100, (min, (min, 100, (max, -100, (multiplication, 55, -2))), (min, 100, (max, -100, (multiplication, 41, envVAR1))))))))}
		}
	}
	variable { bl blDEFINE4 DEFINE INT
		assign {
			case {True} result { (min, 5, (max, 2, (min, 100, (max, -100, (negative, 99)))))}
			result {(min, 5, (max, 2, -36))}
		}
	}
	variable { env envDEFINE5 DEFINE BOOLEAN
		assign {
			result {(xnor, (not_equal, (index, envFROZENVAR3, 1), (index, blVAR0, 1)), True)}
		}
	}
}
environment_update {
	variable_statement{ envVAR1
	assign {
		case {(not_equal, False, True)} result { (min, -2, (max, -5, (count, (greater_than_or_equal, envVAR1, 53), (implies, True, (xor, True, True)), (implies, False, (equivalent, False, False)), (implies, (greater_than_or_equal, 93, envVAR1), (less_than, (min, 100, (max, -100, (addition, blVAR2, (index, envFROZENVAR3, 1), -17))), blDEFINE4)))))}
		result {(min, -2, (max, -5, -88))}
	}
	}
	variable_statement{ envVAR1
	assign {
		case {(and, False, envDEFINE5)} result { (min, -2, (max, -5, (min, 100, (max, -100, (subtraction, (index, envFROZENVAR3, 2), (min, 100, (max, -100, (negative, (index, envFROZENVAR3, 2)))))))))}
		result {(min, -2, (max, -5, (min, 100, (max, -100, (subtraction, (min, 100, (max, -100, (addition, 57, envVAR1, -37, 75))), envVAR1)))))}
	}
	}
	variable_statement{ envVAR1
	assign {
		case {envDEFINE5} result { (min, -2, (max, -5, (min, 100, (max, -100, (negative, (index, envFROZENVAR3, 1))))))}
		result {(min, -2, (max, -5, (min, 100, (max, -100, (addition, blVAR2, envVAR1)))))}
	}
	}
	variable_statement{ envVAR1
	assign {
		result {(min, -2, (max, -5, (min, 100, (max, -100, (addition, 45, (index, blVAR0, 1), blVAR2)))))}
	}
	}
	variable_statement{ envVAR1
	assign {
		case {(xnor, envDEFINE5, (less_than, -35, -64))} result { (min, -2, (max, -5, (min, 100, (max, -100, (abs, (min, 100, (max, -100, (subtraction, 37, (index, blVAR0, 0)))))))))}
		result {(min, -2, (max, -5, (min, 100, (max, -100, (abs, (count, (xnor, False, envDEFINE5), (greater_than_or_equal, blDEFINE4, -19), (xor, envDEFINE5, envDEFINE5)))))))}
	}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blVAR2, blDEFINE4}
		condition{(greater_than_or_equal, (min, 100, (max, -100, (subtraction, 87, (min, 100, (max, -100, (subtraction, (index, blVAR0, 0), blDEFINE4)))))), (min, 100, (max, -100, (subtraction, (min, 100, (max, -100, (min, blVAR2, blDEFINE4))), (count, (and, True, False), (greater_than_or_equal, blDEFINE4, 23))))))}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blVAR2, blDEFINE4}
		condition{(xor, False, (not_equal, (index, blVAR0, 1), 61))}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			read_environment {
				a1_read_before_0
				condition {(greater_than, (index, envFROZENVAR3, 2), envVAR1)}
				variable_statement{ blVAR2
				assign {
					case {(less_than, 78, -99)} result { (min, -2, (max, -5, (count, (equivalent, (less_than, (index, blVAR0, 0), (min, 100, (max, -100, (min, (index, blVAR0, 1), blDEFINE4)))), (equivalent, envDEFINE5, (or, True, False))), (greater_than_or_equal, (min, 100, (max, -100, (multiplication, (count, (equal, False, envDEFINE5), (equal, True, envDEFINE5), (greater_than, blVAR2, -42)), -11))), (count, (and, envDEFINE5, False), (equal, False, False))), (or, envDEFINE5, (less_than_or_equal, envVAR1, 44)))))}
					case {False} result { (min, -2, (max, -5, (min, 100, (max, -100, (max, (min, 100, (max, -100, (min, envVAR1, (index, blVAR0, 1)))), (min, 100, (max, -100, (min, envVAR1, blDEFINE4))))))))}
					result {(min, -2, (max, -5, (count, (less_than_or_equal, (min, 100, (max, -100, (addition, (count, (xor, envDEFINE5, True), (not_equal, envDEFINE5, envDEFINE5), (less_than, (index, envFROZENVAR3, 1), 60)), (min, 100, (max, -100, (abs, 57)))))), (min, 100, (max, -100, (multiplication, (min, 100, (max, -100, (min, envVAR1, 99))), (count, (equal, -42, blVAR2), (not_equal, envDEFINE5, False), (greater_than_or_equal, envVAR1, (index, blVAR0, 0)), (equal, False, False)), -17)))), (and, (and, (greater_than_or_equal, blDEFINE4, (index, blVAR0, 1)), (xor, False, True)), envDEFINE5))))}
				}
				}
			}
			return_statement {
				case { (equivalent, False, (greater_than_or_equal, -64, -35))} result { failure}
				case { True} result { success}
				case { (not_equal, blVAR2, (index, blVAR0, 0))} result { failure}
				result {success}
			}
			write_environment {
				a1_write_after_1
				variable_statement{ instant envVAR1
				assign {
					case {(implies, envDEFINE5, (less_than, 97, envVAR1))} result { (min, -2, (max, -5, (min, 100, (max, -100, (max, (index, blVAR0, 0), (index, envFROZENVAR3, 1))))))}
					result {(min, -2, (max, -5, (min, 100, (max, -100, (subtraction, (index, envFROZENVAR3, 1), envVAR1)))))}
				}
				}
				variable_statement{ envVAR1
				assign {
					result {(min, -2, (max, -5, (min, 100, (max, -100, (abs, 85)))))}
				}
				}
			}
			write_environment {
				a1_write_after_0
				variable_statement{ instant envVAR1
				assign {
					case {(implies, envDEFINE5, True)} result { (min, -2, (max, -5, (min, 100, (max, -100, (negative, envVAR1)))))}
					result {(min, -2, (max, -5, (min, 100, (max, -100, (abs, -50)))))}
				}
				}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			variable_statement{ blVAR2
			assign {
				case {(less_than_or_equal, (min, 100, (max, -100, (addition, (index, blVAR0, 1), blVAR2, 87))), -28)} result { (min, -2, (max, -5, (min, 100, (max, -100, (addition, -42, (min, 100, (max, -100, (negative, blDEFINE4))), (min, 100, (max, -100, (addition, -11, (index, blVAR0, 0)))))))))}
				case {True} result { (min, -2, (max, -5, (min, 100, (max, -100, (min, (min, 100, (max, -100, (max, -68, 95))), blDEFINE4)))))}
				result {(min, -2, (max, -5, 35))}
			}
			}
			read_environment {
				a2_read_before_0
				condition {(not_equal, -39, -61)}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (min, 100, (max, -100, (abs, blVAR2)))))}
					assign {
						result {(min, 5, (max, 2, (min, 100, (max, -100, (max, blDEFINE4, (min, 100, (max, -100, (negative, 46))))))))}
					}
				}
				variable_statement{ blVAR2
				assign {
					result {(min, -2, (max, -5, 38))}
				}
				}
			}
			return_statement {
				case { True} result { running}
				case { False} result { success}
				result {failure}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			return_statement {
				case { (less_than, (index, blVAR0, 1), 27)} result { success}
				case { False} result { failure}
				case { (not_equal, -84, (min, 100, (max, -100, (min, -4, blDEFINE4))))} result { success}
				result {failure}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (count, (and, True, True), (not_equal, blDEFINE4, blVAR2))))}
				assign {
					case {(less_than_or_equal, (index, blVAR0, 1), (min, 100, (max, -100, (negative, (min, 100, (max, -100, (negative, blVAR2)))))))} result { (min, 5, (max, 2, (min, 100, (max, -100, (addition, (index, blVAR0, 1), blDEFINE4, blVAR2, blDEFINE4)))))}
					result {(min, 5, (max, 2, (min, 100, (max, -100, (multiplication, 37, -70, blDEFINE4, (min, 100, (max, -100, (subtraction, 74, -84))))))))}
				}
			}
			variable_statement{ blVAR2
			assign {
				case {(equivalent, (equivalent, True, True), True)} result { (min, -2, (max, -5, -34))}
				result {(min, -2, (max, -5, (index, blVAR0, 1)))}
			}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blVAR2, blDEFINE4}
		initial_values {

		}
		update {
			return_statement {
				case { True} result { running}
				case { (xor, False, False)} result { failure}
				result {running}
			}
			read_environment {
				a4_read_after_0
				condition {(not_equal, (min, 100, (max, -100, (negative, 81))), (min, 100, (max, -100, (abs, blVAR2))))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (min, 100, (max, -100, (multiplication, (index, envFROZENVAR3, 0), 3, -78)))))}
					assign {
						case {(xnor, (less_than, (index, blVAR0, 0), -66), (greater_than, 71, -2))} result { (min, 5, (max, 2, (min, 100, (max, -100, (subtraction, -25, (min, 100, (max, -100, (max, blDEFINE4, 32))))))))}
						result {(min, 5, (max, 2, (min, 100, (max, -100, (addition, (count, (greater_than_or_equal, 63, envVAR1), (greater_than_or_equal, blDEFINE4, 36), (and, envDEFINE5, False)), 71, envVAR1)))))}
					}
					index_of { (min, 1, (max, 0, (min, 100, (max, -100, (subtraction, -5, (count, (greater_than_or_equal, 81, blVAR2), (less_than, blDEFINE4, -43)))))))}
					assign {
						case {(or, (greater_than_or_equal, 8, -63), (less_than_or_equal, (index, blVAR0, 0), -5))} result { (min, 5, (max, 2, (min, 100, (max, -100, (negative, (min, 100, (max, -100, (multiplication, (index, blVAR0, 1), (min, 100, (max, -100, (addition, blVAR2, (index, blVAR0, 0))))))))))))}
						result {(min, 5, (max, 2, (min, 100, (max, -100, (multiplication, 51, 98, blDEFINE4)))))}
					}
				}
			}
		}
	}
}
sub_trees{}
tree {
	decorator {
		dec_sr0
		X_is_Y X success Y running
		child {
			composite {
				p_one1
				parallel policy success_on_one
				
				children {
					a4{}
					c2{}
				}
			}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications