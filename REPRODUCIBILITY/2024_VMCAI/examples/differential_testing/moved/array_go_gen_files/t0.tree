configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 array 2 VAR [2, 5]
		range
		assign {
			result {(min, 5, (max, 2, (addition, -3, 3, -72, 58)))}
		}
	}
	variable { env envVAR1 array 3 VAR BOOLEAN
		range
		assign {
			case {(greater_than, (multiplication, (index, blVAR0, 0), (index, blVAR0, 1), (index, blVAR0, 0), (index, blVAR0, 1)), (addition, 39, -62, (index, blVAR0, 1)))} result { False}
			result {False}
		}
	}
	variable { local localVAR2 VAR [2, 5]
		assign {
			case {(not_equal, (subtraction, (abs, 47), (abs, (index, blVAR0, 0))), (addition, (index, blVAR0, 1), (index, blVAR0, 1), (index, blVAR0, 0), (index, blVAR0, 1)))} result { (min, 5, (max, 2, (multiplication, 82, (index, blVAR0, 1), (index, blVAR0, 0))))}
			result {(min, 5, (max, 2, 10))}
		}
	}
	variable { env envFROZENVAR3 array 3 FROZENVAR {'yes', 'no', 'both'}
		per_index
		assign {
			result {'both'}
		}
		assign {
			case {True} result { 'both'}
			case {(greater_than_or_equal, (index, blVAR0, 0), (addition, (index, blVAR0, 0), (index, blVAR0, 1), -88, (index, blVAR0, 0)))} result { 'yes'}
			result {'both'}
		}
		assign {
			case {True} result { 'no'}
			result {'yes'}
		}
	}
	variable { local localDEFINE4 array 3 DEFINE ENUM
		per_index
		assign {
			case {(equal, 'no', 'yes')} result { 'no'}
			result {'no'}
		}
		assign {
			result {'no'}
		}
		assign {
			case {(or, (or, (xnor, False, True), False), (and, False, True))} result { 'no'}
			case {(less_than_or_equal, 0, 14)} result { 'yes'}
			result {'yes'}
		}
	}
	variable { env envDEFINE5 array 3 DEFINE INT
		per_index
		assign {
			case {(or, (or, True, (index, envVAR1, 0)), True)} result { (min, -2, (max, -5, (count, (xnor, (not_equal, True, (index, envVAR1, 1)), (not_equal, 'yes', 'yes')), (equal, False, (less_than, (index, blVAR0, 0), (index, blVAR0, 0))), (greater_than_or_equal, (negative, -90), (index, blVAR0, 0)), (equal, (index, envFROZENVAR3, 0), 'no'))))}
			result {(min, -2, (max, -5, (subtraction, (index, blVAR0, 1), (index, blVAR0, 1))))}
		}
		assign {
			case {(xor, (index, envVAR1, 1), (not_equal, 'yes', 'no'))} result { (min, -2, (max, -5, (index, blVAR0, 0)))}
			case {(xnor, (index, envVAR1, 0), (index, envVAR1, 1))} result { (min, -2, (max, -5, (abs, (min, 79, -91))))}
			result {(min, -2, (max, -5, (max, 37, (index, blVAR0, 0))))}
		}
		assign {
			result {(min, -2, (max, -5, (negative, (min, 25, (index, blVAR0, 1)))))}
		}
	}
	variable { env envDEFINE6 DEFINE BOOLEAN
		assign {
			case {(xnor, (index, envVAR1, 2), False)} result { (xor, (implies, (index, envVAR1, 0), False), (xnor, (xor, (index, envVAR1, 2), (index, envVAR1, 0)), True))}
			result {(less_than_or_equal, (index, blVAR0, 0), 70)}
		}
	}
	variable { env envDEFINE7 DEFINE BOOLEAN
		assign {
			case {(and, False, (implies, (equivalent, False, True), envDEFINE6))} result { (index, envVAR1, 1)}
			result {envDEFINE6}
		}
	}
}
environment_update {
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0}
		condition{(xnor, (and, False, False), (equivalent, True, False))}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0}
		condition{(implies, True, (and, (greater_than_or_equal, (index, blVAR0, 1), (index, blVAR0, 0)), (greater_than, -80, (index, blVAR0, 1))))}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0}
		initial_values {

		}
		update {
			read_environment {
				a1_read_before_0
				condition {(xor, (xnor, (greater_than, (index, envDEFINE5, 0), (index, envDEFINE5, 1)), (less_than, 77, (index, blVAR0, 1))), (and, False, envDEFINE6))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (count, (xor, True, (or, False, envDEFINE7)), (not_equal, (index, envDEFINE5, 1), 88), (equal, 'yes', 'yes'))))}
					assign {
						result {(min, 5, (max, 2, (index, blVAR0, 1)))}
					}
				}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (index, envDEFINE5, 0)))}
					assign {
						case {(not_equal, (multiplication, -32, (index, blVAR0, 0), 14, 0), 14)} result { (min, 5, (max, 2, (negative, (index, blVAR0, 1))))}
						result {(min, 5, (max, 2, (max, (count, (greater_than_or_equal, (index, envDEFINE5, 0), (addition, (index, envDEFINE5, 1), (index, envDEFINE5, 1))), (equivalent, True, True), (equal, (index, envFROZENVAR3, 0), 'no')), (min, 8, -67))))}
					}
					index_of { (min, 1, (max, 0, (index, envDEFINE5, 0)))}
					assign {
						case {True} result { (min, 5, (max, 2, (min, (addition, (index, envDEFINE5, 1), 76, (index, envDEFINE5, 2)), (multiplication, 83, (multiplication, 29, -36, -84, -27)))))}
						result {(min, 5, (max, 2, (addition, -21, (index, envDEFINE5, 2), 67, -63)))}
					}
				}
			}
			return_statement {
				case { (equivalent, (implies, True, True), (or, False, (or, True, True)))} result { running}
				case { (equivalent, True, False)} result { failure}
				case { (xnor, True, (greater_than_or_equal, (min, 64, (index, blVAR0, 0)), (addition, (index, blVAR0, 0), -23)))} result { running}
				result {failure}
			}
			write_environment {
				a1_write_after_0
				variable_statement{ instant envVAR1
					per_index
					index_of { (min, 2, (max, 0, (addition, (index, blVAR0, 1), (index, envDEFINE5, 1))))}
					assign {
						case {False} result { (equal, 'both', 'both')}
						result {(equivalent, False, envDEFINE7)}
					}
					index_of { (min, 2, (max, 0, (multiplication, (abs, (index, envDEFINE5, 1)), (index, envDEFINE5, 1))))}
					assign {
						case {(equal, (less_than, 40, (index, envDEFINE5, 2)), False)} result { (xnor, (greater_than, (index, envDEFINE5, 1), (index, envDEFINE5, 0)), (xor, (xor, envDEFINE6, (index, envVAR1, 2)), True))}
						result {(less_than_or_equal, (multiplication, (index, envDEFINE5, 1), (index, envDEFINE5, 1), (index, blVAR0, 0), (index, envDEFINE5, 1)), (index, envDEFINE5, 0))}
					}
				}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0}
		initial_values {

		}
		update {
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (abs, 92)))}
				assign {
					case {(equal, 'both', 'yes')} result { (min, 5, (max, 2, (index, blVAR0, 1)))}
					result {(min, 5, (max, 2, (max, (index, blVAR0, 0), 30)))}
				}
				index_of { (min, 1, (max, 0, (index, blVAR0, 1)))}
				assign {
					case {True} result { (min, 5, (max, 2, (negative, (index, blVAR0, 1))))}
					result {(min, 5, (max, 2, -8))}
				}
			}
			read_environment {
				a2_read_before_0
				condition {(xor, True, True)}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, 54))}
					assign {
						case {(implies, True, True)} result { (min, 5, (max, 2, (min, (abs, 3), (index, blVAR0, 1))))}
						case {(equal, (abs, 34), (subtraction, (index, envDEFINE5, 2), -40))} result { (min, 5, (max, 2, (index, blVAR0, 1)))}
						result {(min, 5, (max, 2, (max, (abs, (index, envDEFINE5, 0)), (abs, (index, envDEFINE5, 0)))))}
					}
				}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (abs, (abs, (index, envDEFINE5, 0)))))}
					assign {
						case {(greater_than_or_equal, 15, -92)} result { (min, 5, (max, 2, (index, blVAR0, 1)))}
						case {(xnor, envDEFINE6, True)} result { (min, 5, (max, 2, (count, (xnor, (index, envVAR1, 1), (index, envVAR1, 0)), (xor, True, (xnor, False, True)), (less_than_or_equal, -55, (index, blVAR0, 1)), (less_than_or_equal, (multiplication, (index, envDEFINE5, 0), -19, (index, envDEFINE5, 1), -97), (subtraction, (index, envDEFINE5, 2), 2)))))}
						result {(min, 5, (max, 2, (abs, -65)))}
					}
				}
			}
			return_statement {
				result {success}
			}
			read_environment {
				a2_read_after_0
				condition {(or, False, True)}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (negative, (multiplication, (index, blVAR0, 1), (index, blVAR0, 0)))))}
					assign {
						result {(min, 5, (max, 2, (negative, (addition, (index, blVAR0, 1), 66))))}
					}
				}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localVAR2, localDEFINE4}
		read_variables { }
		write_variables {blVAR0}
		initial_values {
			variable_statement{ localDEFINE4
				per_index
				assign {
					case {(or, True, False)} result { 'yes'}
					case {True} result { 'yes'}
					result {'yes'}
				}
				assign {
					case {True} result { 'both'}
					case {True} result { 'yes'}
					result {'both'}
				}
				assign {
					case {True} result { 'yes'}
					case {False} result { 'both'}
					result {'no'}
				}
			}

		}
		update {
			return_statement {
				result {success}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0}
		initial_values {

		}
		update {
			return_statement {
				result {success}
			}
			write_environment {
				a4_write_after_2
				variable_statement{ envVAR1
					per_index
					index_of { (min, 2, (max, 0, (min, (index, envDEFINE5, 1), 39)))}
					assign {
						case {(less_than_or_equal, (multiplication, (addition, (index, envDEFINE5, 2), (index, envDEFINE5, 0), (index, blVAR0, 0), (index, envDEFINE5, 0)), (max, 10, (index, envDEFINE5, 2))), (index, blVAR0, 1))} result { (not_equal, (index, envFROZENVAR3, 0), 'both')}
						case {(less_than, -48, (index, blVAR0, 0))} result { (and, False, (equivalent, False, (index, envVAR1, 2)))}
						result {(less_than_or_equal, (subtraction, (index, envDEFINE5, 1), (index, blVAR0, 1)), (addition, (count, (xor, True, False), (equal, (index, envVAR1, 1), True)), (index, envDEFINE5, 1)))}
					}
					index_of { (min, 2, (max, 0, (min, (index, envDEFINE5, 2), 64)))}
					assign {
						case {(less_than, (index, envDEFINE5, 0), -27)} result { envDEFINE7}
						case {(index, envVAR1, 2)} result { envDEFINE7}
						result {(and, (greater_than_or_equal, (subtraction, (index, blVAR0, 0), 98), (index, blVAR0, 1)), (xor, envDEFINE6, False))}
					}
					index_of { (min, 2, (max, 0, (negative, (index, envDEFINE5, 2))))}
					assign {
						case {True} result { (index, envVAR1, 0)}
						case {(greater_than, (index, blVAR0, 1), (min, (index, blVAR0, 1), 12))} result { True}
						result {(less_than_or_equal, (abs, 93), 53)}
					}
				}
				variable_statement{ envVAR1
					per_index
					index_of { (min, 2, (max, 0, -64))}
					assign {
						case {True} result { (xnor, envDEFINE6, True)}
						result {True}
					}
					index_of { (min, 2, (max, 0, (subtraction, 100, (index, envDEFINE5, 2))))}
					assign {
						case {(equal, (or, (not_equal, (index, blVAR0, 1), -41), False), (greater_than, -59, (index, blVAR0, 0)))} result { (less_than, (multiplication, 21, (index, envDEFINE5, 2)), (negative, -4))}
						result {(not_equal, -49, (min, 20, -89))}
					}
				}
			}
			read_environment {
				a4_read_after_1
				condition {(equivalent, False, (xnor, (index, envVAR1, 0), envDEFINE6))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (index, blVAR0, 0)))}
					assign {
						case {(equivalent, (index, envVAR1, 1), (less_than, (index, blVAR0, 1), (index, envDEFINE5, 2)))} result { (min, 5, (max, 2, (max, -42, (index, envDEFINE5, 2))))}
						result {(min, 5, (max, 2, (subtraction, (multiplication, 36, (index, envDEFINE5, 0)), (addition, (multiplication, (index, envDEFINE5, 2), (index, envDEFINE5, 0)), (min, -6, (index, blVAR0, 0))))))}
					}
					index_of { (min, 1, (max, 0, (min, (index, envDEFINE5, 2), (index, envDEFINE5, 1))))}
					assign {
						case {(greater_than_or_equal, (min, (abs, 59), (index, envDEFINE5, 0)), (min, (max, (index, blVAR0, 1), 18), (count, (xnor, True, envDEFINE6), (xor, True, True), (not_equal, -79, -90), (xnor, True, envDEFINE7))))} result { (min, 5, (max, 2, -92))}
						result {(min, 5, (max, 2, (multiplication, -78, (index, envDEFINE5, 1), -87, 58)))}
					}
				}
			}
			write_environment {
				a4_write_after_0
				variable_statement{ envVAR1
					per_index
					index_of { (min, 2, (max, 0, (negative, -78)))}
					assign {
						case {envDEFINE7} result { (greater_than, (index, blVAR0, 0), 53)}
						case {(xnor, envDEFINE7, True)} result { (xor, envDEFINE7, envDEFINE7)}
						result {False}
					}
					index_of { (min, 2, (max, 0, (index, envDEFINE5, 2)))}
					assign {
						case {(less_than, (subtraction, (index, blVAR0, 1), -79), (negative, (index, envDEFINE5, 1)))} result { (equal, False, envDEFINE6)}
						case {(and, False, False)} result { (equal, (index, envFROZENVAR3, 1), 'no')}
						result {envDEFINE7}
					}
				}
			}
		}
	}
}
sub_trees{}
tree {
	decorator {
		dec_fs0
		X_is_Y X failure Y success
		child {
			a1{}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications