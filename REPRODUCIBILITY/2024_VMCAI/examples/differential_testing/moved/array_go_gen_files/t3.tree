configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	'MIN_VAL' := 2,
	'MAX_VAL' := 5
}
variables { 
	variable { bl blVAR0 array 3 VAR [-5, -2]
		range
		assign {
			case {(implies, (greater_than_or_equal, 72, -3), True)} result { (min, -2, (max, -5, (max, (max, -69, 5), 3)))}
			case {(not_equal, False, True)} result { (min, -2, (max, -5, (subtraction, 37, (subtraction, 2, -77))))}
			result {(min, -2, (max, -5, (negative, (subtraction, -2, -2))))}
		}
	}
	variable { env envVAR1 array 2 VAR {'yes', 'no', 'both'}
		per_index
		assign {
			case {(or, False, False)} result { 'no'}
			case {(greater_than, (abs, (index, blVAR0, 0)), (index, blVAR0, 2))} result { 'yes'}
			result {'yes'}
		}
		assign {
			result {'both'}
		}
	}
	variable { local localVAR2 array 2 VAR [-5, -2]
		range
		assign {
			case {False} result { (min, -2, (max, -5, (count, (less_than, (subtraction, -79, (index, blVAR0, 1)), (abs, (index, blVAR0, 0))), (xnor, (and, False, True), True), (not_equal, 'no', 'yes'))))}
			case {False} result { (min, -2, (max, -5, (abs, (index, blVAR0, 1))))}
			result {(min, -2, (max, -5, (subtraction, (index, blVAR0, 2), (negative, (index, blVAR0, 0)))))}
		}
	}
	variable { bl blVAR3 VAR BOOLEAN
		assign {
			case {True} result { (greater_than, (index, blVAR0, 0), 7)}
			result {(greater_than_or_equal, (count, (greater_than_or_equal, 97, (index, blVAR0, 0)), (xnor, False, True), (and, False, True)), (addition, 47, -40))}
		}
	}
	variable { local localVAR4 VAR BOOLEAN
		assign {
			case {(not_equal, 'yes', 'both')} result { (greater_than, (index, blVAR0, 0), -50)}
			case {(or, (greater_than_or_equal, -2, 12), (less_than, -80, 37))} result { (greater_than_or_equal, (multiplication, (max, (index, blVAR0, 1), (index, blVAR0, 1)), (multiplication, -9, (index, blVAR0, 0), 36), (negative, -4), (index, blVAR0, 1)), -28)}
			result {(greater_than, -51, (negative, (index, blVAR0, 1)))}
		}
	}
	variable { local localFROZENVAR5 array 2 FROZENVAR {'yes', 'no', 'both'}
		range
		assign {
			result {'both'}
		}
	}
	variable { local localFROZENVAR6 FROZENVAR BOOLEAN
		assign {
			case {(and, True, (less_than_or_equal, 12, 78))} result { True}
			result {blVAR3}
		}
	}
	variable { env envDEFINE7 DEFINE INT
		assign {
			case {(and, blVAR3, (less_than_or_equal, 93, (index, blVAR0, 1)))} result { (min, -2, (max, -5, -56))}
			case {(less_than_or_equal, (abs, -97), 10)} result { (min, -2, (max, -5, (abs, (count, (xor, (equivalent, blVAR3, False), (less_than, -84, (index, blVAR0, 0))), (and, blVAR3, (implies, blVAR3, blVAR3))))))}
			result {(min, -2, (max, -5, (index, blVAR0, 0)))}
		}
	}
	variable { local localDEFINE8 DEFINE BOOLEAN
		assign {
			result {(greater_than, 19, -35)}
		}
	}
	variable { env envDEFINE9 DEFINE BOOLEAN
		assign {
			result {(or, blVAR3, (equivalent, False, blVAR3))}
		}
	}
}
environment_update {
	variable_statement{ envVAR1
		per_index
		index_of { (min, 1, (max, 0, (index, blVAR0, 2)))}
		assign {
			result {'no'}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 1, (max, 0, (addition, (max, envDEFINE7, -22), envDEFINE7, (subtraction, (index, blVAR0, 2), 82))))}
		assign {
			case {(implies, envDEFINE9, True)} result { (index, envVAR1, 1)}
			result {(index, envVAR1, 0)}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 1, (max, 0, (index, blVAR0, 0)))}
		assign {
			case {(greater_than_or_equal, -13, envDEFINE7)} result { 'no'}
			result {'no'}
		}
		index_of { (min, 1, (max, 0, (max, (count, (not_equal, (index, envVAR1, 0), (index, envVAR1, 0)), (less_than, (index, blVAR0, 0), (index, blVAR0, 2)), (greater_than_or_equal, envDEFINE7, (index, blVAR0, 1)), (and, blVAR3, False)), (abs, envDEFINE7))))}
		assign {
			case {(greater_than, (abs, (index, blVAR0, 2)), 80)} result { 'no'}
			result {'both'}
		}
	}
	variable_statement{ envVAR1
		per_index
		index_of { (min, 1, (max, 0, 70))}
		assign {
			case {False} result { (index, envVAR1, 0)}
			result {'yes'}
		}
		index_of { (min, 1, (max, 0, -90))}
		assign {
			case {(less_than, (index, blVAR0, 0), -88)} result { 'no'}
			result {'no'}
		}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blVAR3}
		condition{(less_than, 43, (min, (index, blVAR0, 0), -72))}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blVAR3}
		condition{(not_equal, (index, blVAR0, 2), 29)}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {localFROZENVAR6, localDEFINE8}
		read_variables { }
		write_variables {blVAR0, blVAR3}
		initial_values {

		}
		update {
			write_environment {
				a1_write_before_1
				variable_statement{ envVAR1
					per_index
					index_of { (min, 1, (max, 0, (max, -58, 68)))}
					assign {
						case {localFROZENVAR6} result { (index, envVAR1, 1)}
						result {'yes'}
					}
				}
			}
			variable_statement{ blVAR3
			assign {
				case {False} result { (greater_than_or_equal, (addition, 66, -65), (index, blVAR0, 2))}
				result {(not_equal, (multiplication, 17, (index, blVAR0, 1)), (index, blVAR0, 2))}
			}
			}
			return_statement {
				case { False} result { failure}
				result {running}
			}
			variable_statement{ blVAR0
				per_index
				index_of { (min, 2, (max, 0, (index, blVAR0, 2)))}
				assign {
					case {(xnor, (and, blVAR3, True), True)} result { (min, -2, (max, -5, (addition, (addition, 65, -90, (max, (index, blVAR0, 2), 10)), (addition, (max, (index, blVAR0, 2), -71), (negative, (index, blVAR0, 2))))))}
					case {False} result { (min, -2, (max, -5, (abs, (index, blVAR0, 1))))}
					result {(min, -2, (max, -5, (multiplication, (index, blVAR0, 2), 8)))}
				}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localVAR4, localFROZENVAR5, localFROZENVAR6}
		read_variables { }
		write_variables {blVAR0, blVAR3}
		initial_values {
			variable_statement{ localVAR4
			assign {
				case {False} result { (not_equal, (less_than_or_equal, (index, blVAR0, 1), 21), False)}
				result {False}
			}
			}
			variable_statement{ localFROZENVAR6
			assign {
				case {(and, True, False)} result { blVAR3}
				result {blVAR3}
			}
			}

		}
		update {
			return_statement {
				case { (less_than, -16, (index, blVAR0, 1))} result { running}
				case { (equal, (count, (xor, True, (less_than, 69, 69)), (greater_than_or_equal, (index, blVAR0, 0), (max, 19, 88))), (multiplication, (abs, -68), (max, -56, 63), (subtraction, -30, (index, blVAR0, 0))))} result { running}
				case { (greater_than, 65, (count, (xor, localFROZENVAR6, False), (equal, 'yes', (index, localFROZENVAR5, 1)), (greater_than, 24, -17)))} result { running}
				result {failure}
			}
			variable_statement{ localVAR4
			assign {
				case {False} result { (less_than, -70, (multiplication, -7, 64, (index, blVAR0, 0), (index, blVAR0, 2)))}
				result {(less_than, (min, (index, blVAR0, 0), (index, blVAR0, 1)), (addition, -97, (index, blVAR0, 1), 37, 3))}
			}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localVAR4, localFROZENVAR5, localFROZENVAR6}
		read_variables { }
		write_variables {blVAR0, blVAR3}
		initial_values {
			variable_statement{ localVAR4
			assign {
				case {(or, (greater_than, -54, (index, blVAR0, 0)), (implies, False, False))} result { blVAR3}
				result {(greater_than, (index, blVAR0, 1), (index, blVAR0, 2))}
			}
			}
			variable_statement{ localFROZENVAR6
			assign {
				case {(less_than, (index, blVAR0, 2), (index, blVAR0, 1))} result { (not_equal, 'yes', 'no')}
				case {(greater_than_or_equal, -18, (index, blVAR0, 0))} result { False}
				result {(and, (less_than, (index, blVAR0, 0), 3), (equal, blVAR3, blVAR3))}
			}
			}

		}
		update {
			variable_statement{ blVAR3
			assign {
				result {(less_than, (max, (max, (index, blVAR0, 0), -18), (subtraction, -100, 71)), -10)}
			}
			}
			variable_statement{ localVAR4
			assign {
				result {(xor, (greater_than, (max, (index, blVAR0, 0), -98), (multiplication, 74, (index, blVAR0, 1))), blVAR3)}
			}
			}
			return_statement {
				result {failure}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {localVAR4}
		read_variables { }
		write_variables {blVAR0, blVAR3}
		initial_values {

		}
		update {
			write_environment {
				a4_write_before_2
				variable_statement{ instant envVAR1
					per_index
					index_of { (min, 1, (max, 0, (min, (subtraction, -27, envDEFINE7), (abs, 73))))}
					assign {
						case {(less_than, envDEFINE7, (index, blVAR0, 1))} result { 'yes'}
						result {'yes'}
					}
					index_of { (min, 1, (max, 0, (abs, (max, 78, 96))))}
					assign {
						case {(not_equal, localVAR4, localVAR4)} result { 'no'}
						result {'yes'}
					}
				}
			}
			write_environment {
				a4_write_before_1
				variable_statement{ envVAR1
					per_index
					index_of { (min, 1, (max, 0, (subtraction, envDEFINE7, 5)))}
					assign {
						case {(or, envDEFINE9, True)} result { 'both'}
						case {(equal, 11, -15)} result { (index, envVAR1, 0)}
						result {'no'}
					}
					index_of { (min, 1, (max, 0, 93))}
					assign {
						case {(xor, blVAR3, True)} result { 'no'}
						case {(greater_than, -89, (index, blVAR0, 1))} result { 'yes'}
						result {(index, envVAR1, 0)}
					}
				}
			}
			write_environment {
				a4_write_before_0
				variable_statement{ instant envVAR1
					per_index
					index_of { (min, 1, (max, 0, (subtraction, (addition, -44, 48), (max, envDEFINE7, (index, blVAR0, 0)))))}
					assign {
						result {(index, envVAR1, 1)}
					}
					index_of { (min, 1, (max, 0, (min, envDEFINE7, (negative, 61))))}
					assign {
						result {'no'}
					}
				}
			}
			return_statement {
				case { (less_than, (index, blVAR0, 1), (index, blVAR0, 2))} result { running}
				case { localVAR4} result { running}
				case { (or, blVAR3, False)} result { running}
				result {success}
			}
			read_environment {
				a4_read_after_0
				condition {(equal, (index, envVAR1, 0), (index, envVAR1, 0))}
				variable_statement{ blVAR3
				assign {
					case {(xor, False, True)} result { (equal, localVAR4, True)}
					result {(and, localVAR4, False)}
				}
				}
			}
		}
	}
}
sub_trees{}
tree {
	a3{}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications