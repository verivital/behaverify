MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__robot_control := -3;
		next_child__confirm_mission := 
			case
				(previous_node < node_names.have_mission) : node_names.have_mission;
				(previous_node < node_names.get_mission) : node_names.get_mission;
				TRUE : -1;
			esac;
		next_child__move_robot := 
			case
				(previous_node < node_names.try_right) : node_names.try_right;
				(previous_node < node_names.try_left) : node_names.try_left;
				(previous_node < node_names.try_up) : node_names.try_up;
				(previous_node < node_names.try_down) : node_names.try_down;
				TRUE : -1;
			esac;
		next_child__reset_completed_mission := 
			case
				(previous_node < node_names.target_reached) : node_names.target_reached;
				(previous_node < node_names.clear_mission) : node_names.clear_mission;
				TRUE : -1;
			esac;
		next_child__reset_completed_mission_FiS := node_names.reset_completed_mission;
		next_child__robot_control := 
			case
				(previous_node < node_names.get_position) : node_names.get_position;
				(previous_node < node_names.reset_completed_mission_FiS) : node_names.reset_completed_mission_FiS;
				(previous_node < node_names.confirm_mission) : node_names.confirm_mission;
				(previous_node < node_names.move_robot) : node_names.move_robot;
				TRUE : -1;
			esac;
		next_child__try_down := 
			case
				(previous_node < node_names.y_too_big) : node_names.y_too_big;
				(previous_node < node_names.go_down) : node_names.go_down;
				TRUE : -1;
			esac;
		next_child__try_left := 
			case
				(previous_node < node_names.x_too_big) : node_names.x_too_big;
				(previous_node < node_names.go_left) : node_names.go_left;
				TRUE : -1;
			esac;
		next_child__try_right := 
			case
				(previous_node < node_names.x_too_small) : node_names.x_too_small;
				(previous_node < node_names.go_right) : node_names.go_right;
				TRUE : -1;
			esac;
		next_child__try_up := 
			case
				(previous_node < node_names.y_too_small) : node_names.y_too_small;
				(previous_node < node_names.go_up) : node_names.go_up;
				TRUE : -1;
			esac;
		--START OF BLACKBOARD DEFINITIONS
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		active_node : -1..22;
		previous_node : -1..22;
		current_status : {success, running, failure, invalid};
		previous_status : {success, running, failure, invalid};
		--START OF BLACKBOARD VARIABLES DECLARATION
		env_remaining_goals : 0..3;
		env_x_goal : 0..2;
		env_x_true : 0..2;
		env_y_goal : 0..2;
		env_y_true : 0..2;
		var_mission : boolean;
		var_target_x : 0..2;
		var_target_y : 0..2;
		var_x : 0..2;
		var_y : 0..2;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		init(active_node) := 0;
		init(previous_node) := -1;
		init(previous_status) := invalid;
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(var_mission) := 
			case
				TRUE : FALSE;
			esac;
		init(var_target_x) := 
			case
				TRUE : 0;
			esac;
		init(var_target_y) := 
			case
				TRUE : 0;
			esac;
		init(var_x) := 
			case
				TRUE : 0;
			esac;
		init(var_y) := 
			case
				TRUE : 0;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		next(active_node) :=
			case
				active_node = -1 & (env_remaining_goals > 0) : node_names.robot_control;
				active_node = -1 & !((env_remaining_goals > 0)) : -1;
				(active_node = node_names.clear_mission) & (current_status != invalid) : node_names.reset_completed_mission;
				(active_node = node_names.confirm_mission) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.confirm_mission) & (current_status = invalid) : next_child__confirm_mission;
				(active_node = node_names.get_mission) & (current_status != invalid) : node_names.confirm_mission;
				(active_node = node_names.get_position) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.go_down) & (current_status != invalid) : node_names.try_down;
				(active_node = node_names.go_left) & (current_status != invalid) : node_names.try_left;
				(active_node = node_names.go_right) & (current_status != invalid) : node_names.try_right;
				(active_node = node_names.go_up) & (current_status != invalid) : node_names.try_up;
				(active_node = node_names.have_mission) & (current_status != invalid) : node_names.confirm_mission;
				(active_node = node_names.move_robot) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.move_robot) & (current_status = invalid) : next_child__move_robot;
				(active_node = node_names.reset_completed_mission) & (current_status != invalid) : node_names.reset_completed_mission_FiS;
				(active_node = node_names.reset_completed_mission) & (current_status = invalid) : next_child__reset_completed_mission;
				(active_node = node_names.reset_completed_mission_FiS) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.reset_completed_mission_FiS) & (current_status = invalid) : next_child__reset_completed_mission_FiS;
				(active_node = node_names.robot_control) & (current_status != invalid) : -1;
				(active_node = node_names.robot_control) & (current_status = invalid) : next_child__robot_control;
				(active_node = node_names.target_reached) & (current_status != invalid) : node_names.reset_completed_mission;
				(active_node = node_names.try_down) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_down) & (current_status = invalid) : next_child__try_down;
				(active_node = node_names.try_left) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_left) & (current_status = invalid) : next_child__try_left;
				(active_node = node_names.try_right) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_right) & (current_status = invalid) : next_child__try_right;
				(active_node = node_names.try_up) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_up) & (current_status = invalid) : next_child__try_up;
				(active_node = node_names.x_too_big) & (current_status != invalid) : node_names.try_left;
				(active_node = node_names.x_too_small) & (current_status != invalid) : node_names.try_right;
				(active_node = node_names.y_too_big) & (current_status != invalid) : node_names.try_down;
				(active_node = node_names.y_too_small) & (current_status != invalid) : node_names.try_up;
				TRUE : active_node;
			esac;
		next(previous_node) := active_node;
		current_status :=
			case
				(active_node = node_names.clear_mission) : success;
				(active_node = node_names.confirm_mission) & (previous_status = running) : running;
				(active_node = node_names.confirm_mission) & (previous_status = success) : success;
				(active_node = node_names.confirm_mission) & (next_child__confirm_mission = -1) : failure;
				(active_node = node_names.confirm_mission) : invalid;
				(active_node = node_names.get_mission) : success;
				(active_node = node_names.get_position) : success;
				(active_node = node_names.go_down) : success;
				(active_node = node_names.go_left) : success;
				(active_node = node_names.go_right) : success;
				(active_node = node_names.go_up) : success;
				(active_node = node_names.have_mission) & var_mission : success;
				(active_node = node_names.have_mission) & TRUE : failure;
				(active_node = node_names.move_robot) & (previous_status = running) : running;
				(active_node = node_names.move_robot) & (previous_status = success) : success;
				(active_node = node_names.move_robot) & (next_child__move_robot = -1) : failure;
				(active_node = node_names.move_robot) : invalid;
				(active_node = node_names.reset_completed_mission) & (previous_status = running) : running;
				(active_node = node_names.reset_completed_mission) & (previous_status = failure) : failure;
				(active_node = node_names.reset_completed_mission) & (next_child__reset_completed_mission = -1) : success;
				(active_node = node_names.reset_completed_mission) : invalid;
				(active_node = node_names.reset_completed_mission_FiS) & (previous_status = failure) : success;
				(active_node = node_names.reset_completed_mission_FiS) : previous_status;
				(active_node = node_names.robot_control) & (previous_status = running) : running;
				(active_node = node_names.robot_control) & (previous_status = failure) : failure;
				(active_node = node_names.robot_control) & (next_child__robot_control = -1) : success;
				(active_node = node_names.robot_control) : invalid;
				(active_node = node_names.target_reached) & ((var_x = var_target_x) & (var_y = var_target_y)) : success;
				(active_node = node_names.target_reached) & TRUE : failure;
				(active_node = node_names.try_down) & (previous_status = running) : running;
				(active_node = node_names.try_down) & (previous_status = failure) : failure;
				(active_node = node_names.try_down) & (next_child__try_down = -1) : success;
				(active_node = node_names.try_down) : invalid;
				(active_node = node_names.try_left) & (previous_status = running) : running;
				(active_node = node_names.try_left) & (previous_status = failure) : failure;
				(active_node = node_names.try_left) & (next_child__try_left = -1) : success;
				(active_node = node_names.try_left) : invalid;
				(active_node = node_names.try_right) & (previous_status = running) : running;
				(active_node = node_names.try_right) & (previous_status = failure) : failure;
				(active_node = node_names.try_right) & (next_child__try_right = -1) : success;
				(active_node = node_names.try_right) : invalid;
				(active_node = node_names.try_up) & (previous_status = running) : running;
				(active_node = node_names.try_up) & (previous_status = failure) : failure;
				(active_node = node_names.try_up) & (next_child__try_up = -1) : success;
				(active_node = node_names.try_up) : invalid;
				(active_node = node_names.x_too_big) & (var_x > var_target_x) : success;
				(active_node = node_names.x_too_big) & TRUE : failure;
				(active_node = node_names.x_too_small) & (var_x < var_target_x) : success;
				(active_node = node_names.x_too_small) & TRUE : failure;
				(active_node = node_names.y_too_big) & (var_y > var_target_y) : success;
				(active_node = node_names.y_too_big) & TRUE : failure;
				(active_node = node_names.y_too_small) & (var_y < var_target_y) : success;
				(active_node = node_names.y_too_small) & TRUE : failure;
				TRUE : invalid;
			esac;
		next(previous_status) := current_status;
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(env_remaining_goals) :=
			case
				(active_node = -1) & (env_remaining_goals > 0) & (((env_x_goal = env_x_true) & (env_y_goal = env_y_true))) : max(0, (env_remaining_goals - 1));
				(active_node = -1) & (env_remaining_goals > 0) & (TRUE) : env_remaining_goals;
				TRUE : env_remaining_goals;
			esac;
		next(env_x_goal) :=
			case
				(active_node = -1) & (env_remaining_goals > 0) & ((0 = env_remaining_goals)) : env_x_goal;
				(active_node = -1) & (env_remaining_goals > 0) & (((env_x_goal = env_x_true) & (env_y_goal = env_y_true))) : {0, 1, 2};
				(active_node = -1) & (env_remaining_goals > 0) & (TRUE) : env_x_goal;
				TRUE : env_x_goal;
			esac;
		next(env_x_true) :=
			case
				(active_node = node_names.go_right) & !(current_status = invalid) & (TRUE) : min(2, (env_x_true + 1));
				(active_node = node_names.go_left) & !(current_status = invalid) & (TRUE) : max(0, (env_x_true - 1));
				TRUE : env_x_true;
			esac;
		next(env_y_goal) :=
			case
				(active_node = -1) & (env_remaining_goals > 0) & ((0 = env_remaining_goals)) : env_y_goal;
				(active_node = -1) & (env_remaining_goals > 0) & (((env_x_goal = env_x_true) & (env_y_goal = env_y_true))) : {0, 1, 2};
				(active_node = -1) & (env_remaining_goals > 0) & (TRUE) : env_y_goal;
				TRUE : env_y_goal;
			esac;
		next(env_y_true) :=
			case
				(active_node = node_names.go_up) & !(current_status = invalid) & (TRUE) : min(2, (env_y_true + 1));
				(active_node = node_names.go_down) & !(current_status = invalid) & (TRUE) : max(0, (env_y_true - 1));
				TRUE : env_y_true;
			esac;
		next(var_mission) :=
			case
				(active_node = node_names.clear_mission) & !(current_status = invalid) & (TRUE) : FALSE;
				(active_node = node_names.get_mission) & !(current_status = invalid) & (TRUE) : TRUE;
				TRUE : var_mission;
			esac;
		next(var_target_x) :=
			case
				(active_node = node_names.get_mission) & !(current_status = invalid) & (!(TRUE)) : var_target_x;
				(active_node = node_names.get_mission) & !(current_status = invalid) & (TRUE) : env_x_goal;
				TRUE : var_target_x;
			esac;
		next(var_target_y) :=
			case
				(active_node = node_names.get_mission) & !(current_status = invalid) & (!(TRUE)) : var_target_y;
				(active_node = node_names.get_mission) & !(current_status = invalid) & (TRUE) : env_y_goal;
				TRUE : var_target_y;
			esac;
		next(var_x) :=
			case
				(active_node = node_names.get_position) & !(current_status = invalid) & (!(TRUE)) : var_x;
				(active_node = node_names.get_position) & !(current_status = invalid) & (TRUE) : env_x_true;
				TRUE : var_x;
			esac;
		next(var_y) :=
			case
				(active_node = node_names.get_position) & !(current_status = invalid) & (!(TRUE)) : var_y;
				(active_node = node_names.get_position) & !(current_status = invalid) & (TRUE) : env_y_true;
				TRUE : var_y;
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

LTLSPEC F((env_remaining_goals = 0));
CTLSPEC AF((env_remaining_goals = 0));
MODULE define_nodes
	DEFINE
		robot_control := 0;
		get_position := 1;
		reset_completed_mission_FiS := 2;
		reset_completed_mission := 3;
		target_reached := 4;
		clear_mission := 5;
		confirm_mission := 6;
		have_mission := 7;
		get_mission := 8;
		move_robot := 9;
		try_right := 10;
		x_too_small := 11;
		go_right := 12;
		try_left := 13;
		x_too_big := 14;
		go_left := 15;
		try_up := 16;
		y_too_small := 17;
		go_up := 18;
		try_down := 19;
		y_too_big := 20;
		go_down := 21;
