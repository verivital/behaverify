

variables {
	variable { env x_goal VAR [0, 'x_max'] assign {result {range, 0, 'x_max', True} } }
	variable { env y_goal VAR [0, 'y_max'] assign {result {range, 0, 'y_max', True} } }
	variable { env x_true VAR [0, 'x_max'] assign {result {range, 0, 'x_max', True} } }
	variable { env y_true VAR [0, 'y_max'] assign {result {range, 0, 'y_max', True} } }
	variable { env remaining_goals VAR [0, 3] assign {result {range, 0, 3, True} } }
}

environment_update {
		variable_statement {
			remaining_goals
			assign{
			case { (and, (equal, x_goal, x_true), (equal, y_goal, y_true)) } end_case
			result { (max, 0, (subtraction, remaining_goals, 1)) } 
			result { remaining_goals } 
			}
		}
		variable_statement {
			x_goal
			assign{
			case { (equal, 0, remaining_goals ) } end_case
			result { x_goal } 
			case { (and, (equal, x_goal, x_true), (equal, y_goal, y_true)) } end_case
			result {range, 0, 'x_max', True} 
			result { x_goal } 
			}
		}
		variable_statement {
			y_goal
			assign {
			case { (equal, 0, remaining_goals) } end_case
			result { y_goal } 
			case { (and, (equal, x_goal, x_true), (equal, y_goal, y_true)) } end_case
			result {range, 0, 'y_max', True} 
			result { y_goal } 
			}
		}
}

checks {
} end_checks

environment_checks {
	check_environment {
		x_too_small
		read_variables {} end_read_variables
		condition { (less_than, x_true, x_goal) } end_condition
	}
	check_environment {
		x_too_big
		read_variables {} end_read_variables
		condition { (greater_than, x_true, x_goal) } end_condition
	}
	check_environment {
		y_too_small
		read_variables {} end_read_variables
		condition { (less_than, y_true, y_goal) } end_condition
	}
	check_environment {
		y_too_big
		read_variables {} end_read_variables
		condition { (greater_than, y_true, y_goal) } end_condition
	}
} end_environment_checks

actions {

	action {
		go_right
		local_variables {} end_local_variables
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
			right_func
					variable_statement {
						x_true assign {result { (min, 'x_max', (addition, x_true, 1)) } }
					}
			} end_write_environment
			return_statement { result { success }  } end_return_statement
		} end_update
	} end_action

	action {
		go_left
		local_variables {} end_local_variables
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
			left_func
					variable_statement {
						x_true assign{result { (max, 0, (subtraction, x_true, 1)) } }
					} 
			} end_write_environment
			return_statement { result { success }  } end_return_statement
		} end_update
	} end_action

	action {
		go_up
		local_variables {} end_local_variables
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
			up_func
					variable_statement {
						y_true assign{result { (min, 'y_max', (addition, y_true, 1)) } }
					} 
			} end_write_environment
			return_statement { result { success }  } end_return_statement
		} end_update
	} end_action

	action {
		go_down
		local_variables {} end_local_variables
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
			down_func
					variable_statement {
						y_true assign{result { (max, 0, (subtraction, y_true, 1)) } }
					} end_variable_statement
			} end_write_environment
			return_statement { result { success }  } end_return_statement
		} end_update
	} end_action
} end_actions

sub_trees {
}end_sub_trees
tree{
		composite {
			move_robot
			selector
			children {
				composite {
					try_right
					sequence
					children {
						x_too_small
						go_right
					} end_children
				} end_composite
				composite {
					try_left
					sequence
					children {
						x_too_big
						go_left
					} end_children
				} end_composite
				composite {
					try_up
					sequence
					children {
						y_too_small
						go_up
					} end_children
				} end_composite
				composite {
					try_down
					sequence
					children {
						y_too_big
						go_down
					} end_children
				} end_composite
			} end_children
		} end_composite
} end_tree

tick_prerequisite { (greater_than, remaining_goals, 0) } end_tick_prerequisite
specifications {
	LTLSPEC { (finally, (equal, remaining_goals -1, 0)) } end_LTLSPEC
	CTLSPEC { (always_finally, (equal, remaining_goals -1, 0)) } end_CTLSPEC
} end_specifications