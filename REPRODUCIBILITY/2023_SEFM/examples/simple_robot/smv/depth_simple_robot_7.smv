MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__robot_control := -3;
		child_index_to_resume_from__reset_completed_mission := -2;
		child_index_to_resume_from__confirm_mission := -2;
		child_index_to_resume_from__try_right := -2;
		child_index_to_resume_from__try_left := -2;
		child_index_to_resume_from__try_up := -2;
		child_index_to_resume_from__try_down := -2;
		child_index_to_resume_from__move_robot := -2;
		child_index_to_resume_from__robot_control := -2;
		next_child__reset_completed_mission := 
			case
				(previous_node < node_names.target_reached)& (child_index_to_resume_from__reset_completed_mission <= 0) : node_names.target_reached;
				(previous_node < node_names.clear_mission)& (child_index_to_resume_from__reset_completed_mission <= 1) : node_names.clear_mission;
				TRUE : -1;
			esac;
		next_child__reset_completed_mission_FiS := node_names.reset_completed_mission;
		next_child__confirm_mission := 
			case
				(previous_node < node_names.have_mission)& (child_index_to_resume_from__confirm_mission <= 0) : node_names.have_mission;
				(previous_node < node_names.get_mission)& (child_index_to_resume_from__confirm_mission <= 1) : node_names.get_mission;
				TRUE : -1;
			esac;
		next_child__try_right := 
			case
				(previous_node < node_names.x_too_small)& (child_index_to_resume_from__try_right <= 0) : node_names.x_too_small;
				(previous_node < node_names.go_right)& (child_index_to_resume_from__try_right <= 1) : node_names.go_right;
				TRUE : -1;
			esac;
		next_child__try_left := 
			case
				(previous_node < node_names.x_too_big)& (child_index_to_resume_from__try_left <= 0) : node_names.x_too_big;
				(previous_node < node_names.go_left)& (child_index_to_resume_from__try_left <= 1) : node_names.go_left;
				TRUE : -1;
			esac;
		next_child__try_up := 
			case
				(previous_node < node_names.y_too_small)& (child_index_to_resume_from__try_up <= 0) : node_names.y_too_small;
				(previous_node < node_names.go_up)& (child_index_to_resume_from__try_up <= 1) : node_names.go_up;
				TRUE : -1;
			esac;
		next_child__try_down := 
			case
				(previous_node < node_names.y_too_big)& (child_index_to_resume_from__try_down <= 0) : node_names.y_too_big;
				(previous_node < node_names.go_down)& (child_index_to_resume_from__try_down <= 1) : node_names.go_down;
				TRUE : -1;
			esac;
		next_child__move_robot := 
			case
				(previous_node < node_names.try_right)& (child_index_to_resume_from__move_robot <= 0) : node_names.try_right;
				(previous_node < node_names.try_left)& (child_index_to_resume_from__move_robot <= 1) : node_names.try_left;
				(previous_node < node_names.try_up)& (child_index_to_resume_from__move_robot <= 2) : node_names.try_up;
				(previous_node < node_names.try_down)& (child_index_to_resume_from__move_robot <= 3) : node_names.try_down;
				TRUE : -1;
			esac;
		next_child__robot_control := 
			case
				(previous_node < node_names.get_position)& (child_index_to_resume_from__robot_control <= 0) : node_names.get_position;
				(previous_node < node_names.reset_completed_mission_FiS)& (child_index_to_resume_from__robot_control <= 1) : node_names.reset_completed_mission_FiS;
				(previous_node < node_names.confirm_mission)& (child_index_to_resume_from__robot_control <= 2) : node_names.confirm_mission;
				(previous_node < node_names.move_robot)& (child_index_to_resume_from__robot_control <= 3) : node_names.move_robot;
				TRUE : -1;
			esac;
		--START OF BLACKBOARD DEFINITIONS
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		active_node : -1..22;
		previous_node : -1..22;
		current_status : {success, running, failure, invalid};
		previous_status : {success, running, failure, invalid};
		--START OF BLACKBOARD VARIABLES DECLARATION
		x : 0..6;
		y : 0..6;
		target_x : 0..6;
		target_y : 0..6;
		mission : boolean;
		x_goal : 0..6;
		y_goal : 0..6;
		x_true : 0..6;
		y_true : 0..6;
		remaining_goals : 0..3;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(previous_status) := invalid;
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(x) := 
			case
				TRUE : 0;
			esac;
		init(y) := 
			case
				TRUE : 0;
			esac;
		init(target_x) := 
			case
				TRUE : 0;
			esac;
		init(target_y) := 
			case
				TRUE : 0;
			esac;
		init(mission) := 
			case
				TRUE : FALSE;
			esac;
		init(x_goal) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6};
			esac;
		init(y_goal) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6};
			esac;
		init(x_true) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6};
			esac;
		init(y_true) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6};
			esac;
		init(remaining_goals) := 
			case
				TRUE : {0, 1, 2, 3};
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		next(active_node) :=
			case
				active_node = -1 & (remaining_goals > 0) : node_names.robot_control;
				active_node = -1 & !((remaining_goals > 0)) : -1;
				(active_node = node_names.get_position) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.target_reached) & (current_status != invalid) : node_names.reset_completed_mission;
				(active_node = node_names.clear_mission) & (current_status != invalid) : node_names.reset_completed_mission;
				(active_node = node_names.reset_completed_mission) & (current_status != invalid) : node_names.reset_completed_mission_FiS;
				(active_node = node_names.reset_completed_mission) & (current_status = invalid) : next_child__reset_completed_mission;
				(active_node = node_names.reset_completed_mission_FiS) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.reset_completed_mission_FiS) & (current_status = invalid) : next_child__reset_completed_mission_FiS;
				(active_node = node_names.have_mission) & (current_status != invalid) : node_names.confirm_mission;
				(active_node = node_names.get_mission) & (current_status != invalid) : node_names.confirm_mission;
				(active_node = node_names.confirm_mission) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.confirm_mission) & (current_status = invalid) : next_child__confirm_mission;
				(active_node = node_names.x_too_small) & (current_status != invalid) : node_names.try_right;
				(active_node = node_names.go_right) & (current_status != invalid) : node_names.try_right;
				(active_node = node_names.try_right) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_right) & (current_status = invalid) : next_child__try_right;
				(active_node = node_names.x_too_big) & (current_status != invalid) : node_names.try_left;
				(active_node = node_names.go_left) & (current_status != invalid) : node_names.try_left;
				(active_node = node_names.try_left) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_left) & (current_status = invalid) : next_child__try_left;
				(active_node = node_names.y_too_small) & (current_status != invalid) : node_names.try_up;
				(active_node = node_names.go_up) & (current_status != invalid) : node_names.try_up;
				(active_node = node_names.try_up) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_up) & (current_status = invalid) : next_child__try_up;
				(active_node = node_names.y_too_big) & (current_status != invalid) : node_names.try_down;
				(active_node = node_names.go_down) & (current_status != invalid) : node_names.try_down;
				(active_node = node_names.try_down) & (current_status != invalid) : node_names.move_robot;
				(active_node = node_names.try_down) & (current_status = invalid) : next_child__try_down;
				(active_node = node_names.move_robot) & (current_status != invalid) : node_names.robot_control;
				(active_node = node_names.move_robot) & (current_status = invalid) : next_child__move_robot;
				(active_node = node_names.robot_control) & (current_status != invalid) : -1;
				(active_node = node_names.robot_control) & (current_status = invalid) : next_child__robot_control;
				TRUE : active_node;
			esac;
		next(previous_node) := active_node;
		current_status :=
			case
				(active_node = node_names.get_position) : success;
				(active_node = node_names.target_reached) & ((x = target_x) & (y = target_y)) : success;
				(active_node = node_names.target_reached) & TRUE : failure;
				(active_node = node_names.clear_mission) : success;
				(active_node = node_names.reset_completed_mission) & (previous_status = running) : running;
				(active_node = node_names.reset_completed_mission) & (previous_status = failure) : failure;
				(active_node = node_names.reset_completed_mission) & (next_child__reset_completed_mission = -1) : success;
				(active_node = node_names.reset_completed_mission) : invalid;
				(active_node = node_names.reset_completed_mission_FiS) & (previous_status = failure) : success;
				(active_node = node_names.reset_completed_mission_FiS) : previous_status;
				(active_node = node_names.have_mission) & mission : success;
				(active_node = node_names.have_mission) & TRUE : failure;
				(active_node = node_names.get_mission) : success;
				(active_node = node_names.confirm_mission) & (previous_status = running) : running;
				(active_node = node_names.confirm_mission) & (previous_status = success) : success;
				(active_node = node_names.confirm_mission) & (next_child__confirm_mission = -1) : failure;
				(active_node = node_names.confirm_mission) : invalid;
				(active_node = node_names.x_too_small) & (x < target_x) : success;
				(active_node = node_names.x_too_small) & TRUE : failure;
				(active_node = node_names.go_right) : success;
				(active_node = node_names.try_right) & (previous_status = running) : running;
				(active_node = node_names.try_right) & (previous_status = failure) : failure;
				(active_node = node_names.try_right) & (next_child__try_right = -1) : success;
				(active_node = node_names.try_right) : invalid;
				(active_node = node_names.x_too_big) & (x > target_x) : success;
				(active_node = node_names.x_too_big) & TRUE : failure;
				(active_node = node_names.go_left) : success;
				(active_node = node_names.try_left) & (previous_status = running) : running;
				(active_node = node_names.try_left) & (previous_status = failure) : failure;
				(active_node = node_names.try_left) & (next_child__try_left = -1) : success;
				(active_node = node_names.try_left) : invalid;
				(active_node = node_names.y_too_small) & (y < target_y) : success;
				(active_node = node_names.y_too_small) & TRUE : failure;
				(active_node = node_names.go_up) : success;
				(active_node = node_names.try_up) & (previous_status = running) : running;
				(active_node = node_names.try_up) & (previous_status = failure) : failure;
				(active_node = node_names.try_up) & (next_child__try_up = -1) : success;
				(active_node = node_names.try_up) : invalid;
				(active_node = node_names.y_too_big) & (y > target_y) : success;
				(active_node = node_names.y_too_big) & TRUE : failure;
				(active_node = node_names.go_down) : success;
				(active_node = node_names.try_down) & (previous_status = running) : running;
				(active_node = node_names.try_down) & (previous_status = failure) : failure;
				(active_node = node_names.try_down) & (next_child__try_down = -1) : success;
				(active_node = node_names.try_down) : invalid;
				(active_node = node_names.move_robot) & (previous_status = running) : running;
				(active_node = node_names.move_robot) & (previous_status = success) : success;
				(active_node = node_names.move_robot) & (next_child__move_robot = -1) : failure;
				(active_node = node_names.move_robot) : invalid;
				(active_node = node_names.robot_control) & (previous_status = running) : running;
				(active_node = node_names.robot_control) & (previous_status = failure) : failure;
				(active_node = node_names.robot_control) & (next_child__robot_control = -1) : success;
				(active_node = node_names.robot_control) : invalid;
				TRUE : invalid;
			esac;
		next(previous_status) := current_status;
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(x) :=
			case
				(active_node = node_names.get_position) & !(current_status = invalid) & (!(TRUE)) : x;
				(active_node = node_names.get_position) & !(current_status = invalid) & (TRUE) : x_true;
				TRUE : x;
			esac;
		next(y) :=
			case
				(active_node = node_names.get_position) & !(current_status = invalid) & (!(TRUE)) : y;
				(active_node = node_names.get_position) & !(current_status = invalid) & (TRUE) : y_true;
				TRUE : y;
			esac;
		next(target_x) :=
			case
				(active_node = node_names.get_mission) & !(current_status = invalid) & (!(TRUE)) : target_x;
				(active_node = node_names.get_mission) & !(current_status = invalid) & (TRUE) : x_goal;
				TRUE : target_x;
			esac;
		next(target_y) :=
			case
				(active_node = node_names.get_mission) & !(current_status = invalid) & (!(TRUE)) : target_y;
				(active_node = node_names.get_mission) & !(current_status = invalid) & (TRUE) : y_goal;
				TRUE : target_y;
			esac;
		next(mission) :=
			case
				(active_node = node_names.clear_mission) & !(current_status = invalid) & (TRUE) : FALSE;
				(active_node = node_names.get_mission) & !(current_status = invalid) & (TRUE) : TRUE;
				TRUE : mission;
			esac;
		next(x_goal) :=
			case
				(active_node = -1) & (remaining_goals > 0) & ((0 = remaining_goals)) : x_goal;
				(active_node = -1) & (remaining_goals > 0) & (((x_goal = x_true) & (y_goal = y_true))) : {0, 1, 2, 3, 4, 5, 6};
				(active_node = -1) & (remaining_goals > 0) & (TRUE) : x_goal;
				TRUE : x_goal;
			esac;
		next(y_goal) :=
			case
				(active_node = -1) & (remaining_goals > 0) & ((0 = remaining_goals)) : y_goal;
				(active_node = -1) & (remaining_goals > 0) & (((x_goal = x_true) & (y_goal = y_true))) : {0, 1, 2, 3, 4, 5, 6};
				(active_node = -1) & (remaining_goals > 0) & (TRUE) : y_goal;
				TRUE : y_goal;
			esac;
		next(x_true) :=
			case
				(active_node = node_names.go_right) & !(current_status = invalid) & (TRUE) : min(6, (x_true + 1));
				(active_node = node_names.go_left) & !(current_status = invalid) & (TRUE) : max(0, (x_true - 1));
				TRUE : x_true;
			esac;
		next(y_true) :=
			case
				(active_node = node_names.go_up) & !(current_status = invalid) & (TRUE) : min(6, (y_true + 1));
				(active_node = node_names.go_down) & !(current_status = invalid) & (TRUE) : max(0, (y_true - 1));
				TRUE : y_true;
			esac;
		next(remaining_goals) :=
			case
				(active_node = -1) & (remaining_goals > 0) & (((x_goal = x_true) & (y_goal = y_true))) : max(0, (remaining_goals - 1));
				(active_node = -1) & (remaining_goals > 0) & (TRUE) : remaining_goals;
				TRUE : remaining_goals;
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

LTLSPEC F((remaining_goals = 0));
CTLSPEC AF((remaining_goals = 0));
MODULE define_nodes
	DEFINE
		robot_control := 0;
		get_position := 1;
		reset_completed_mission_FiS := 2;
		reset_completed_mission := 3;
		target_reached := 4;
		clear_mission := 5;
		confirm_mission := 6;
		have_mission := 7;
		get_mission := 8;
		move_robot := 9;
		try_right := 10;
		x_too_small := 11;
		go_right := 12;
		try_left := 13;
		x_too_big := 14;
		go_left := 15;
		try_up := 16;
		y_too_small := 17;
		go_up := 18;
		try_down := 19;
		y_too_big := 20;
		go_down := 21;
