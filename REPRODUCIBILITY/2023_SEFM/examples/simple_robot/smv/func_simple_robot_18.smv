MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__robot_control := -3;
		robot_control.active := (env_remaining_goals > 0);
		--START OF BLACKBOARD DEFINITIONS
		env_remaining_goals_stage_1 := 
			case
				!(robot_control.active) : env_remaining_goals;
				((env_x_goal = env_x_true_stage_2) & (env_y_goal = env_y_true_stage_2)) : max(0, (env_remaining_goals - 1));
				TRUE : env_remaining_goals;
			esac;
		env_x_true_stage_1 := 
			case
				!(go_right.active) : env_x_true;
				TRUE : min(17, (env_x_true + 1));
			esac;
		env_x_true_stage_2 := 
			case
				!(go_left.active) : env_x_true_stage_1;
				TRUE : max(0, (env_x_true_stage_1 - 1));
			esac;
		env_y_true_stage_1 := 
			case
				!(go_up.active) : env_y_true;
				TRUE : min(17, (env_y_true + 1));
			esac;
		env_y_true_stage_2 := 
			case
				!(go_down.active) : env_y_true_stage_1;
				TRUE : max(0, (env_y_true_stage_1 - 1));
			esac;
		var_mission_stage_1 := 
			case
				!(clear_mission.active) : var_mission;
				TRUE : FALSE;
			esac;
		var_mission_stage_2 := 
			case
				!(get_mission.active) : var_mission_stage_1;
				TRUE : TRUE;
			esac;
		var_target_x_stage_1 := 
			case
				!(get_mission.active) : var_target_x;
				!(TRUE) : var_target_x;
				TRUE : env_x_goal;
			esac;
		var_target_y_stage_1 := 
			case
				!(get_mission.active) : var_target_y;
				!(TRUE) : var_target_y;
				TRUE : env_y_goal;
			esac;
		var_x_stage_1 := 
			case
				!(get_position.active) : var_x;
				!(TRUE) : var_x;
				TRUE : env_x_true;
			esac;
		var_y_stage_1 := 
			case
				!(get_position.active) : var_y;
				!(TRUE) : var_y;
				TRUE : env_y_true;
			esac;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		clear_mission : success_DEFAULT_module();
		confirm_mission : composite_selector_without_memory(confirm_mission_1, have_mission);
		confirm_mission_1 : composite_selector_without_memory(confirm_mission_END, get_mission);
		confirm_mission_END : composite_selector_without_memory_END;
		get_mission : success_DEFAULT_module();
		get_position : success_DEFAULT_module();
		go_down : success_DEFAULT_module();
		go_left : success_DEFAULT_module();
		go_right : success_DEFAULT_module();
		go_up : success_DEFAULT_module();
		have_mission : have_mission_module(var_mission_stage_1);
		move_robot : composite_selector_without_memory(move_robot_1, try_right);
		move_robot_1 : composite_selector_without_memory(move_robot_2, try_left);
		move_robot_2 : composite_selector_without_memory(move_robot_3, try_up);
		move_robot_3 : composite_selector_without_memory(move_robot_END, try_down);
		move_robot_END : composite_selector_without_memory_END;
		reset_completed_mission : composite_sequence_without_memory(reset_completed_mission_1, target_reached);
		reset_completed_mission_1 : composite_sequence_without_memory(reset_completed_mission_END, clear_mission);
		reset_completed_mission_END : composite_sequence_without_memory_END;
		reset_completed_mission_FiS : decorator_X_is_Y(reset_completed_mission, failure, success);
		robot_control : composite_sequence_without_memory(robot_control_1, get_position);
		robot_control_1 : composite_sequence_without_memory(robot_control_2, reset_completed_mission_FiS);
		robot_control_2 : composite_sequence_without_memory(robot_control_3, confirm_mission);
		robot_control_3 : composite_sequence_without_memory(robot_control_END, move_robot);
		robot_control_END : composite_sequence_without_memory_END;
		target_reached : target_reached_module(var_target_x, var_target_y, var_y_stage_1, var_x_stage_1);
		try_down : composite_sequence_without_memory(try_down_1, y_too_big);
		try_down_1 : composite_sequence_without_memory(try_down_END, go_down);
		try_down_END : composite_sequence_without_memory_END;
		try_left : composite_sequence_without_memory(try_left_1, x_too_big);
		try_left_1 : composite_sequence_without_memory(try_left_END, go_left);
		try_left_END : composite_sequence_without_memory_END;
		try_right : composite_sequence_without_memory(try_right_1, x_too_small);
		try_right_1 : composite_sequence_without_memory(try_right_END, go_right);
		try_right_END : composite_sequence_without_memory_END;
		try_up : composite_sequence_without_memory(try_up_1, y_too_small);
		try_up_1 : composite_sequence_without_memory(try_up_END, go_up);
		try_up_END : composite_sequence_without_memory_END;
		x_too_big : x_too_big_module(var_target_x_stage_1, var_x_stage_1);
		x_too_small : x_too_small_module(var_target_x_stage_1, var_x_stage_1);
		y_too_big : y_too_big_module(var_y_stage_1, var_target_y_stage_1);
		y_too_small : y_too_small_module(var_y_stage_1, var_target_y_stage_1);
		--START OF BLACKBOARD VARIABLES DECLARATION
		env_remaining_goals : 0..3;
		env_x_goal : 0..17;
		env_x_goal_stage_1 : 0..17;
		env_x_true : 0..17;
		env_y_goal : 0..17;
		env_y_goal_stage_1 : 0..17;
		env_y_true : 0..17;
		var_mission : boolean;
		var_target_x : 0..17;
		var_target_y : 0..17;
		var_x : 0..17;
		var_y : 0..17;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(env_remaining_goals) := 
			case
				TRUE : {0, 1, 2, 3};
			esac;
		init(env_x_goal) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
			esac;
		init(env_x_true) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
			esac;
		init(env_y_goal) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
			esac;
		init(env_y_true) := 
			case
				TRUE : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
			esac;
		init(var_mission) := 
			case
				TRUE : FALSE;
			esac;
		init(var_target_x) := 
			case
				TRUE : 0;
			esac;
		init(var_target_y) := 
			case
				TRUE : 0;
			esac;
		init(var_x) := 
			case
				TRUE : 0;
			esac;
		init(var_y) := 
			case
				TRUE : 0;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(env_remaining_goals) := env_remaining_goals_stage_1;
		next(env_x_goal) := env_x_goal_stage_1;
		env_x_goal_stage_1 := 
			case
				!(robot_control.active) : env_x_goal;
				(0 = env_remaining_goals_stage_1) : env_x_goal;
				((env_x_goal = env_x_true_stage_2) & (env_y_goal = env_y_true_stage_2)) : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
				TRUE : env_x_goal;
			esac;
		next(env_x_true) := env_x_true_stage_2;
		next(env_y_goal) := env_y_goal_stage_1;
		env_y_goal_stage_1 := 
			case
				!(robot_control.active) : env_y_goal;
				(0 = env_remaining_goals_stage_1) : env_y_goal;
				((env_x_goal_stage_1 = env_x_true_stage_2) & (env_y_goal = env_y_true_stage_2)) : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17};
				TRUE : env_y_goal;
			esac;
		next(env_y_true) := env_y_true_stage_2;
		next(var_mission) := var_mission_stage_2;
		next(var_target_x) := var_target_x_stage_1;
		next(var_target_y) := var_target_y_stage_1;
		next(var_x) := var_x_stage_1;
		next(var_y) := var_y_stage_1;
		--END OF BLACKBOARD VARIABLES TRANSITION

INVARSPEC (count((go_down.active), (go_left.active), (go_right.active), (go_up.active)) <= 1);
LTLSPEC F((env_remaining_goals_stage_1 = 0));
CTLSPEC AF((env_remaining_goals_stage_1 = 0));
MODULE define_nodes
	DEFINE
		robot_control := 0;
		get_position := 1;
		reset_completed_mission_FiS := 2;
		reset_completed_mission := 3;
		target_reached := 4;
		clear_mission := 5;
		confirm_mission := 6;
		have_mission := 7;
		get_mission := 8;
		move_robot := 9;
		try_right := 10;
		x_too_small := 11;
		go_right := 12;
		try_left := 13;
		x_too_big := 14;
		go_left := 15;
		try_up := 16;
		y_too_small := 17;
		go_up := 18;
		try_down := 19;
		y_too_big := 20;
		go_down := 21;
MODULE composite_selector_without_memory(next_composite, child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child.internal_status = failure : next_composite.internal_status;
				TRUE : child.internal_status;
			esac;
		child.active := active;
		next_composite.active := active & (child.internal_status = failure);

MODULE composite_selector_without_memory_END
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? failure : invalid;
		internal_status := failure;
MODULE composite_sequence_without_memory(next_composite, child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child.internal_status = success : next_composite.internal_status;
				TRUE : child.internal_status;
			esac;
		child.active := active;
		next_composite.active := active & (child.internal_status = success);

MODULE composite_sequence_without_memory_END
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? success : invalid;
		internal_status := success;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child_0.status = incoming_status : outgoing_status;
				TRUE : child_0.status;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				TRUE : TRUE;
			esac;
MODULE have_mission_module(var_mission_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_mission_stage_1) ? success : failure;
MODULE target_reached_module(var_target_x, var_target_y, var_y_stage_1, var_x_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (((var_x_stage_1 = var_target_x) & (var_y_stage_1 = var_target_y))) ? success : failure;
MODULE x_too_big_module(var_target_x_stage_1, var_x_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_x_stage_1 > var_target_x_stage_1)) ? success : failure;
MODULE x_too_small_module(var_target_x_stage_1, var_x_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_x_stage_1 < var_target_x_stage_1)) ? success : failure;
MODULE y_too_big_module(var_y_stage_1, var_target_y_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_y_stage_1 > var_target_y_stage_1)) ? success : failure;
MODULE y_too_small_module(var_y_stage_1, var_target_y_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((var_y_stage_1 < var_target_y_stage_1)) ? success : failure;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
