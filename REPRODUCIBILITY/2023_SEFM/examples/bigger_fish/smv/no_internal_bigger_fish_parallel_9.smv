MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__biggest_fish_sequence := -3;
		resume_from_here_in_subtree__decorator6 := -3;
		resume_from_here_in_subtree__decorator7 := -3;
		resume_from_here_in_subtree__decorator8 := -3;
		resume_from_here_in_subtree__decorator9 := -3;
		resume_from_here_in_subtree__parallel5 := -3;
		resume_from_here_in_subtree__decorator2 := -3;
		resume_from_here_in_subtree__decorator3 := -3;
		resume_from_here_in_subtree__decorator4 := -3;
		resume_from_here_in_subtree__decorator5 := -3;
		resume_from_here_in_subtree__parallel1 := -3;
		resume_from_here_in_subtree__decorator0 := -3;
		resume_from_here_in_subtree__decorator1 := -3;
		biggest_fish_sequence.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		biggest_fish_stage_1 := 
			case
				!(bigger_fish.active) : biggest_fish_stage_0;
				TRUE : min((1 + biggest_fish_stage_0), 199);
			esac;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		biggest_fish_is6 : biggest_fish_is6_module(biggest_fish_stage_0);
		decorator6 : decorator_X_is_Y(biggest_fish_is6, failure, running);
		biggest_fish_is7 : biggest_fish_is7_module(biggest_fish_stage_0);
		decorator7 : decorator_X_is_Y(biggest_fish_is7, failure, running);
		biggest_fish_is8 : biggest_fish_is8_module(biggest_fish_stage_0);
		decorator8 : decorator_X_is_Y(biggest_fish_is8, failure, running);
		biggest_fish_is9 : biggest_fish_is9_module(biggest_fish_stage_0);
		decorator9 : decorator_X_is_Y(biggest_fish_is9, failure, running);
		biggest_fish_is2 : biggest_fish_is2_module(biggest_fish_stage_0);
		decorator2 : decorator_X_is_Y(biggest_fish_is2, failure, running);
		biggest_fish_is3 : biggest_fish_is3_module(biggest_fish_stage_0);
		decorator3 : decorator_X_is_Y(biggest_fish_is3, failure, running);
		biggest_fish_is4 : biggest_fish_is4_module(biggest_fish_stage_0);
		decorator4 : decorator_X_is_Y(biggest_fish_is4, failure, running);
		biggest_fish_is5 : biggest_fish_is5_module(biggest_fish_stage_0);
		decorator5 : decorator_X_is_Y(biggest_fish_is5, failure, running);
		biggest_fish_is0 : biggest_fish_is0_module(biggest_fish_stage_0);
		decorator0 : decorator_X_is_Y(biggest_fish_is0, failure, running);
		biggest_fish_is1 : biggest_fish_is1_module(biggest_fish_stage_0);
		decorator1 : decorator_X_is_Y(biggest_fish_is1, failure, running);
		parallel1 : composite_parallel_success_on_one_without_memory_2(decorator0, decorator1);
		parallel5 : composite_parallel_success_on_one_without_memory_5(decorator2, decorator3, decorator4, decorator5, parallel1);
		parallel9 : composite_parallel_success_on_one_without_memory_5(decorator6, decorator7, decorator8, decorator9, parallel5);
		special_decorator : decorator_X_is_Y(parallel9, running, failure);
		bigger_fish : success_DEFAULT_module();
		biggest_fish_sequence : composite_sequence_without_memory_2(special_decorator, bigger_fish);
		--START OF BLACKBOARD VARIABLES DECLARATION
		biggest_fish_stage_0 : 0..199;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(biggest_fish_stage_0) := 
			case
				TRUE : 0;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(biggest_fish_stage_0) := biggest_fish_stage_1;
		--END OF BLACKBOARD VARIABLES TRANSITION

LTLSPEC F(G((biggest_fish_stage_0 = 10)));
CTLSPEC AF(AG((biggest_fish_stage_0 = 10)));
MODULE define_nodes
	DEFINE
		biggest_fish_sequence := 0;
		special_decorator := 1;
		parallel9 := 2;
		decorator6 := 3;
		biggest_fish_is6 := 4;
		decorator7 := 5;
		biggest_fish_is7 := 6;
		decorator8 := 7;
		biggest_fish_is8 := 8;
		decorator9 := 9;
		biggest_fish_is9 := 10;
		parallel5 := 11;
		decorator2 := 12;
		biggest_fish_is2 := 13;
		decorator3 := 14;
		biggest_fish_is3 := 15;
		decorator4 := 16;
		biggest_fish_is4 := 17;
		decorator5 := 18;
		biggest_fish_is5 := 19;
		parallel1 := 20;
		decorator0 := 21;
		biggest_fish_is0 := 22;
		decorator1 := 23;
		biggest_fish_is1 := 24;
		bigger_fish := 25;
MODULE composite_parallel_success_on_one_without_memory_5(child_0, child_1, child_2, child_3, child_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				(child_0.status = failure) : failure;
				(child_1.status = failure) : failure;
				(child_2.status = failure) : failure;
				(child_3.status = failure) : failure;
				(child_4.status = failure) : failure;
				!(child_0.status = running) : child_0.status;
				!(child_1.status = running) : child_1.status;
				!(child_2.status = running) : child_2.status;
				!(child_3.status = running) : child_3.status;
				!(child_4.status = running) : child_4.status;
				TRUE : running;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
		child_4.active := active;
MODULE composite_sequence_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				!(child_0.status = success) : child_0.status;
				!(child_1.status = success) : child_1.status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = success;
MODULE composite_parallel_success_on_one_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				(child_0.status = failure) : failure;
				(child_1.status = failure) : failure;
				!(child_0.status = running) : child_0.status;
				!(child_1.status = running) : child_1.status;
				TRUE : running;
			esac;
		child_0.active := active;
		child_1.active := active;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				child_0.status = incoming_status : outgoing_status;
				TRUE : child_0.status;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				TRUE : TRUE;
			esac;
MODULE biggest_fish_is6_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 6)) ? success : failure;
MODULE biggest_fish_is7_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 7)) ? success : failure;
MODULE biggest_fish_is8_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 8)) ? success : failure;
MODULE biggest_fish_is9_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 9)) ? success : failure;
MODULE biggest_fish_is2_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 2)) ? success : failure;
MODULE biggest_fish_is3_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 3)) ? success : failure;
MODULE biggest_fish_is4_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 4)) ? success : failure;
MODULE biggest_fish_is5_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 5)) ? success : failure;
MODULE biggest_fish_is0_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 0)) ? success : failure;
MODULE biggest_fish_is1_module(biggest_fish_stage_0)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ((biggest_fish_stage_0 = 1)) ? success : failure;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? success : invalid;
