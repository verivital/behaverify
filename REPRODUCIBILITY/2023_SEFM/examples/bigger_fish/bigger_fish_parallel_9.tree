constants { } end_constants
variables {variable { bl biggest_fish VAR [0, 199] assign { result {0} end_result} }}
environment_update {} 
checks {
    check {
        biggest_fish_is0
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 0) } end_condition
    } end_check
    check {
        biggest_fish_is1
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 1) } end_condition
    } end_check
    check {
        biggest_fish_is2
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 2) } end_condition
    } end_check
    check {
        biggest_fish_is3
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 3) } end_condition
    } end_check
    check {
        biggest_fish_is4
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 4) } end_condition
    } end_check
    check {
        biggest_fish_is5
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 5) } end_condition
    } end_check
    check {
        biggest_fish_is6
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 6) } end_condition
    } end_check
    check {
        biggest_fish_is7
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 7) } end_condition
    } end_check
    check {
        biggest_fish_is8
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 8) } end_condition
    } end_check
    check {
        biggest_fish_is9
        read_variables { biggest_fish } end_read_variables
        condition { (equal, biggest_fish, 9) } end_condition
    } end_check
} end_checks
environment_checks {#comment# check environment nodes are defined here #end_comment#} end_environment_checks
actions {
    action {
        bigger_fish
        local_variables {} end_local_variables
        read_variables {} end_read_variables
        write_variables { biggest_fish } end_write_variables
        initial_values {} end_initial_values
        update {
            variable_statement { biggest_fish assign {result { (min, (addition, 1, biggest_fish), 199) } } } end_variable_statement
            return_statement { result { success } end_result } end_return_statement
        } end_update
    } end_action
} end_actions
sub_trees {#comment# subtrees go here. #end_comment#} end_sub_trees
tree {
composite {
    biggest_fish_sequence
    sequence
    children {
        decorator {
            special_decorator
            X_is_Y X running Y failure
            child {
            composite {
                parallel9
                parallel policy success_on_one
                children {
                    decorator {
                        decorator6
                        X_is_Y X failure Y running
                        child { biggest_fish_is6}
                    } end_decorator
                    decorator {
                        decorator7
                        X_is_Y X failure Y running
                        child { biggest_fish_is7}
                    } end_decorator
                    decorator {
                        decorator8
                        X_is_Y X failure Y running
                        child { biggest_fish_is8}
                    } end_decorator
                    decorator {
                        decorator9
                        X_is_Y X failure Y running
                        child { biggest_fish_is9}
                    } end_decorator
                    composite {
                        parallel5
                        parallel policy success_on_one
                        children {
                            decorator {
                                decorator2
                                X_is_Y X failure Y running
                                child { biggest_fish_is2}
                            } end_decorator
                            decorator {
                                decorator3
                                X_is_Y X failure Y running
                                child { biggest_fish_is3}
                            } end_decorator
                            decorator {
                                decorator4
                                X_is_Y X failure Y running
                                child { biggest_fish_is4}
                            } end_decorator
                            decorator {
                                decorator5
                                X_is_Y X failure Y running
                                child { biggest_fish_is5}
                            } end_decorator
                            composite {
                                parallel1
                                parallel policy success_on_one
                                children {
                                    decorator {
                                        decorator0
                                        X_is_Y X failure Y running
                                        child { biggest_fish_is0}
                                    } end_decorator
                                    decorator {
                                        decorator1
                                        X_is_Y X failure Y running
                                        child { biggest_fish_is1}
                                    } end_decorator
                                } end_children
                            } end_composite
                        } end_children
                    } end_composite
                } end_children
            } end_composite
        }} end_decorator
        bigger_fish
    } end_children
} end_composite
} end_tree
specifications {
    LTLSPEC { (finally, (globally, (equal, biggest_fish 0, 10))) } end_LTLSPEC
    CTLSPEC { (always_finally, (always_globally, (equal, biggest_fish 0, 10))) } end_CTLSPEC
} end_specifications