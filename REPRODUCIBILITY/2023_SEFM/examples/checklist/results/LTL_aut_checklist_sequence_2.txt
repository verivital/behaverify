*** This is nuXmv 2.0.0 (compiled on Mon Oct 14 17:48:12 2019)
*** Copyright (c) 2014-2019, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2019, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- specification  G (success_failure_node.status = failure -> (active_node > 0 U success_node.status = success))  is true
-- specification  G (success_failure_node.status = failure -> !(active_node > 0 U success_node.status = success))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    active_node = -1
    success_failure_node.status = invalid
    success_node.status = invalid
    success_failure_node_1.status = invalid
    success_node_1.status = invalid
    randomizer = FALSE
    success_node_1.reset = TRUE
    success_node_1.active = FALSE
    success_failure_node_1.reset = TRUE
    success_failure_node_1.active = FALSE
    success_node.reset = TRUE
    success_node.active = FALSE
    success_failure_node.reset = TRUE
    success_failure_node.active = FALSE
    next_child__seqLink1 = 1
    next_child__sel1 = 5
    next_child__sel0 = 2
    status__seqLink1 = invalid
    status__sel1 = invalid
    status__success_node_1 = invalid
    status__success_failure_node_1 = invalid
    status__sel0 = invalid
    status__success_node = invalid
    status__success_failure_node = invalid
    child_index_to_resume_from__seqLink1 = -2
    child_index_to_resume_from__sel1 = -2
    child_index_to_resume_from__sel0 = -2
    resume_from_here_in_subtree__seqLink1 = -3
    node_names.success_node_1 = 6
    node_names.success_failure_node_1 = 5
    node_names.sel1 = 4
    node_names.success_node = 3
    node_names.success_failure_node = 2
    node_names.sel0 = 1
    node_names.seqLink1 = 0
  -> State: 1.2 <-
    active_node = 0
    success_node_1.reset = FALSE
    success_failure_node_1.reset = FALSE
    success_node.reset = FALSE
    success_failure_node.reset = FALSE
  -> State: 1.3 <-
    active_node = 1
  -> State: 1.4 <-
    active_node = 2
    success_failure_node.active = TRUE
  -> State: 1.5 <-
    success_failure_node.status = failure
    next_child__sel0 = 3
    status__success_failure_node = failure
  -> State: 1.6 <-
    active_node = 1
    success_failure_node.active = FALSE
  -> State: 1.7 <-
    active_node = 3
    success_node.active = TRUE
  -> State: 1.8 <-
    success_node.status = success
    next_child__seqLink1 = 4
    status__sel0 = success
    status__success_node = success
  -- Loop starts here
  -> State: 1.9 <-
    active_node = 1
    success_node.active = FALSE
  -> State: 1.10 <-
    active_node = 0
  -> State: 1.11 <-
    active_node = 4
  -> State: 1.12 <-
    active_node = 5
    success_failure_node_1.active = TRUE
  -> State: 1.13 <-
    success_failure_node_1.status = failure
    next_child__sel1 = 6
    status__success_failure_node_1 = failure
  -> State: 1.14 <-
    active_node = 4
    success_failure_node_1.active = FALSE
  -> State: 1.15 <-
    active_node = 6
    success_node_1.active = TRUE
  -> State: 1.16 <-
    success_node_1.status = success
    status__seqLink1 = success
    status__sel1 = success
    status__success_node_1 = success
  -> State: 1.17 <-
    active_node = 4
    success_node_1.active = FALSE
  -> State: 1.18 <-
    active_node = 0
  -> State: 1.19 <-
    active_node = -1
    success_node_1.reset = TRUE
    success_failure_node_1.reset = TRUE
    success_node.reset = TRUE
    success_failure_node.reset = TRUE
  -> State: 1.20 <-
    active_node = 0
    success_failure_node.status = invalid
    success_node.status = invalid
    success_failure_node_1.status = invalid
    success_node_1.status = invalid
    success_node_1.reset = FALSE
    success_failure_node_1.reset = FALSE
    success_node.reset = FALSE
    success_failure_node.reset = FALSE
    next_child__seqLink1 = 1
    next_child__sel1 = 5
    next_child__sel0 = 2
    status__seqLink1 = invalid
    status__sel1 = invalid
    status__success_node_1 = invalid
    status__success_failure_node_1 = invalid
    status__sel0 = invalid
    status__success_node = invalid
    status__success_failure_node = invalid
  -> State: 1.21 <-
    active_node = 1
  -> State: 1.22 <-
    active_node = 2
    success_failure_node.active = TRUE
  -> State: 1.23 <-
    success_failure_node.status = failure
    next_child__sel0 = 3
    status__success_failure_node = failure
  -> State: 1.24 <-
    active_node = 1
    success_failure_node.active = FALSE
  -> State: 1.25 <-
    active_node = 3
    success_node.active = TRUE
  -> State: 1.26 <-
    success_node.status = success
    next_child__seqLink1 = 4
    status__sel0 = success
    status__success_node = success
  -> State: 1.27 <-
    active_node = 1
    success_node.active = FALSE
-- specification  G (success_failure_node_1.status = failure -> (active_node > 0 U success_node_1.status = success))  is true
-- specification  G (success_failure_node_1.status = failure -> !(active_node > 0 U success_node_1.status = success))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 2.1 <-
    active_node = -1
    success_failure_node.status = invalid
    success_node.status = invalid
    success_failure_node_1.status = invalid
    success_node_1.status = invalid
    randomizer = FALSE
    success_node_1.reset = TRUE
    success_node_1.active = FALSE
    success_failure_node_1.reset = TRUE
    success_failure_node_1.active = FALSE
    success_node.reset = TRUE
    success_node.active = FALSE
    success_failure_node.reset = TRUE
    success_failure_node.active = FALSE
    next_child__seqLink1 = 1
    next_child__sel1 = 5
    next_child__sel0 = 2
    status__seqLink1 = invalid
    status__sel1 = invalid
    status__success_node_1 = invalid
    status__success_failure_node_1 = invalid
    status__sel0 = invalid
    status__success_node = invalid
    status__success_failure_node = invalid
    child_index_to_resume_from__seqLink1 = -2
    child_index_to_resume_from__sel1 = -2
    child_index_to_resume_from__sel0 = -2
    resume_from_here_in_subtree__seqLink1 = -3
    node_names.success_node_1 = 6
    node_names.success_failure_node_1 = 5
    node_names.sel1 = 4
    node_names.success_node = 3
    node_names.success_failure_node = 2
    node_names.sel0 = 1
    node_names.seqLink1 = 0
  -> State: 2.2 <-
    active_node = 0
    success_node_1.reset = FALSE
    success_failure_node_1.reset = FALSE
    success_node.reset = FALSE
    success_failure_node.reset = FALSE
  -> State: 2.3 <-
    active_node = 1
  -> State: 2.4 <-
    active_node = 2
    success_failure_node.active = TRUE
  -> State: 2.5 <-
    success_failure_node.status = failure
    next_child__sel0 = 3
    status__success_failure_node = failure
  -> State: 2.6 <-
    active_node = 1
    success_failure_node.active = FALSE
  -> State: 2.7 <-
    active_node = 3
    success_node.active = TRUE
  -> State: 2.8 <-
    success_node.status = success
    next_child__seqLink1 = 4
    status__sel0 = success
    status__success_node = success
  -> State: 2.9 <-
    active_node = 1
    success_node.active = FALSE
  -> State: 2.10 <-
    active_node = 0
  -> State: 2.11 <-
    active_node = 4
  -> State: 2.12 <-
    active_node = 5
    success_failure_node_1.active = TRUE
  -> State: 2.13 <-
    success_failure_node_1.status = failure
    next_child__sel1 = 6
    status__success_failure_node_1 = failure
  -> State: 2.14 <-
    active_node = 4
    success_failure_node_1.active = FALSE
  -> State: 2.15 <-
    active_node = 6
    success_node_1.active = TRUE
  -> State: 2.16 <-
    success_node_1.status = success
    status__seqLink1 = success
    status__sel1 = success
    status__success_node_1 = success
  -- Loop starts here
  -> State: 2.17 <-
    active_node = 4
    success_node_1.active = FALSE
  -> State: 2.18 <-
    active_node = 0
  -> State: 2.19 <-
    active_node = -1
    success_node_1.reset = TRUE
    success_failure_node_1.reset = TRUE
    success_node.reset = TRUE
    success_failure_node.reset = TRUE
  -> State: 2.20 <-
    active_node = 0
    success_failure_node.status = invalid
    success_node.status = invalid
    success_failure_node_1.status = invalid
    success_node_1.status = invalid
    success_node_1.reset = FALSE
    success_failure_node_1.reset = FALSE
    success_node.reset = FALSE
    success_failure_node.reset = FALSE
    next_child__seqLink1 = 1
    next_child__sel1 = 5
    next_child__sel0 = 2
    status__seqLink1 = invalid
    status__sel1 = invalid
    status__success_node_1 = invalid
    status__success_failure_node_1 = invalid
    status__sel0 = invalid
    status__success_node = invalid
    status__success_failure_node = invalid
  -> State: 2.21 <-
    active_node = 1
  -> State: 2.22 <-
    active_node = 2
    success_failure_node.active = TRUE
  -> State: 2.23 <-
    success_failure_node.status = failure
    next_child__sel0 = 3
    status__success_failure_node = failure
  -> State: 2.24 <-
    active_node = 1
    success_failure_node.active = FALSE
  -> State: 2.25 <-
    active_node = 3
    success_node.active = TRUE
  -> State: 2.26 <-
    success_node.status = success
    next_child__seqLink1 = 4
    status__sel0 = success
    status__success_node = success
  -> State: 2.27 <-
    active_node = 1
    success_node.active = FALSE
  -> State: 2.28 <-
    active_node = 0
  -> State: 2.29 <-
    active_node = 4
  -> State: 2.30 <-
    active_node = 5
    success_failure_node_1.active = TRUE
  -> State: 2.31 <-
    success_failure_node_1.status = failure
    next_child__sel1 = 6
    status__success_failure_node_1 = failure
  -> State: 2.32 <-
    active_node = 4
    success_failure_node_1.active = FALSE
  -> State: 2.33 <-
    active_node = 6
    success_node_1.active = TRUE
  -> State: 2.34 <-
    success_node_1.status = success
    status__seqLink1 = success
    status__sel1 = success
    status__success_node_1 = success
  -> State: 2.35 <-
    active_node = 4
    success_node_1.active = FALSE
