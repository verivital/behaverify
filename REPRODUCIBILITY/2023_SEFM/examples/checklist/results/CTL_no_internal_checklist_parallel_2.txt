*** This is nuXmv 2.0.0 (compiled on Mon Oct 14 17:48:12 2019)
*** Copyright (c) 2014-2019, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2019, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- specification AG (success_failure_node.status = failure -> success_node.status = success)  is true
-- specification AG (success_failure_node.status = failure -> !(success_node.status = success))  is false
-- as demonstrated by the following execution sequence
Trace Description: CTL Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    randomizer_stage_1 = FALSE
    randomizer_stage_2 = FALSE
    LINK_TO_PREVIOUS_FINAL_randomizer = FALSE
    randomizer_stage_0 = FALSE
    parLink1.active = TRUE
    resume_from_here_in_subtree__sel1 = -3
    resume_from_here_in_subtree__sel0 = -3
    resume_from_here_in_subtree__parLink1 = -3
    node_names.success_node_1 = 6
    node_names.success_failure_node_1 = 5
    node_names.sel1 = 4
    node_names.success_node = 3
    node_names.success_failure_node = 2
    node_names.sel0 = 1
    node_names.parLink1 = 0
    success_failure_node.internal_status = failure
    success_failure_node.status = failure
    success_node.status = success
    success_node.active = TRUE
    success_failure_node.active = TRUE
    sel0.status = success
    success_failure_node_1.internal_status = failure
    success_failure_node_1.status = failure
    success_node_1.status = success
    success_node_1.active = TRUE
    success_failure_node_1.active = TRUE
    sel1.status = success
    sel1.active = TRUE
    sel0.active = TRUE
    parLink1.status = success
-- specification AG (success_failure_node_1.status = failure -> success_node_1.status = success)  is true
-- specification AG (success_failure_node_1.status = failure -> !(success_node_1.status = success))  is false
-- as demonstrated by the following execution sequence
Trace Description: CTL Counterexample 
Trace Type: Counterexample 
  -> State: 2.1 <-
    randomizer_stage_1 = FALSE
    randomizer_stage_2 = FALSE
    LINK_TO_PREVIOUS_FINAL_randomizer = FALSE
    randomizer_stage_0 = FALSE
    parLink1.active = TRUE
    resume_from_here_in_subtree__sel1 = -3
    resume_from_here_in_subtree__sel0 = -3
    resume_from_here_in_subtree__parLink1 = -3
    node_names.success_node_1 = 6
    node_names.success_failure_node_1 = 5
    node_names.sel1 = 4
    node_names.success_node = 3
    node_names.success_failure_node = 2
    node_names.sel0 = 1
    node_names.parLink1 = 0
    success_failure_node.internal_status = failure
    success_failure_node.status = failure
    success_node.status = success
    success_node.active = TRUE
    success_failure_node.active = TRUE
    sel0.status = success
    success_failure_node_1.internal_status = failure
    success_failure_node_1.status = failure
    success_node_1.status = success
    success_node_1.active = TRUE
    success_failure_node_1.active = TRUE
    sel1.status = success
    sel1.active = TRUE
    sel0.active = TRUE
    parLink1.status = success
