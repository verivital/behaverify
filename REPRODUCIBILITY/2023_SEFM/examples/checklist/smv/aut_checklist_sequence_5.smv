MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__seqLink4 := -3;
		child_index_to_resume_from__sel2 := -2;
		child_index_to_resume_from__sel3 := -2;
		child_index_to_resume_from__seqLink2 := -2;
		child_index_to_resume_from__sel4 := -2;
		child_index_to_resume_from__sel0 := -2;
		child_index_to_resume_from__sel1 := -2;
		child_index_to_resume_from__seqLink1 := -2;
		child_index_to_resume_from__seqLink3 := -2;
		child_index_to_resume_from__seqLink4 := -2;
		status__success_failure_node := success_failure_node.status;
		status__success_node := success_node.status;
		status__sel2 := 
			case
				status__success_failure_node != failure : status__success_failure_node;
				status__success_node != failure : status__success_node;
				TRUE : failure;
			esac;
		status__success_failure_node_1 := success_failure_node_1.status;
		status__success_node_1 := success_node_1.status;
		status__sel3 := 
			case
				status__success_failure_node_1 != failure : status__success_failure_node_1;
				status__success_node_1 != failure : status__success_node_1;
				TRUE : failure;
			esac;
		status__seqLink2 := 
			case
				status__sel2 != success : status__sel2;
				status__sel3 != success : status__sel3;
				TRUE : success;
			esac;
		status__success_failure_node_2 := success_failure_node_2.status;
		status__success_node_2 := success_node_2.status;
		status__sel4 := 
			case
				status__success_failure_node_2 != failure : status__success_failure_node_2;
				status__success_node_2 != failure : status__success_node_2;
				TRUE : failure;
			esac;
		status__success_failure_node_3 := success_failure_node_3.status;
		status__success_node_3 := success_node_3.status;
		status__sel0 := 
			case
				status__success_failure_node_3 != failure : status__success_failure_node_3;
				status__success_node_3 != failure : status__success_node_3;
				TRUE : failure;
			esac;
		status__success_failure_node_4 := success_failure_node_4.status;
		status__success_node_4 := success_node_4.status;
		status__sel1 := 
			case
				status__success_failure_node_4 != failure : status__success_failure_node_4;
				status__success_node_4 != failure : status__success_node_4;
				TRUE : failure;
			esac;
		status__seqLink1 := 
			case
				status__sel0 != success : status__sel0;
				status__sel1 != success : status__sel1;
				TRUE : success;
			esac;
		status__seqLink3 := 
			case
				status__sel4 != success : status__sel4;
				status__seqLink1 != success : status__seqLink1;
				TRUE : success;
			esac;
		status__seqLink4 := 
			case
				status__seqLink2 != success : status__seqLink2;
				status__seqLink3 != success : status__seqLink3;
				TRUE : success;
			esac;
		next_child__sel2 := 
			case
				(status__success_failure_node = invalid)& (child_index_to_resume_from__sel2 <= 0) : node_names.success_failure_node;
				(status__success_node = invalid)& (child_index_to_resume_from__sel2 <= 1) : node_names.success_node;
			esac;
		next_child__sel3 := 
			case
				(status__success_failure_node_1 = invalid)& (child_index_to_resume_from__sel3 <= 0) : node_names.success_failure_node_1;
				(status__success_node_1 = invalid)& (child_index_to_resume_from__sel3 <= 1) : node_names.success_node_1;
			esac;
		next_child__seqLink2 := 
			case
				(status__sel2 = invalid)& (child_index_to_resume_from__seqLink2 <= 0) : node_names.sel2;
				(status__sel3 = invalid)& (child_index_to_resume_from__seqLink2 <= 1) : node_names.sel3;
			esac;
		next_child__sel4 := 
			case
				(status__success_failure_node_2 = invalid)& (child_index_to_resume_from__sel4 <= 0) : node_names.success_failure_node_2;
				(status__success_node_2 = invalid)& (child_index_to_resume_from__sel4 <= 1) : node_names.success_node_2;
			esac;
		next_child__sel0 := 
			case
				(status__success_failure_node_3 = invalid)& (child_index_to_resume_from__sel0 <= 0) : node_names.success_failure_node_3;
				(status__success_node_3 = invalid)& (child_index_to_resume_from__sel0 <= 1) : node_names.success_node_3;
			esac;
		next_child__sel1 := 
			case
				(status__success_failure_node_4 = invalid)& (child_index_to_resume_from__sel1 <= 0) : node_names.success_failure_node_4;
				(status__success_node_4 = invalid)& (child_index_to_resume_from__sel1 <= 1) : node_names.success_node_4;
			esac;
		next_child__seqLink1 := 
			case
				(status__sel0 = invalid)& (child_index_to_resume_from__seqLink1 <= 0) : node_names.sel0;
				(status__sel1 = invalid)& (child_index_to_resume_from__seqLink1 <= 1) : node_names.sel1;
			esac;
		next_child__seqLink3 := 
			case
				(status__sel4 = invalid)& (child_index_to_resume_from__seqLink3 <= 0) : node_names.sel4;
				(status__seqLink1 = invalid)& (child_index_to_resume_from__seqLink3 <= 1) : node_names.seqLink1;
			esac;
		next_child__seqLink4 := 
			case
				(status__seqLink2 = invalid)& (child_index_to_resume_from__seqLink4 <= 0) : node_names.seqLink2;
				(status__seqLink3 = invalid)& (child_index_to_resume_from__seqLink4 <= 1) : node_names.seqLink3;
			esac;
		success_failure_node.active := active_node = node_names.success_failure_node;
		success_failure_node.reset := active_node = -1;
		success_node.active := active_node = node_names.success_node;
		success_node.reset := active_node = -1;
		success_failure_node_1.active := active_node = node_names.success_failure_node_1;
		success_failure_node_1.reset := active_node = -1;
		success_node_1.active := active_node = node_names.success_node_1;
		success_node_1.reset := active_node = -1;
		success_failure_node_2.active := active_node = node_names.success_failure_node_2;
		success_failure_node_2.reset := active_node = -1;
		success_node_2.active := active_node = node_names.success_node_2;
		success_node_2.reset := active_node = -1;
		success_failure_node_3.active := active_node = node_names.success_failure_node_3;
		success_failure_node_3.reset := active_node = -1;
		success_node_3.active := active_node = node_names.success_node_3;
		success_node_3.reset := active_node = -1;
		success_failure_node_4.active := active_node = node_names.success_failure_node_4;
		success_failure_node_4.reset := active_node = -1;
		success_node_4.active := active_node = node_names.success_node_4;
		success_node_4.reset := active_node = -1;
		--START OF BLACKBOARD DEFINITIONS
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		active_node : -1..19;
		success_failure_node : success_failure_node_module(randomizer);
		success_node : success_DEFAULT_module;
		success_failure_node_1 : success_failure_node_1_module(randomizer);
		success_node_1 : success_DEFAULT_module;
		success_failure_node_2 : success_failure_node_2_module(randomizer);
		success_node_2 : success_DEFAULT_module;
		success_failure_node_3 : success_failure_node_3_module(randomizer);
		success_node_3 : success_DEFAULT_module;
		success_failure_node_4 : success_failure_node_4_module(randomizer);
		success_node_4 : success_DEFAULT_module;
		--START OF BLACKBOARD VARIABLES DECLARATION
		randomizer : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		init(active_node) := -1;
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(randomizer) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		next(active_node) :=
			case
				active_node = -1 & TRUE : node_names.seqLink4;
				active_node = -1 & !(TRUE) : -1;
				(active_node = node_names.success_failure_node) & (status__success_failure_node != invalid) : node_names.sel2;
				(active_node = node_names.success_node) & (status__success_node != invalid) : node_names.sel2;
				(active_node = node_names.sel2) & (status__sel2 != invalid) : node_names.seqLink2;
				(active_node = node_names.sel2) & (status__sel2 = invalid) : next_child__sel2;
				(active_node = node_names.success_failure_node_1) & (status__success_failure_node_1 != invalid) : node_names.sel3;
				(active_node = node_names.success_node_1) & (status__success_node_1 != invalid) : node_names.sel3;
				(active_node = node_names.sel3) & (status__sel3 != invalid) : node_names.seqLink2;
				(active_node = node_names.sel3) & (status__sel3 = invalid) : next_child__sel3;
				(active_node = node_names.seqLink2) & (status__seqLink2 != invalid) : node_names.seqLink4;
				(active_node = node_names.seqLink2) & (status__seqLink2 = invalid) : next_child__seqLink2;
				(active_node = node_names.success_failure_node_2) & (status__success_failure_node_2 != invalid) : node_names.sel4;
				(active_node = node_names.success_node_2) & (status__success_node_2 != invalid) : node_names.sel4;
				(active_node = node_names.sel4) & (status__sel4 != invalid) : node_names.seqLink3;
				(active_node = node_names.sel4) & (status__sel4 = invalid) : next_child__sel4;
				(active_node = node_names.success_failure_node_3) & (status__success_failure_node_3 != invalid) : node_names.sel0;
				(active_node = node_names.success_node_3) & (status__success_node_3 != invalid) : node_names.sel0;
				(active_node = node_names.sel0) & (status__sel0 != invalid) : node_names.seqLink1;
				(active_node = node_names.sel0) & (status__sel0 = invalid) : next_child__sel0;
				(active_node = node_names.success_failure_node_4) & (status__success_failure_node_4 != invalid) : node_names.sel1;
				(active_node = node_names.success_node_4) & (status__success_node_4 != invalid) : node_names.sel1;
				(active_node = node_names.sel1) & (status__sel1 != invalid) : node_names.seqLink1;
				(active_node = node_names.sel1) & (status__sel1 = invalid) : next_child__sel1;
				(active_node = node_names.seqLink1) & (status__seqLink1 != invalid) : node_names.seqLink3;
				(active_node = node_names.seqLink1) & (status__seqLink1 = invalid) : next_child__seqLink1;
				(active_node = node_names.seqLink3) & (status__seqLink3 != invalid) : node_names.seqLink4;
				(active_node = node_names.seqLink3) & (status__seqLink3 = invalid) : next_child__seqLink3;
				(active_node = node_names.seqLink4) & (status__seqLink4 != invalid) : -1;
				(active_node = node_names.seqLink4) & (status__seqLink4 = invalid) : next_child__seqLink4;
				TRUE : active_node;
			esac;
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(randomizer) :=
			case
				(active_node = -1) & !(status__success_failure_node = invalid) & (!(TRUE)) : randomizer;
				(active_node = -1) & !(status__success_failure_node = invalid) & (TRUE) : {TRUE, FALSE};
				(active_node = -1) & !(status__success_failure_node_1 = invalid) & (!(TRUE)) : randomizer;
				(active_node = -1) & !(status__success_failure_node_1 = invalid) & (TRUE) : {TRUE, FALSE};
				(active_node = -1) & !(status__success_failure_node_2 = invalid) & (!(TRUE)) : randomizer;
				(active_node = -1) & !(status__success_failure_node_2 = invalid) & (TRUE) : {TRUE, FALSE};
				(active_node = -1) & !(status__success_failure_node_3 = invalid) & (!(TRUE)) : randomizer;
				(active_node = -1) & !(status__success_failure_node_3 = invalid) & (TRUE) : {TRUE, FALSE};
				(active_node = -1) & !(status__success_failure_node_4 = invalid) & (!(TRUE)) : randomizer;
				(active_node = -1) & !(status__success_failure_node_4 = invalid) & (TRUE) : {TRUE, FALSE};
				TRUE : randomizer;
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

LTLSPEC G(((success_failure_node.status = failure) -> ((active_node > 0) U (success_node.status = success))));
LTLSPEC G(((success_failure_node.status = failure) -> !((active_node > 0) U (success_node.status = success))));
CTLSPEC AG(((success_failure_node.status = failure) -> (A [(active_node > 0) U (success_node.status = success)])));
CTLSPEC AG(((success_failure_node.status = failure) -> !(A [(active_node > 0) U (success_node.status = success)])));


LTLSPEC G(((success_failure_node_1.status = failure) -> ((active_node > 0) U (success_node_1.status = success))));
LTLSPEC G(((success_failure_node_1.status = failure) -> !((active_node > 0) U (success_node_1.status = success))));
CTLSPEC AG(((success_failure_node_1.status = failure) -> (A [(active_node > 0) U (success_node_1.status = success)])));
CTLSPEC AG(((success_failure_node_1.status = failure) -> !(A [(active_node > 0) U (success_node_1.status = success)])));


LTLSPEC G(((success_failure_node_2.status = failure) -> ((active_node > 0) U (success_node_2.status = success))));
LTLSPEC G(((success_failure_node_2.status = failure) -> !((active_node > 0) U (success_node_2.status = success))));
CTLSPEC AG(((success_failure_node_2.status = failure) -> (A [(active_node > 0) U (success_node_2.status = success)])));
CTLSPEC AG(((success_failure_node_2.status = failure) -> !(A [(active_node > 0) U (success_node_2.status = success)])));


LTLSPEC G(((success_failure_node_3.status = failure) -> ((active_node > 0) U (success_node_3.status = success))));
LTLSPEC G(((success_failure_node_3.status = failure) -> !((active_node > 0) U (success_node_3.status = success))));
CTLSPEC AG(((success_failure_node_3.status = failure) -> (A [(active_node > 0) U (success_node_3.status = success)])));
CTLSPEC AG(((success_failure_node_3.status = failure) -> !(A [(active_node > 0) U (success_node_3.status = success)])));


LTLSPEC G(((success_failure_node_4.status = failure) -> ((active_node > 0) U (success_node_4.status = success))));
LTLSPEC G(((success_failure_node_4.status = failure) -> !((active_node > 0) U (success_node_4.status = success))));
CTLSPEC AG(((success_failure_node_4.status = failure) -> (A [(active_node > 0) U (success_node_4.status = success)])));
CTLSPEC AG(((success_failure_node_4.status = failure) -> !(A [(active_node > 0) U (success_node_4.status = success)])));


MODULE define_nodes
	DEFINE
		seqLink4 := 0;
		seqLink2 := 1;
		sel2 := 2;
		success_failure_node := 3;
		success_node := 4;
		sel3 := 5;
		success_failure_node_1 := 6;
		success_node_1 := 7;
		seqLink3 := 8;
		sel4 := 9;
		success_failure_node_2 := 10;
		success_node_2 := 11;
		seqLink1 := 12;
		sel0 := 13;
		success_failure_node_3 := 14;
		success_node_3 := 15;
		sel1 := 16;
		success_failure_node_4 := 17;
		success_node_4 := 18;
MODULE success_failure_node_module(randomizer)
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success,failure,invalid};
	ASSIGN
		init(status) := invalid;
		next(status) :=
			case
				reset : invalid;
				!(active) : status;
				randomizer : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_1_module(randomizer)
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success,failure,invalid};
	ASSIGN
		init(status) := invalid;
		next(status) :=
			case
				reset : invalid;
				!(active) : status;
				randomizer : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_2_module(randomizer)
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success,failure,invalid};
	ASSIGN
		init(status) := invalid;
		next(status) :=
			case
				reset : invalid;
				!(active) : status;
				randomizer : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_3_module(randomizer)
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success,failure,invalid};
	ASSIGN
		init(status) := invalid;
		next(status) :=
			case
				reset : invalid;
				!(active) : status;
				randomizer : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_4_module(randomizer)
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success,failure,invalid};
	ASSIGN
		init(status) := invalid;
		next(status) :=
			case
				reset : invalid;
				!(active) : status;
				randomizer : success;
				TRUE : failure;
			esac;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success, invalid};
	ASSIGN
		init(status) := invalid;
		next(status) := 
			case
				reset : invalid;
				active : {success};
				TRUE : status;
			esac;
