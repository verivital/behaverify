MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__seqLink42 := -3;
		seqLink42.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		randomizer_stage_0 := randomizer_stage_1;
		LINK_TO_PREVIOUS_FINAL_randomizer := randomizer_stage_43;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		success_failure_node : success_failure_node_module(randomizer_stage_1);
		success_node : success_DEFAULT_module();
		sel22 : composite_selector_without_memory_2(success_failure_node, success_node);
		success_failure_node_1 : success_failure_node_1_module(randomizer_stage_2);
		success_node_1 : success_DEFAULT_module();
		sel23 : composite_selector_without_memory_2(success_failure_node_1, success_node_1);
		seqLink12 : composite_sequence_without_memory_2(sel22, sel23);
		success_failure_node_2 : success_failure_node_2_module(randomizer_stage_3);
		success_node_2 : success_DEFAULT_module();
		sel24 : composite_selector_without_memory_2(success_failure_node_2, success_node_2);
		success_failure_node_3 : success_failure_node_3_module(randomizer_stage_4);
		success_node_3 : success_DEFAULT_module();
		sel25 : composite_selector_without_memory_2(success_failure_node_3, success_node_3);
		seqLink13 : composite_sequence_without_memory_2(sel24, sel25);
		seqLink28 : composite_sequence_without_memory_2(seqLink12, seqLink13);
		success_failure_node_4 : success_failure_node_4_module(randomizer_stage_5);
		success_node_4 : success_DEFAULT_module();
		sel26 : composite_selector_without_memory_2(success_failure_node_4, success_node_4);
		success_failure_node_5 : success_failure_node_5_module(randomizer_stage_6);
		success_node_5 : success_DEFAULT_module();
		sel27 : composite_selector_without_memory_2(success_failure_node_5, success_node_5);
		seqLink14 : composite_sequence_without_memory_2(sel26, sel27);
		success_failure_node_6 : success_failure_node_6_module(randomizer_stage_7);
		success_node_6 : success_DEFAULT_module();
		sel28 : composite_selector_without_memory_2(success_failure_node_6, success_node_6);
		success_failure_node_7 : success_failure_node_7_module(randomizer_stage_8);
		success_node_7 : success_DEFAULT_module();
		sel29 : composite_selector_without_memory_2(success_failure_node_7, success_node_7);
		seqLink15 : composite_sequence_without_memory_2(sel28, sel29);
		seqLink29 : composite_sequence_without_memory_2(seqLink14, seqLink15);
		seqLink36 : composite_sequence_without_memory_2(seqLink28, seqLink29);
		success_failure_node_8 : success_failure_node_8_module(randomizer_stage_9);
		success_node_8 : success_DEFAULT_module();
		sel30 : composite_selector_without_memory_2(success_failure_node_8, success_node_8);
		success_failure_node_9 : success_failure_node_9_module(randomizer_stage_10);
		success_node_9 : success_DEFAULT_module();
		sel31 : composite_selector_without_memory_2(success_failure_node_9, success_node_9);
		seqLink16 : composite_sequence_without_memory_2(sel30, sel31);
		success_failure_node_10 : success_failure_node_10_module(randomizer_stage_11);
		success_node_10 : success_DEFAULT_module();
		sel32 : composite_selector_without_memory_2(success_failure_node_10, success_node_10);
		success_failure_node_11 : success_failure_node_11_module(randomizer_stage_12);
		success_node_11 : success_DEFAULT_module();
		sel33 : composite_selector_without_memory_2(success_failure_node_11, success_node_11);
		seqLink17 : composite_sequence_without_memory_2(sel32, sel33);
		seqLink30 : composite_sequence_without_memory_2(seqLink16, seqLink17);
		success_failure_node_12 : success_failure_node_12_module(randomizer_stage_13);
		success_node_12 : success_DEFAULT_module();
		sel34 : composite_selector_without_memory_2(success_failure_node_12, success_node_12);
		success_failure_node_13 : success_failure_node_13_module(randomizer_stage_14);
		success_node_13 : success_DEFAULT_module();
		sel35 : composite_selector_without_memory_2(success_failure_node_13, success_node_13);
		seqLink18 : composite_sequence_without_memory_2(sel34, sel35);
		success_failure_node_14 : success_failure_node_14_module(randomizer_stage_15);
		success_node_14 : success_DEFAULT_module();
		sel36 : composite_selector_without_memory_2(success_failure_node_14, success_node_14);
		success_failure_node_15 : success_failure_node_15_module(randomizer_stage_16);
		success_node_15 : success_DEFAULT_module();
		sel37 : composite_selector_without_memory_2(success_failure_node_15, success_node_15);
		seqLink19 : composite_sequence_without_memory_2(sel36, sel37);
		seqLink31 : composite_sequence_without_memory_2(seqLink18, seqLink19);
		seqLink37 : composite_sequence_without_memory_2(seqLink30, seqLink31);
		seqLink40 : composite_sequence_without_memory_2(seqLink36, seqLink37);
		success_failure_node_16 : success_failure_node_16_module(randomizer_stage_17);
		success_node_16 : success_DEFAULT_module();
		sel38 : composite_selector_without_memory_2(success_failure_node_16, success_node_16);
		success_failure_node_17 : success_failure_node_17_module(randomizer_stage_18);
		success_node_17 : success_DEFAULT_module();
		sel39 : composite_selector_without_memory_2(success_failure_node_17, success_node_17);
		seqLink20 : composite_sequence_without_memory_2(sel38, sel39);
		success_failure_node_18 : success_failure_node_18_module(randomizer_stage_19);
		success_node_18 : success_DEFAULT_module();
		sel40 : composite_selector_without_memory_2(success_failure_node_18, success_node_18);
		success_failure_node_19 : success_failure_node_19_module(randomizer_stage_20);
		success_node_19 : success_DEFAULT_module();
		sel41 : composite_selector_without_memory_2(success_failure_node_19, success_node_19);
		seqLink21 : composite_sequence_without_memory_2(sel40, sel41);
		seqLink32 : composite_sequence_without_memory_2(seqLink20, seqLink21);
		success_failure_node_20 : success_failure_node_20_module(randomizer_stage_21);
		success_node_20 : success_DEFAULT_module();
		sel42 : composite_selector_without_memory_2(success_failure_node_20, success_node_20);
		success_failure_node_21 : success_failure_node_21_module(randomizer_stage_22);
		success_node_21 : success_DEFAULT_module();
		sel0 : composite_selector_without_memory_2(success_failure_node_21, success_node_21);
		success_failure_node_22 : success_failure_node_22_module(randomizer_stage_23);
		success_node_22 : success_DEFAULT_module();
		sel1 : composite_selector_without_memory_2(success_failure_node_22, success_node_22);
		seqLink1 : composite_sequence_without_memory_2(sel0, sel1);
		seqLink22 : composite_sequence_without_memory_2(sel42, seqLink1);
		success_failure_node_23 : success_failure_node_23_module(randomizer_stage_24);
		success_node_23 : success_DEFAULT_module();
		sel2 : composite_selector_without_memory_2(success_failure_node_23, success_node_23);
		success_failure_node_24 : success_failure_node_24_module(randomizer_stage_25);
		success_node_24 : success_DEFAULT_module();
		sel3 : composite_selector_without_memory_2(success_failure_node_24, success_node_24);
		seqLink2 : composite_sequence_without_memory_2(sel2, sel3);
		success_failure_node_25 : success_failure_node_25_module(randomizer_stage_26);
		success_node_25 : success_DEFAULT_module();
		sel4 : composite_selector_without_memory_2(success_failure_node_25, success_node_25);
		success_failure_node_26 : success_failure_node_26_module(randomizer_stage_27);
		success_node_26 : success_DEFAULT_module();
		sel5 : composite_selector_without_memory_2(success_failure_node_26, success_node_26);
		seqLink3 : composite_sequence_without_memory_2(sel4, sel5);
		seqLink23 : composite_sequence_without_memory_2(seqLink2, seqLink3);
		seqLink33 : composite_sequence_without_memory_2(seqLink22, seqLink23);
		seqLink38 : composite_sequence_without_memory_2(seqLink32, seqLink33);
		success_failure_node_27 : success_failure_node_27_module(randomizer_stage_28);
		success_node_27 : success_DEFAULT_module();
		sel6 : composite_selector_without_memory_2(success_failure_node_27, success_node_27);
		success_failure_node_28 : success_failure_node_28_module(randomizer_stage_29);
		success_node_28 : success_DEFAULT_module();
		sel7 : composite_selector_without_memory_2(success_failure_node_28, success_node_28);
		seqLink4 : composite_sequence_without_memory_2(sel6, sel7);
		success_failure_node_29 : success_failure_node_29_module(randomizer_stage_30);
		success_node_29 : success_DEFAULT_module();
		sel8 : composite_selector_without_memory_2(success_failure_node_29, success_node_29);
		success_failure_node_30 : success_failure_node_30_module(randomizer_stage_31);
		success_node_30 : success_DEFAULT_module();
		sel9 : composite_selector_without_memory_2(success_failure_node_30, success_node_30);
		seqLink5 : composite_sequence_without_memory_2(sel8, sel9);
		seqLink24 : composite_sequence_without_memory_2(seqLink4, seqLink5);
		success_failure_node_31 : success_failure_node_31_module(randomizer_stage_32);
		success_node_31 : success_DEFAULT_module();
		sel10 : composite_selector_without_memory_2(success_failure_node_31, success_node_31);
		success_failure_node_32 : success_failure_node_32_module(randomizer_stage_33);
		success_node_32 : success_DEFAULT_module();
		sel11 : composite_selector_without_memory_2(success_failure_node_32, success_node_32);
		seqLink6 : composite_sequence_without_memory_2(sel10, sel11);
		success_failure_node_33 : success_failure_node_33_module(randomizer_stage_34);
		success_node_33 : success_DEFAULT_module();
		sel12 : composite_selector_without_memory_2(success_failure_node_33, success_node_33);
		success_failure_node_34 : success_failure_node_34_module(randomizer_stage_35);
		success_node_34 : success_DEFAULT_module();
		sel13 : composite_selector_without_memory_2(success_failure_node_34, success_node_34);
		seqLink7 : composite_sequence_without_memory_2(sel12, sel13);
		seqLink25 : composite_sequence_without_memory_2(seqLink6, seqLink7);
		seqLink34 : composite_sequence_without_memory_2(seqLink24, seqLink25);
		success_failure_node_35 : success_failure_node_35_module(randomizer_stage_36);
		success_node_35 : success_DEFAULT_module();
		sel14 : composite_selector_without_memory_2(success_failure_node_35, success_node_35);
		success_failure_node_36 : success_failure_node_36_module(randomizer_stage_37);
		success_node_36 : success_DEFAULT_module();
		sel15 : composite_selector_without_memory_2(success_failure_node_36, success_node_36);
		seqLink8 : composite_sequence_without_memory_2(sel14, sel15);
		success_failure_node_37 : success_failure_node_37_module(randomizer_stage_38);
		success_node_37 : success_DEFAULT_module();
		sel16 : composite_selector_without_memory_2(success_failure_node_37, success_node_37);
		success_failure_node_38 : success_failure_node_38_module(randomizer_stage_39);
		success_node_38 : success_DEFAULT_module();
		sel17 : composite_selector_without_memory_2(success_failure_node_38, success_node_38);
		seqLink9 : composite_sequence_without_memory_2(sel16, sel17);
		seqLink26 : composite_sequence_without_memory_2(seqLink8, seqLink9);
		success_failure_node_39 : success_failure_node_39_module(randomizer_stage_40);
		success_node_39 : success_DEFAULT_module();
		sel18 : composite_selector_without_memory_2(success_failure_node_39, success_node_39);
		success_failure_node_40 : success_failure_node_40_module(randomizer_stage_41);
		success_node_40 : success_DEFAULT_module();
		sel19 : composite_selector_without_memory_2(success_failure_node_40, success_node_40);
		seqLink10 : composite_sequence_without_memory_2(sel18, sel19);
		success_failure_node_41 : success_failure_node_41_module(randomizer_stage_42);
		success_node_41 : success_DEFAULT_module();
		sel20 : composite_selector_without_memory_2(success_failure_node_41, success_node_41);
		success_failure_node_42 : success_failure_node_42_module(randomizer_stage_43);
		success_node_42 : success_DEFAULT_module();
		sel21 : composite_selector_without_memory_2(success_failure_node_42, success_node_42);
		seqLink11 : composite_sequence_without_memory_2(sel20, sel21);
		seqLink27 : composite_sequence_without_memory_2(seqLink10, seqLink11);
		seqLink35 : composite_sequence_without_memory_2(seqLink26, seqLink27);
		seqLink39 : composite_sequence_without_memory_2(seqLink34, seqLink35);
		seqLink41 : composite_sequence_without_memory_2(seqLink38, seqLink39);
		seqLink42 : composite_sequence_without_memory_2(seqLink40, seqLink41);
		--START OF BLACKBOARD VARIABLES DECLARATION
		randomizer_stage_1 : boolean;
		randomizer_stage_2 : boolean;
		randomizer_stage_3 : boolean;
		randomizer_stage_4 : boolean;
		randomizer_stage_5 : boolean;
		randomizer_stage_6 : boolean;
		randomizer_stage_7 : boolean;
		randomizer_stage_8 : boolean;
		randomizer_stage_9 : boolean;
		randomizer_stage_10 : boolean;
		randomizer_stage_11 : boolean;
		randomizer_stage_12 : boolean;
		randomizer_stage_13 : boolean;
		randomizer_stage_14 : boolean;
		randomizer_stage_15 : boolean;
		randomizer_stage_16 : boolean;
		randomizer_stage_17 : boolean;
		randomizer_stage_18 : boolean;
		randomizer_stage_19 : boolean;
		randomizer_stage_20 : boolean;
		randomizer_stage_21 : boolean;
		randomizer_stage_22 : boolean;
		randomizer_stage_23 : boolean;
		randomizer_stage_24 : boolean;
		randomizer_stage_25 : boolean;
		randomizer_stage_26 : boolean;
		randomizer_stage_27 : boolean;
		randomizer_stage_28 : boolean;
		randomizer_stage_29 : boolean;
		randomizer_stage_30 : boolean;
		randomizer_stage_31 : boolean;
		randomizer_stage_32 : boolean;
		randomizer_stage_33 : boolean;
		randomizer_stage_34 : boolean;
		randomizer_stage_35 : boolean;
		randomizer_stage_36 : boolean;
		randomizer_stage_37 : boolean;
		randomizer_stage_38 : boolean;
		randomizer_stage_39 : boolean;
		randomizer_stage_40 : boolean;
		randomizer_stage_41 : boolean;
		randomizer_stage_42 : boolean;
		randomizer_stage_43 : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(randomizer_stage_1) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(randomizer_stage_1) := 
			case
				next(!(success_failure_node.active)) : LINK_TO_PREVIOUS_FINAL_randomizer;
				!(TRUE) : randomizer_stage_0;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_2 := 
			case
				!(success_failure_node_1.active) : randomizer_stage_1;
				!(TRUE) : randomizer_stage_1;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_3 := 
			case
				!(success_failure_node_2.active) : randomizer_stage_2;
				!(TRUE) : randomizer_stage_2;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_4 := 
			case
				!(success_failure_node_3.active) : randomizer_stage_3;
				!(TRUE) : randomizer_stage_3;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_5 := 
			case
				!(success_failure_node_4.active) : randomizer_stage_4;
				!(TRUE) : randomizer_stage_4;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_6 := 
			case
				!(success_failure_node_5.active) : randomizer_stage_5;
				!(TRUE) : randomizer_stage_5;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_7 := 
			case
				!(success_failure_node_6.active) : randomizer_stage_6;
				!(TRUE) : randomizer_stage_6;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_8 := 
			case
				!(success_failure_node_7.active) : randomizer_stage_7;
				!(TRUE) : randomizer_stage_7;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_9 := 
			case
				!(success_failure_node_8.active) : randomizer_stage_8;
				!(TRUE) : randomizer_stage_8;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_10 := 
			case
				!(success_failure_node_9.active) : randomizer_stage_9;
				!(TRUE) : randomizer_stage_9;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_11 := 
			case
				!(success_failure_node_10.active) : randomizer_stage_10;
				!(TRUE) : randomizer_stage_10;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_12 := 
			case
				!(success_failure_node_11.active) : randomizer_stage_11;
				!(TRUE) : randomizer_stage_11;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_13 := 
			case
				!(success_failure_node_12.active) : randomizer_stage_12;
				!(TRUE) : randomizer_stage_12;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_14 := 
			case
				!(success_failure_node_13.active) : randomizer_stage_13;
				!(TRUE) : randomizer_stage_13;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_15 := 
			case
				!(success_failure_node_14.active) : randomizer_stage_14;
				!(TRUE) : randomizer_stage_14;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_16 := 
			case
				!(success_failure_node_15.active) : randomizer_stage_15;
				!(TRUE) : randomizer_stage_15;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_17 := 
			case
				!(success_failure_node_16.active) : randomizer_stage_16;
				!(TRUE) : randomizer_stage_16;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_18 := 
			case
				!(success_failure_node_17.active) : randomizer_stage_17;
				!(TRUE) : randomizer_stage_17;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_19 := 
			case
				!(success_failure_node_18.active) : randomizer_stage_18;
				!(TRUE) : randomizer_stage_18;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_20 := 
			case
				!(success_failure_node_19.active) : randomizer_stage_19;
				!(TRUE) : randomizer_stage_19;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_21 := 
			case
				!(success_failure_node_20.active) : randomizer_stage_20;
				!(TRUE) : randomizer_stage_20;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_22 := 
			case
				!(success_failure_node_21.active) : randomizer_stage_21;
				!(TRUE) : randomizer_stage_21;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_23 := 
			case
				!(success_failure_node_22.active) : randomizer_stage_22;
				!(TRUE) : randomizer_stage_22;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_24 := 
			case
				!(success_failure_node_23.active) : randomizer_stage_23;
				!(TRUE) : randomizer_stage_23;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_25 := 
			case
				!(success_failure_node_24.active) : randomizer_stage_24;
				!(TRUE) : randomizer_stage_24;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_26 := 
			case
				!(success_failure_node_25.active) : randomizer_stage_25;
				!(TRUE) : randomizer_stage_25;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_27 := 
			case
				!(success_failure_node_26.active) : randomizer_stage_26;
				!(TRUE) : randomizer_stage_26;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_28 := 
			case
				!(success_failure_node_27.active) : randomizer_stage_27;
				!(TRUE) : randomizer_stage_27;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_29 := 
			case
				!(success_failure_node_28.active) : randomizer_stage_28;
				!(TRUE) : randomizer_stage_28;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_30 := 
			case
				!(success_failure_node_29.active) : randomizer_stage_29;
				!(TRUE) : randomizer_stage_29;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_31 := 
			case
				!(success_failure_node_30.active) : randomizer_stage_30;
				!(TRUE) : randomizer_stage_30;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_32 := 
			case
				!(success_failure_node_31.active) : randomizer_stage_31;
				!(TRUE) : randomizer_stage_31;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_33 := 
			case
				!(success_failure_node_32.active) : randomizer_stage_32;
				!(TRUE) : randomizer_stage_32;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_34 := 
			case
				!(success_failure_node_33.active) : randomizer_stage_33;
				!(TRUE) : randomizer_stage_33;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_35 := 
			case
				!(success_failure_node_34.active) : randomizer_stage_34;
				!(TRUE) : randomizer_stage_34;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_36 := 
			case
				!(success_failure_node_35.active) : randomizer_stage_35;
				!(TRUE) : randomizer_stage_35;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_37 := 
			case
				!(success_failure_node_36.active) : randomizer_stage_36;
				!(TRUE) : randomizer_stage_36;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_38 := 
			case
				!(success_failure_node_37.active) : randomizer_stage_37;
				!(TRUE) : randomizer_stage_37;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_39 := 
			case
				!(success_failure_node_38.active) : randomizer_stage_38;
				!(TRUE) : randomizer_stage_38;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_40 := 
			case
				!(success_failure_node_39.active) : randomizer_stage_39;
				!(TRUE) : randomizer_stage_39;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_41 := 
			case
				!(success_failure_node_40.active) : randomizer_stage_40;
				!(TRUE) : randomizer_stage_40;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_42 := 
			case
				!(success_failure_node_41.active) : randomizer_stage_41;
				!(TRUE) : randomizer_stage_41;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_43 := 
			case
				!(success_failure_node_42.active) : randomizer_stage_42;
				!(TRUE) : randomizer_stage_42;
				TRUE : {TRUE, FALSE};
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

INVARSPEC ((success_failure_node.status = failure) -> (success_node.status = success));
INVARSPEC ((success_failure_node.status = failure) -> !((success_node.status = success)));
INVARSPEC ((success_failure_node_1.status = failure) -> (success_node_1.status = success));
INVARSPEC ((success_failure_node_1.status = failure) -> !((success_node_1.status = success)));
INVARSPEC ((success_failure_node_2.status = failure) -> (success_node_2.status = success));
INVARSPEC ((success_failure_node_2.status = failure) -> !((success_node_2.status = success)));
INVARSPEC ((success_failure_node_3.status = failure) -> (success_node_3.status = success));
INVARSPEC ((success_failure_node_3.status = failure) -> !((success_node_3.status = success)));
INVARSPEC ((success_failure_node_4.status = failure) -> (success_node_4.status = success));
INVARSPEC ((success_failure_node_4.status = failure) -> !((success_node_4.status = success)));
INVARSPEC ((success_failure_node_5.status = failure) -> (success_node_5.status = success));
INVARSPEC ((success_failure_node_5.status = failure) -> !((success_node_5.status = success)));
INVARSPEC ((success_failure_node_6.status = failure) -> (success_node_6.status = success));
INVARSPEC ((success_failure_node_6.status = failure) -> !((success_node_6.status = success)));
INVARSPEC ((success_failure_node_7.status = failure) -> (success_node_7.status = success));
INVARSPEC ((success_failure_node_7.status = failure) -> !((success_node_7.status = success)));
INVARSPEC ((success_failure_node_8.status = failure) -> (success_node_8.status = success));
INVARSPEC ((success_failure_node_8.status = failure) -> !((success_node_8.status = success)));
INVARSPEC ((success_failure_node_9.status = failure) -> (success_node_9.status = success));
INVARSPEC ((success_failure_node_9.status = failure) -> !((success_node_9.status = success)));
INVARSPEC ((success_failure_node_10.status = failure) -> (success_node_10.status = success));
INVARSPEC ((success_failure_node_10.status = failure) -> !((success_node_10.status = success)));
INVARSPEC ((success_failure_node_11.status = failure) -> (success_node_11.status = success));
INVARSPEC ((success_failure_node_11.status = failure) -> !((success_node_11.status = success)));
INVARSPEC ((success_failure_node_12.status = failure) -> (success_node_12.status = success));
INVARSPEC ((success_failure_node_12.status = failure) -> !((success_node_12.status = success)));
INVARSPEC ((success_failure_node_13.status = failure) -> (success_node_13.status = success));
INVARSPEC ((success_failure_node_13.status = failure) -> !((success_node_13.status = success)));
INVARSPEC ((success_failure_node_14.status = failure) -> (success_node_14.status = success));
INVARSPEC ((success_failure_node_14.status = failure) -> !((success_node_14.status = success)));
INVARSPEC ((success_failure_node_15.status = failure) -> (success_node_15.status = success));
INVARSPEC ((success_failure_node_15.status = failure) -> !((success_node_15.status = success)));
INVARSPEC ((success_failure_node_16.status = failure) -> (success_node_16.status = success));
INVARSPEC ((success_failure_node_16.status = failure) -> !((success_node_16.status = success)));
INVARSPEC ((success_failure_node_17.status = failure) -> (success_node_17.status = success));
INVARSPEC ((success_failure_node_17.status = failure) -> !((success_node_17.status = success)));
INVARSPEC ((success_failure_node_18.status = failure) -> (success_node_18.status = success));
INVARSPEC ((success_failure_node_18.status = failure) -> !((success_node_18.status = success)));
INVARSPEC ((success_failure_node_19.status = failure) -> (success_node_19.status = success));
INVARSPEC ((success_failure_node_19.status = failure) -> !((success_node_19.status = success)));
INVARSPEC ((success_failure_node_20.status = failure) -> (success_node_20.status = success));
INVARSPEC ((success_failure_node_20.status = failure) -> !((success_node_20.status = success)));
INVARSPEC ((success_failure_node_21.status = failure) -> (success_node_21.status = success));
INVARSPEC ((success_failure_node_21.status = failure) -> !((success_node_21.status = success)));
INVARSPEC ((success_failure_node_22.status = failure) -> (success_node_22.status = success));
INVARSPEC ((success_failure_node_22.status = failure) -> !((success_node_22.status = success)));
INVARSPEC ((success_failure_node_23.status = failure) -> (success_node_23.status = success));
INVARSPEC ((success_failure_node_23.status = failure) -> !((success_node_23.status = success)));
INVARSPEC ((success_failure_node_24.status = failure) -> (success_node_24.status = success));
INVARSPEC ((success_failure_node_24.status = failure) -> !((success_node_24.status = success)));
INVARSPEC ((success_failure_node_25.status = failure) -> (success_node_25.status = success));
INVARSPEC ((success_failure_node_25.status = failure) -> !((success_node_25.status = success)));
INVARSPEC ((success_failure_node_26.status = failure) -> (success_node_26.status = success));
INVARSPEC ((success_failure_node_26.status = failure) -> !((success_node_26.status = success)));
INVARSPEC ((success_failure_node_27.status = failure) -> (success_node_27.status = success));
INVARSPEC ((success_failure_node_27.status = failure) -> !((success_node_27.status = success)));
INVARSPEC ((success_failure_node_28.status = failure) -> (success_node_28.status = success));
INVARSPEC ((success_failure_node_28.status = failure) -> !((success_node_28.status = success)));
INVARSPEC ((success_failure_node_29.status = failure) -> (success_node_29.status = success));
INVARSPEC ((success_failure_node_29.status = failure) -> !((success_node_29.status = success)));
INVARSPEC ((success_failure_node_30.status = failure) -> (success_node_30.status = success));
INVARSPEC ((success_failure_node_30.status = failure) -> !((success_node_30.status = success)));
INVARSPEC ((success_failure_node_31.status = failure) -> (success_node_31.status = success));
INVARSPEC ((success_failure_node_31.status = failure) -> !((success_node_31.status = success)));
INVARSPEC ((success_failure_node_32.status = failure) -> (success_node_32.status = success));
INVARSPEC ((success_failure_node_32.status = failure) -> !((success_node_32.status = success)));
INVARSPEC ((success_failure_node_33.status = failure) -> (success_node_33.status = success));
INVARSPEC ((success_failure_node_33.status = failure) -> !((success_node_33.status = success)));
INVARSPEC ((success_failure_node_34.status = failure) -> (success_node_34.status = success));
INVARSPEC ((success_failure_node_34.status = failure) -> !((success_node_34.status = success)));
INVARSPEC ((success_failure_node_35.status = failure) -> (success_node_35.status = success));
INVARSPEC ((success_failure_node_35.status = failure) -> !((success_node_35.status = success)));
INVARSPEC ((success_failure_node_36.status = failure) -> (success_node_36.status = success));
INVARSPEC ((success_failure_node_36.status = failure) -> !((success_node_36.status = success)));
INVARSPEC ((success_failure_node_37.status = failure) -> (success_node_37.status = success));
INVARSPEC ((success_failure_node_37.status = failure) -> !((success_node_37.status = success)));
INVARSPEC ((success_failure_node_38.status = failure) -> (success_node_38.status = success));
INVARSPEC ((success_failure_node_38.status = failure) -> !((success_node_38.status = success)));
INVARSPEC ((success_failure_node_39.status = failure) -> (success_node_39.status = success));
INVARSPEC ((success_failure_node_39.status = failure) -> !((success_node_39.status = success)));
INVARSPEC ((success_failure_node_40.status = failure) -> (success_node_40.status = success));
INVARSPEC ((success_failure_node_40.status = failure) -> !((success_node_40.status = success)));
INVARSPEC ((success_failure_node_41.status = failure) -> (success_node_41.status = success));
INVARSPEC ((success_failure_node_41.status = failure) -> !((success_node_41.status = success)));
INVARSPEC ((success_failure_node_42.status = failure) -> (success_node_42.status = success));
INVARSPEC ((success_failure_node_42.status = failure) -> !((success_node_42.status = success)));
MODULE define_nodes
	DEFINE
		seqLink42 := 0;
		seqLink40 := 1;
		seqLink36 := 2;
		seqLink28 := 3;
		seqLink12 := 4;
		sel22 := 5;
		success_failure_node := 6;
		success_node := 7;
		sel23 := 8;
		success_failure_node_1 := 9;
		success_node_1 := 10;
		seqLink13 := 11;
		sel24 := 12;
		success_failure_node_2 := 13;
		success_node_2 := 14;
		sel25 := 15;
		success_failure_node_3 := 16;
		success_node_3 := 17;
		seqLink29 := 18;
		seqLink14 := 19;
		sel26 := 20;
		success_failure_node_4 := 21;
		success_node_4 := 22;
		sel27 := 23;
		success_failure_node_5 := 24;
		success_node_5 := 25;
		seqLink15 := 26;
		sel28 := 27;
		success_failure_node_6 := 28;
		success_node_6 := 29;
		sel29 := 30;
		success_failure_node_7 := 31;
		success_node_7 := 32;
		seqLink37 := 33;
		seqLink30 := 34;
		seqLink16 := 35;
		sel30 := 36;
		success_failure_node_8 := 37;
		success_node_8 := 38;
		sel31 := 39;
		success_failure_node_9 := 40;
		success_node_9 := 41;
		seqLink17 := 42;
		sel32 := 43;
		success_failure_node_10 := 44;
		success_node_10 := 45;
		sel33 := 46;
		success_failure_node_11 := 47;
		success_node_11 := 48;
		seqLink31 := 49;
		seqLink18 := 50;
		sel34 := 51;
		success_failure_node_12 := 52;
		success_node_12 := 53;
		sel35 := 54;
		success_failure_node_13 := 55;
		success_node_13 := 56;
		seqLink19 := 57;
		sel36 := 58;
		success_failure_node_14 := 59;
		success_node_14 := 60;
		sel37 := 61;
		success_failure_node_15 := 62;
		success_node_15 := 63;
		seqLink41 := 64;
		seqLink38 := 65;
		seqLink32 := 66;
		seqLink20 := 67;
		sel38 := 68;
		success_failure_node_16 := 69;
		success_node_16 := 70;
		sel39 := 71;
		success_failure_node_17 := 72;
		success_node_17 := 73;
		seqLink21 := 74;
		sel40 := 75;
		success_failure_node_18 := 76;
		success_node_18 := 77;
		sel41 := 78;
		success_failure_node_19 := 79;
		success_node_19 := 80;
		seqLink33 := 81;
		seqLink22 := 82;
		sel42 := 83;
		success_failure_node_20 := 84;
		success_node_20 := 85;
		seqLink1 := 86;
		sel0 := 87;
		success_failure_node_21 := 88;
		success_node_21 := 89;
		sel1 := 90;
		success_failure_node_22 := 91;
		success_node_22 := 92;
		seqLink23 := 93;
		seqLink2 := 94;
		sel2 := 95;
		success_failure_node_23 := 96;
		success_node_23 := 97;
		sel3 := 98;
		success_failure_node_24 := 99;
		success_node_24 := 100;
		seqLink3 := 101;
		sel4 := 102;
		success_failure_node_25 := 103;
		success_node_25 := 104;
		sel5 := 105;
		success_failure_node_26 := 106;
		success_node_26 := 107;
		seqLink39 := 108;
		seqLink34 := 109;
		seqLink24 := 110;
		seqLink4 := 111;
		sel6 := 112;
		success_failure_node_27 := 113;
		success_node_27 := 114;
		sel7 := 115;
		success_failure_node_28 := 116;
		success_node_28 := 117;
		seqLink5 := 118;
		sel8 := 119;
		success_failure_node_29 := 120;
		success_node_29 := 121;
		sel9 := 122;
		success_failure_node_30 := 123;
		success_node_30 := 124;
		seqLink25 := 125;
		seqLink6 := 126;
		sel10 := 127;
		success_failure_node_31 := 128;
		success_node_31 := 129;
		sel11 := 130;
		success_failure_node_32 := 131;
		success_node_32 := 132;
		seqLink7 := 133;
		sel12 := 134;
		success_failure_node_33 := 135;
		success_node_33 := 136;
		sel13 := 137;
		success_failure_node_34 := 138;
		success_node_34 := 139;
		seqLink35 := 140;
		seqLink26 := 141;
		seqLink8 := 142;
		sel14 := 143;
		success_failure_node_35 := 144;
		success_node_35 := 145;
		sel15 := 146;
		success_failure_node_36 := 147;
		success_node_36 := 148;
		seqLink9 := 149;
		sel16 := 150;
		success_failure_node_37 := 151;
		success_node_37 := 152;
		sel17 := 153;
		success_failure_node_38 := 154;
		success_node_38 := 155;
		seqLink27 := 156;
		seqLink10 := 157;
		sel18 := 158;
		success_failure_node_39 := 159;
		success_node_39 := 160;
		sel19 := 161;
		success_failure_node_40 := 162;
		success_node_40 := 163;
		seqLink11 := 164;
		sel20 := 165;
		success_failure_node_41 := 166;
		success_node_41 := 167;
		sel21 := 168;
		success_failure_node_42 := 169;
		success_node_42 := 170;
MODULE composite_sequence_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				!(child_0.status = success) : child_0.status;
				!(child_1.status = success) : child_1.status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = success;
MODULE composite_selector_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				!(child_0.status = failure) : child_0.status;
				!(child_1.status = failure) : child_1.status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE success_failure_node_module(randomizer_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_1 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_1_module(randomizer_stage_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_2 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_2_module(randomizer_stage_3)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_3 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_3_module(randomizer_stage_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_4 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_4_module(randomizer_stage_5)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_5 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_5_module(randomizer_stage_6)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_6 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_6_module(randomizer_stage_7)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_7 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_7_module(randomizer_stage_8)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_8 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_8_module(randomizer_stage_9)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_9 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_9_module(randomizer_stage_10)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_10 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_10_module(randomizer_stage_11)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_11 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_11_module(randomizer_stage_12)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_12 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_12_module(randomizer_stage_13)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_13 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_13_module(randomizer_stage_14)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_14 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_14_module(randomizer_stage_15)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_15 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_15_module(randomizer_stage_16)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_16 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_16_module(randomizer_stage_17)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_17 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_17_module(randomizer_stage_18)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_18 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_18_module(randomizer_stage_19)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_19 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_19_module(randomizer_stage_20)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_20 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_20_module(randomizer_stage_21)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_21 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_21_module(randomizer_stage_22)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_22 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_22_module(randomizer_stage_23)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_23 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_23_module(randomizer_stage_24)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_24 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_24_module(randomizer_stage_25)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_25 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_25_module(randomizer_stage_26)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_26 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_26_module(randomizer_stage_27)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_27 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_27_module(randomizer_stage_28)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_28 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_28_module(randomizer_stage_29)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_29 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_29_module(randomizer_stage_30)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_30 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_30_module(randomizer_stage_31)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_31 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_31_module(randomizer_stage_32)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_32 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_32_module(randomizer_stage_33)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_33 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_33_module(randomizer_stage_34)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_34 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_34_module(randomizer_stage_35)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_35 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_35_module(randomizer_stage_36)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_36 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_36_module(randomizer_stage_37)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_37 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_37_module(randomizer_stage_38)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_38 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_38_module(randomizer_stage_39)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_39 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_39_module(randomizer_stage_40)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_40 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_40_module(randomizer_stage_41)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_41 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_41_module(randomizer_stage_42)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_42 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_42_module(randomizer_stage_43)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_43 : success;
				TRUE : failure;
			esac;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? success : invalid;
