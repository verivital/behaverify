MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__seqLink22 := -3;
		seqLink22.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		success_failure_node : success_failure_node_module(randomizer_stage_1);
		success_node : success_DEFAULT_module();
		sel14 : composite_selector_without_memory_2(success_failure_node, success_node);
		success_failure_node_1 : success_failure_node_1_module(randomizer_stage_2);
		success_node_1 : success_DEFAULT_module();
		sel15 : composite_selector_without_memory_2(success_failure_node_1, success_node_1);
		seqLink8 : composite_sequence_without_memory_2(sel14, sel15);
		success_failure_node_2 : success_failure_node_2_module(randomizer_stage_3);
		success_node_2 : success_DEFAULT_module();
		sel16 : composite_selector_without_memory_2(success_failure_node_2, success_node_2);
		success_failure_node_3 : success_failure_node_3_module(randomizer_stage_4);
		success_node_3 : success_DEFAULT_module();
		sel17 : composite_selector_without_memory_2(success_failure_node_3, success_node_3);
		seqLink9 : composite_sequence_without_memory_2(sel16, sel17);
		seqLink16 : composite_sequence_without_memory_2(seqLink8, seqLink9);
		success_failure_node_4 : success_failure_node_4_module(randomizer_stage_5);
		success_node_4 : success_DEFAULT_module();
		sel18 : composite_selector_without_memory_2(success_failure_node_4, success_node_4);
		success_failure_node_5 : success_failure_node_5_module(randomizer_stage_6);
		success_node_5 : success_DEFAULT_module();
		sel19 : composite_selector_without_memory_2(success_failure_node_5, success_node_5);
		seqLink10 : composite_sequence_without_memory_2(sel18, sel19);
		success_failure_node_6 : success_failure_node_6_module(randomizer_stage_7);
		success_node_6 : success_DEFAULT_module();
		sel20 : composite_selector_without_memory_2(success_failure_node_6, success_node_6);
		success_failure_node_7 : success_failure_node_7_module(randomizer_stage_8);
		success_node_7 : success_DEFAULT_module();
		sel21 : composite_selector_without_memory_2(success_failure_node_7, success_node_7);
		seqLink11 : composite_sequence_without_memory_2(sel20, sel21);
		seqLink17 : composite_sequence_without_memory_2(seqLink10, seqLink11);
		seqLink20 : composite_sequence_without_memory_2(seqLink16, seqLink17);
		success_failure_node_8 : success_failure_node_8_module(randomizer_stage_9);
		success_node_8 : success_DEFAULT_module();
		sel22 : composite_selector_without_memory_2(success_failure_node_8, success_node_8);
		success_failure_node_9 : success_failure_node_9_module(randomizer_stage_10);
		success_node_9 : success_DEFAULT_module();
		sel0 : composite_selector_without_memory_2(success_failure_node_9, success_node_9);
		success_failure_node_10 : success_failure_node_10_module(randomizer_stage_11);
		success_node_10 : success_DEFAULT_module();
		sel1 : composite_selector_without_memory_2(success_failure_node_10, success_node_10);
		seqLink1 : composite_sequence_without_memory_2(sel0, sel1);
		seqLink12 : composite_sequence_without_memory_2(sel22, seqLink1);
		success_failure_node_11 : success_failure_node_11_module(randomizer_stage_12);
		success_node_11 : success_DEFAULT_module();
		sel2 : composite_selector_without_memory_2(success_failure_node_11, success_node_11);
		success_failure_node_12 : success_failure_node_12_module(randomizer_stage_13);
		success_node_12 : success_DEFAULT_module();
		sel3 : composite_selector_without_memory_2(success_failure_node_12, success_node_12);
		seqLink2 : composite_sequence_without_memory_2(sel2, sel3);
		success_failure_node_13 : success_failure_node_13_module(randomizer_stage_14);
		success_node_13 : success_DEFAULT_module();
		sel4 : composite_selector_without_memory_2(success_failure_node_13, success_node_13);
		success_failure_node_14 : success_failure_node_14_module(randomizer_stage_15);
		success_node_14 : success_DEFAULT_module();
		sel5 : composite_selector_without_memory_2(success_failure_node_14, success_node_14);
		seqLink3 : composite_sequence_without_memory_2(sel4, sel5);
		seqLink13 : composite_sequence_without_memory_2(seqLink2, seqLink3);
		seqLink18 : composite_sequence_without_memory_2(seqLink12, seqLink13);
		success_failure_node_15 : success_failure_node_15_module(randomizer_stage_16);
		success_node_15 : success_DEFAULT_module();
		sel6 : composite_selector_without_memory_2(success_failure_node_15, success_node_15);
		success_failure_node_16 : success_failure_node_16_module(randomizer_stage_17);
		success_node_16 : success_DEFAULT_module();
		sel7 : composite_selector_without_memory_2(success_failure_node_16, success_node_16);
		seqLink4 : composite_sequence_without_memory_2(sel6, sel7);
		success_failure_node_17 : success_failure_node_17_module(randomizer_stage_18);
		success_node_17 : success_DEFAULT_module();
		sel8 : composite_selector_without_memory_2(success_failure_node_17, success_node_17);
		success_failure_node_18 : success_failure_node_18_module(randomizer_stage_19);
		success_node_18 : success_DEFAULT_module();
		sel9 : composite_selector_without_memory_2(success_failure_node_18, success_node_18);
		seqLink5 : composite_sequence_without_memory_2(sel8, sel9);
		seqLink14 : composite_sequence_without_memory_2(seqLink4, seqLink5);
		success_failure_node_19 : success_failure_node_19_module(randomizer_stage_20);
		success_node_19 : success_DEFAULT_module();
		sel10 : composite_selector_without_memory_2(success_failure_node_19, success_node_19);
		success_failure_node_20 : success_failure_node_20_module(randomizer_stage_21);
		success_node_20 : success_DEFAULT_module();
		sel11 : composite_selector_without_memory_2(success_failure_node_20, success_node_20);
		seqLink6 : composite_sequence_without_memory_2(sel10, sel11);
		success_failure_node_21 : success_failure_node_21_module(randomizer_stage_22);
		success_node_21 : success_DEFAULT_module();
		sel12 : composite_selector_without_memory_2(success_failure_node_21, success_node_21);
		success_failure_node_22 : success_failure_node_22_module(randomizer_stage_23);
		success_node_22 : success_DEFAULT_module();
		sel13 : composite_selector_without_memory_2(success_failure_node_22, success_node_22);
		seqLink7 : composite_sequence_without_memory_2(sel12, sel13);
		seqLink15 : composite_sequence_without_memory_2(seqLink6, seqLink7);
		seqLink19 : composite_sequence_without_memory_2(seqLink14, seqLink15);
		seqLink21 : composite_sequence_without_memory_2(seqLink18, seqLink19);
		seqLink22 : composite_sequence_without_memory_2(seqLink20, seqLink21);
		--START OF BLACKBOARD VARIABLES DECLARATION
		randomizer_stage_0 : boolean;
		randomizer_stage_1 : boolean;
		randomizer_stage_2 : boolean;
		randomizer_stage_3 : boolean;
		randomizer_stage_4 : boolean;
		randomizer_stage_5 : boolean;
		randomizer_stage_6 : boolean;
		randomizer_stage_7 : boolean;
		randomizer_stage_8 : boolean;
		randomizer_stage_9 : boolean;
		randomizer_stage_10 : boolean;
		randomizer_stage_11 : boolean;
		randomizer_stage_12 : boolean;
		randomizer_stage_13 : boolean;
		randomizer_stage_14 : boolean;
		randomizer_stage_15 : boolean;
		randomizer_stage_16 : boolean;
		randomizer_stage_17 : boolean;
		randomizer_stage_18 : boolean;
		randomizer_stage_19 : boolean;
		randomizer_stage_20 : boolean;
		randomizer_stage_21 : boolean;
		randomizer_stage_22 : boolean;
		randomizer_stage_23 : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(randomizer_stage_0) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(randomizer_stage_0) := randomizer_stage_23;
		randomizer_stage_1 := 
			case
				!(success_failure_node.active) : randomizer_stage_0;
				!(TRUE) : randomizer_stage_0;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_2 := 
			case
				!(success_failure_node_1.active) : randomizer_stage_1;
				!(TRUE) : randomizer_stage_1;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_3 := 
			case
				!(success_failure_node_2.active) : randomizer_stage_2;
				!(TRUE) : randomizer_stage_2;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_4 := 
			case
				!(success_failure_node_3.active) : randomizer_stage_3;
				!(TRUE) : randomizer_stage_3;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_5 := 
			case
				!(success_failure_node_4.active) : randomizer_stage_4;
				!(TRUE) : randomizer_stage_4;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_6 := 
			case
				!(success_failure_node_5.active) : randomizer_stage_5;
				!(TRUE) : randomizer_stage_5;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_7 := 
			case
				!(success_failure_node_6.active) : randomizer_stage_6;
				!(TRUE) : randomizer_stage_6;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_8 := 
			case
				!(success_failure_node_7.active) : randomizer_stage_7;
				!(TRUE) : randomizer_stage_7;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_9 := 
			case
				!(success_failure_node_8.active) : randomizer_stage_8;
				!(TRUE) : randomizer_stage_8;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_10 := 
			case
				!(success_failure_node_9.active) : randomizer_stage_9;
				!(TRUE) : randomizer_stage_9;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_11 := 
			case
				!(success_failure_node_10.active) : randomizer_stage_10;
				!(TRUE) : randomizer_stage_10;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_12 := 
			case
				!(success_failure_node_11.active) : randomizer_stage_11;
				!(TRUE) : randomizer_stage_11;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_13 := 
			case
				!(success_failure_node_12.active) : randomizer_stage_12;
				!(TRUE) : randomizer_stage_12;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_14 := 
			case
				!(success_failure_node_13.active) : randomizer_stage_13;
				!(TRUE) : randomizer_stage_13;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_15 := 
			case
				!(success_failure_node_14.active) : randomizer_stage_14;
				!(TRUE) : randomizer_stage_14;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_16 := 
			case
				!(success_failure_node_15.active) : randomizer_stage_15;
				!(TRUE) : randomizer_stage_15;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_17 := 
			case
				!(success_failure_node_16.active) : randomizer_stage_16;
				!(TRUE) : randomizer_stage_16;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_18 := 
			case
				!(success_failure_node_17.active) : randomizer_stage_17;
				!(TRUE) : randomizer_stage_17;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_19 := 
			case
				!(success_failure_node_18.active) : randomizer_stage_18;
				!(TRUE) : randomizer_stage_18;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_20 := 
			case
				!(success_failure_node_19.active) : randomizer_stage_19;
				!(TRUE) : randomizer_stage_19;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_21 := 
			case
				!(success_failure_node_20.active) : randomizer_stage_20;
				!(TRUE) : randomizer_stage_20;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_22 := 
			case
				!(success_failure_node_21.active) : randomizer_stage_21;
				!(TRUE) : randomizer_stage_21;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_23 := 
			case
				!(success_failure_node_22.active) : randomizer_stage_22;
				!(TRUE) : randomizer_stage_22;
				TRUE : {TRUE, FALSE};
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

INVARSPEC ((success_failure_node.status = failure) -> (success_node.status = success));
INVARSPEC ((success_failure_node.status = failure) -> !((success_node.status = success)));
INVARSPEC ((success_failure_node_1.status = failure) -> (success_node_1.status = success));
INVARSPEC ((success_failure_node_1.status = failure) -> !((success_node_1.status = success)));
INVARSPEC ((success_failure_node_2.status = failure) -> (success_node_2.status = success));
INVARSPEC ((success_failure_node_2.status = failure) -> !((success_node_2.status = success)));
INVARSPEC ((success_failure_node_3.status = failure) -> (success_node_3.status = success));
INVARSPEC ((success_failure_node_3.status = failure) -> !((success_node_3.status = success)));
INVARSPEC ((success_failure_node_4.status = failure) -> (success_node_4.status = success));
INVARSPEC ((success_failure_node_4.status = failure) -> !((success_node_4.status = success)));
INVARSPEC ((success_failure_node_5.status = failure) -> (success_node_5.status = success));
INVARSPEC ((success_failure_node_5.status = failure) -> !((success_node_5.status = success)));
INVARSPEC ((success_failure_node_6.status = failure) -> (success_node_6.status = success));
INVARSPEC ((success_failure_node_6.status = failure) -> !((success_node_6.status = success)));
INVARSPEC ((success_failure_node_7.status = failure) -> (success_node_7.status = success));
INVARSPEC ((success_failure_node_7.status = failure) -> !((success_node_7.status = success)));
INVARSPEC ((success_failure_node_8.status = failure) -> (success_node_8.status = success));
INVARSPEC ((success_failure_node_8.status = failure) -> !((success_node_8.status = success)));
INVARSPEC ((success_failure_node_9.status = failure) -> (success_node_9.status = success));
INVARSPEC ((success_failure_node_9.status = failure) -> !((success_node_9.status = success)));
INVARSPEC ((success_failure_node_10.status = failure) -> (success_node_10.status = success));
INVARSPEC ((success_failure_node_10.status = failure) -> !((success_node_10.status = success)));
INVARSPEC ((success_failure_node_11.status = failure) -> (success_node_11.status = success));
INVARSPEC ((success_failure_node_11.status = failure) -> !((success_node_11.status = success)));
INVARSPEC ((success_failure_node_12.status = failure) -> (success_node_12.status = success));
INVARSPEC ((success_failure_node_12.status = failure) -> !((success_node_12.status = success)));
INVARSPEC ((success_failure_node_13.status = failure) -> (success_node_13.status = success));
INVARSPEC ((success_failure_node_13.status = failure) -> !((success_node_13.status = success)));
INVARSPEC ((success_failure_node_14.status = failure) -> (success_node_14.status = success));
INVARSPEC ((success_failure_node_14.status = failure) -> !((success_node_14.status = success)));
INVARSPEC ((success_failure_node_15.status = failure) -> (success_node_15.status = success));
INVARSPEC ((success_failure_node_15.status = failure) -> !((success_node_15.status = success)));
INVARSPEC ((success_failure_node_16.status = failure) -> (success_node_16.status = success));
INVARSPEC ((success_failure_node_16.status = failure) -> !((success_node_16.status = success)));
INVARSPEC ((success_failure_node_17.status = failure) -> (success_node_17.status = success));
INVARSPEC ((success_failure_node_17.status = failure) -> !((success_node_17.status = success)));
INVARSPEC ((success_failure_node_18.status = failure) -> (success_node_18.status = success));
INVARSPEC ((success_failure_node_18.status = failure) -> !((success_node_18.status = success)));
INVARSPEC ((success_failure_node_19.status = failure) -> (success_node_19.status = success));
INVARSPEC ((success_failure_node_19.status = failure) -> !((success_node_19.status = success)));
INVARSPEC ((success_failure_node_20.status = failure) -> (success_node_20.status = success));
INVARSPEC ((success_failure_node_20.status = failure) -> !((success_node_20.status = success)));
INVARSPEC ((success_failure_node_21.status = failure) -> (success_node_21.status = success));
INVARSPEC ((success_failure_node_21.status = failure) -> !((success_node_21.status = success)));
INVARSPEC ((success_failure_node_22.status = failure) -> (success_node_22.status = success));
INVARSPEC ((success_failure_node_22.status = failure) -> !((success_node_22.status = success)));
MODULE define_nodes
	DEFINE
		seqLink22 := 0;
		seqLink20 := 1;
		seqLink16 := 2;
		seqLink8 := 3;
		sel14 := 4;
		success_failure_node := 5;
		success_node := 6;
		sel15 := 7;
		success_failure_node_1 := 8;
		success_node_1 := 9;
		seqLink9 := 10;
		sel16 := 11;
		success_failure_node_2 := 12;
		success_node_2 := 13;
		sel17 := 14;
		success_failure_node_3 := 15;
		success_node_3 := 16;
		seqLink17 := 17;
		seqLink10 := 18;
		sel18 := 19;
		success_failure_node_4 := 20;
		success_node_4 := 21;
		sel19 := 22;
		success_failure_node_5 := 23;
		success_node_5 := 24;
		seqLink11 := 25;
		sel20 := 26;
		success_failure_node_6 := 27;
		success_node_6 := 28;
		sel21 := 29;
		success_failure_node_7 := 30;
		success_node_7 := 31;
		seqLink21 := 32;
		seqLink18 := 33;
		seqLink12 := 34;
		sel22 := 35;
		success_failure_node_8 := 36;
		success_node_8 := 37;
		seqLink1 := 38;
		sel0 := 39;
		success_failure_node_9 := 40;
		success_node_9 := 41;
		sel1 := 42;
		success_failure_node_10 := 43;
		success_node_10 := 44;
		seqLink13 := 45;
		seqLink2 := 46;
		sel2 := 47;
		success_failure_node_11 := 48;
		success_node_11 := 49;
		sel3 := 50;
		success_failure_node_12 := 51;
		success_node_12 := 52;
		seqLink3 := 53;
		sel4 := 54;
		success_failure_node_13 := 55;
		success_node_13 := 56;
		sel5 := 57;
		success_failure_node_14 := 58;
		success_node_14 := 59;
		seqLink19 := 60;
		seqLink14 := 61;
		seqLink4 := 62;
		sel6 := 63;
		success_failure_node_15 := 64;
		success_node_15 := 65;
		sel7 := 66;
		success_failure_node_16 := 67;
		success_node_16 := 68;
		seqLink5 := 69;
		sel8 := 70;
		success_failure_node_17 := 71;
		success_node_17 := 72;
		sel9 := 73;
		success_failure_node_18 := 74;
		success_node_18 := 75;
		seqLink15 := 76;
		seqLink6 := 77;
		sel10 := 78;
		success_failure_node_19 := 79;
		success_node_19 := 80;
		sel11 := 81;
		success_failure_node_20 := 82;
		success_node_20 := 83;
		seqLink7 := 84;
		sel12 := 85;
		success_failure_node_21 := 86;
		success_node_21 := 87;
		sel13 := 88;
		success_failure_node_22 := 89;
		success_node_22 := 90;
MODULE composite_selector_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE composite_sequence_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = success;
MODULE success_failure_node_module(randomizer_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_1 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_1_module(randomizer_stage_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_2 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_2_module(randomizer_stage_3)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_3 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_3_module(randomizer_stage_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_4 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_4_module(randomizer_stage_5)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_5 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_5_module(randomizer_stage_6)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_6 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_6_module(randomizer_stage_7)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_7 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_7_module(randomizer_stage_8)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_8 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_8_module(randomizer_stage_9)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_9 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_9_module(randomizer_stage_10)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_10 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_10_module(randomizer_stage_11)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_11 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_11_module(randomizer_stage_12)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_12 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_12_module(randomizer_stage_13)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_13 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_13_module(randomizer_stage_14)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_14 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_14_module(randomizer_stage_15)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_15 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_15_module(randomizer_stage_16)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_16 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_16_module(randomizer_stage_17)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_17 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_17_module(randomizer_stage_18)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_18 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_18_module(randomizer_stage_19)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_19 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_19_module(randomizer_stage_20)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_20 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_20_module(randomizer_stage_21)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_21 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_21_module(randomizer_stage_22)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_22 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_22_module(randomizer_stage_23)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_23 : success;
				TRUE : failure;
			esac;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
