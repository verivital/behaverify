MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__seqLink3 := -3;
		seqLink3.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		randomizer_stage_0 := randomizer_stage_1;
		LINK_TO_PREVIOUS_FINAL_randomizer := randomizer_stage_4;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		success_failure_node : success_failure_node_module(randomizer_stage_1);
		success_node : success_DEFAULT_module();
		sel0 : composite_selector_without_memory_2(success_failure_node, success_node);
		success_failure_node_1 : success_failure_node_1_module(randomizer_stage_2);
		success_node_1 : success_DEFAULT_module();
		sel1 : composite_selector_without_memory_2(success_failure_node_1, success_node_1);
		seqLink1 : composite_sequence_without_memory_2(sel0, sel1);
		success_failure_node_2 : success_failure_node_2_module(randomizer_stage_3);
		success_node_2 : success_DEFAULT_module();
		sel2 : composite_selector_without_memory_2(success_failure_node_2, success_node_2);
		success_failure_node_3 : success_failure_node_3_module(randomizer_stage_4);
		success_node_3 : success_DEFAULT_module();
		sel3 : composite_selector_without_memory_2(success_failure_node_3, success_node_3);
		seqLink2 : composite_sequence_without_memory_2(sel2, sel3);
		seqLink3 : composite_sequence_without_memory_2(seqLink1, seqLink2);
		--START OF BLACKBOARD VARIABLES DECLARATION
		randomizer_stage_1 : boolean;
		randomizer_stage_2 : boolean;
		randomizer_stage_3 : boolean;
		randomizer_stage_4 : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(randomizer_stage_1) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(randomizer_stage_1) := 
			case
				next(!(success_failure_node.active)) : LINK_TO_PREVIOUS_FINAL_randomizer;
				!(TRUE) : randomizer_stage_0;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_2 := 
			case
				!(success_failure_node_1.active) : randomizer_stage_1;
				!(TRUE) : randomizer_stage_1;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_3 := 
			case
				!(success_failure_node_2.active) : randomizer_stage_2;
				!(TRUE) : randomizer_stage_2;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_4 := 
			case
				!(success_failure_node_3.active) : randomizer_stage_3;
				!(TRUE) : randomizer_stage_3;
				TRUE : {TRUE, FALSE};
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

INVARSPEC ((success_failure_node.status = failure) -> (success_node.status = success));
INVARSPEC ((success_failure_node.status = failure) -> !((success_node.status = success)));
INVARSPEC ((success_failure_node_1.status = failure) -> (success_node_1.status = success));
INVARSPEC ((success_failure_node_1.status = failure) -> !((success_node_1.status = success)));
INVARSPEC ((success_failure_node_2.status = failure) -> (success_node_2.status = success));
INVARSPEC ((success_failure_node_2.status = failure) -> !((success_node_2.status = success)));
INVARSPEC ((success_failure_node_3.status = failure) -> (success_node_3.status = success));
INVARSPEC ((success_failure_node_3.status = failure) -> !((success_node_3.status = success)));
MODULE define_nodes
	DEFINE
		seqLink3 := 0;
		seqLink1 := 1;
		sel0 := 2;
		success_failure_node := 3;
		success_node := 4;
		sel1 := 5;
		success_failure_node_1 := 6;
		success_node_1 := 7;
		seqLink2 := 8;
		sel2 := 9;
		success_failure_node_2 := 10;
		success_node_2 := 11;
		sel3 := 12;
		success_failure_node_3 := 13;
		success_node_3 := 14;
MODULE composite_sequence_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := (child_0.internal_status = success) & (child_0.active);
MODULE composite_selector_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := (child_0.internal_status = failure) & (child_0.active);
MODULE success_failure_node_module(randomizer_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_1 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_1_module(randomizer_stage_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_2 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_2_module(randomizer_stage_3)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_3 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_3_module(randomizer_stage_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_4 : success;
				TRUE : failure;
			esac;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
