MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__parLink24 := -3;
		resume_from_here_in_subtree__parLink22 := -3;
		resume_from_here_in_subtree__parLink18 := -3;
		resume_from_here_in_subtree__parLink10 := -3;
		resume_from_here_in_subtree__sel18 := -3;
		resume_from_here_in_subtree__sel19 := -3;
		resume_from_here_in_subtree__parLink11 := -3;
		resume_from_here_in_subtree__sel20 := -3;
		resume_from_here_in_subtree__sel21 := -3;
		resume_from_here_in_subtree__parLink19 := -3;
		resume_from_here_in_subtree__parLink12 := -3;
		resume_from_here_in_subtree__sel22 := -3;
		resume_from_here_in_subtree__sel23 := -3;
		resume_from_here_in_subtree__parLink13 := -3;
		resume_from_here_in_subtree__sel24 := -3;
		resume_from_here_in_subtree__parLink1 := -3;
		resume_from_here_in_subtree__sel0 := -3;
		resume_from_here_in_subtree__sel1 := -3;
		resume_from_here_in_subtree__parLink23 := -3;
		resume_from_here_in_subtree__parLink20 := -3;
		resume_from_here_in_subtree__parLink14 := -3;
		resume_from_here_in_subtree__parLink2 := -3;
		resume_from_here_in_subtree__sel2 := -3;
		resume_from_here_in_subtree__sel3 := -3;
		resume_from_here_in_subtree__parLink3 := -3;
		resume_from_here_in_subtree__sel4 := -3;
		resume_from_here_in_subtree__sel5 := -3;
		resume_from_here_in_subtree__parLink15 := -3;
		resume_from_here_in_subtree__parLink4 := -3;
		resume_from_here_in_subtree__sel6 := -3;
		resume_from_here_in_subtree__sel7 := -3;
		resume_from_here_in_subtree__parLink5 := -3;
		resume_from_here_in_subtree__sel8 := -3;
		resume_from_here_in_subtree__sel9 := -3;
		resume_from_here_in_subtree__parLink21 := -3;
		resume_from_here_in_subtree__parLink16 := -3;
		resume_from_here_in_subtree__parLink6 := -3;
		resume_from_here_in_subtree__sel10 := -3;
		resume_from_here_in_subtree__sel11 := -3;
		resume_from_here_in_subtree__parLink7 := -3;
		resume_from_here_in_subtree__sel12 := -3;
		resume_from_here_in_subtree__sel13 := -3;
		resume_from_here_in_subtree__parLink17 := -3;
		resume_from_here_in_subtree__parLink8 := -3;
		resume_from_here_in_subtree__sel14 := -3;
		resume_from_here_in_subtree__sel15 := -3;
		resume_from_here_in_subtree__parLink9 := -3;
		resume_from_here_in_subtree__sel16 := -3;
		resume_from_here_in_subtree__sel17 := -3;
		parLink24.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		randomizer_stage_0 := randomizer_stage_1;
		LINK_TO_PREVIOUS_FINAL_randomizer := randomizer_stage_25;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		success_failure_node : success_failure_node_module(randomizer_stage_1);
		success_node : success_DEFAULT_module();
		sel18 : composite_selector_without_memory(sel18_1, success_failure_node);
		sel18_1 : composite_selector_without_memory(sel18_END, success_node);
		sel18_END : composite_selector_without_memory_END;
		success_failure_node_1 : success_failure_node_1_module(randomizer_stage_2);
		success_node_1 : success_DEFAULT_module();
		sel19 : composite_selector_without_memory(sel19_1, success_failure_node_1);
		sel19_1 : composite_selector_without_memory(sel19_END, success_node_1);
		sel19_END : composite_selector_without_memory_END;
		parLink10 : composite_parallel_without_memory(parLink10_1, sel18, FALSE);
		parLink10_1 : composite_parallel_without_memory(parLink10_END, sel19, FALSE);
		parLink10_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_2 : success_failure_node_2_module(randomizer_stage_3);
		success_node_2 : success_DEFAULT_module();
		sel20 : composite_selector_without_memory(sel20_1, success_failure_node_2);
		sel20_1 : composite_selector_without_memory(sel20_END, success_node_2);
		sel20_END : composite_selector_without_memory_END;
		success_failure_node_3 : success_failure_node_3_module(randomizer_stage_4);
		success_node_3 : success_DEFAULT_module();
		sel21 : composite_selector_without_memory(sel21_1, success_failure_node_3);
		sel21_1 : composite_selector_without_memory(sel21_END, success_node_3);
		sel21_END : composite_selector_without_memory_END;
		parLink11 : composite_parallel_without_memory(parLink11_1, sel20, FALSE);
		parLink11_1 : composite_parallel_without_memory(parLink11_END, sel21, FALSE);
		parLink11_END : composite_parallel_without_memory_END(FALSE);
		parLink18 : composite_parallel_without_memory(parLink18_1, parLink10, FALSE);
		parLink18_1 : composite_parallel_without_memory(parLink18_END, parLink11, FALSE);
		parLink18_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_4 : success_failure_node_4_module(randomizer_stage_5);
		success_node_4 : success_DEFAULT_module();
		sel22 : composite_selector_without_memory(sel22_1, success_failure_node_4);
		sel22_1 : composite_selector_without_memory(sel22_END, success_node_4);
		sel22_END : composite_selector_without_memory_END;
		success_failure_node_5 : success_failure_node_5_module(randomizer_stage_6);
		success_node_5 : success_DEFAULT_module();
		sel23 : composite_selector_without_memory(sel23_1, success_failure_node_5);
		sel23_1 : composite_selector_without_memory(sel23_END, success_node_5);
		sel23_END : composite_selector_without_memory_END;
		parLink12 : composite_parallel_without_memory(parLink12_1, sel22, FALSE);
		parLink12_1 : composite_parallel_without_memory(parLink12_END, sel23, FALSE);
		parLink12_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_6 : success_failure_node_6_module(randomizer_stage_7);
		success_node_6 : success_DEFAULT_module();
		sel24 : composite_selector_without_memory(sel24_1, success_failure_node_6);
		sel24_1 : composite_selector_without_memory(sel24_END, success_node_6);
		sel24_END : composite_selector_without_memory_END;
		success_failure_node_7 : success_failure_node_7_module(randomizer_stage_8);
		success_node_7 : success_DEFAULT_module();
		sel0 : composite_selector_without_memory(sel0_1, success_failure_node_7);
		sel0_1 : composite_selector_without_memory(sel0_END, success_node_7);
		sel0_END : composite_selector_without_memory_END;
		success_failure_node_8 : success_failure_node_8_module(randomizer_stage_9);
		success_node_8 : success_DEFAULT_module();
		sel1 : composite_selector_without_memory(sel1_1, success_failure_node_8);
		sel1_1 : composite_selector_without_memory(sel1_END, success_node_8);
		sel1_END : composite_selector_without_memory_END;
		parLink1 : composite_parallel_without_memory(parLink1_1, sel0, FALSE);
		parLink1_1 : composite_parallel_without_memory(parLink1_END, sel1, FALSE);
		parLink1_END : composite_parallel_without_memory_END(FALSE);
		parLink13 : composite_parallel_without_memory(parLink13_1, sel24, FALSE);
		parLink13_1 : composite_parallel_without_memory(parLink13_END, parLink1, FALSE);
		parLink13_END : composite_parallel_without_memory_END(FALSE);
		parLink19 : composite_parallel_without_memory(parLink19_1, parLink12, FALSE);
		parLink19_1 : composite_parallel_without_memory(parLink19_END, parLink13, FALSE);
		parLink19_END : composite_parallel_without_memory_END(FALSE);
		parLink22 : composite_parallel_without_memory(parLink22_1, parLink18, FALSE);
		parLink22_1 : composite_parallel_without_memory(parLink22_END, parLink19, FALSE);
		parLink22_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_9 : success_failure_node_9_module(randomizer_stage_10);
		success_node_9 : success_DEFAULT_module();
		sel2 : composite_selector_without_memory(sel2_1, success_failure_node_9);
		sel2_1 : composite_selector_without_memory(sel2_END, success_node_9);
		sel2_END : composite_selector_without_memory_END;
		success_failure_node_10 : success_failure_node_10_module(randomizer_stage_11);
		success_node_10 : success_DEFAULT_module();
		sel3 : composite_selector_without_memory(sel3_1, success_failure_node_10);
		sel3_1 : composite_selector_without_memory(sel3_END, success_node_10);
		sel3_END : composite_selector_without_memory_END;
		parLink2 : composite_parallel_without_memory(parLink2_1, sel2, FALSE);
		parLink2_1 : composite_parallel_without_memory(parLink2_END, sel3, FALSE);
		parLink2_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_11 : success_failure_node_11_module(randomizer_stage_12);
		success_node_11 : success_DEFAULT_module();
		sel4 : composite_selector_without_memory(sel4_1, success_failure_node_11);
		sel4_1 : composite_selector_without_memory(sel4_END, success_node_11);
		sel4_END : composite_selector_without_memory_END;
		success_failure_node_12 : success_failure_node_12_module(randomizer_stage_13);
		success_node_12 : success_DEFAULT_module();
		sel5 : composite_selector_without_memory(sel5_1, success_failure_node_12);
		sel5_1 : composite_selector_without_memory(sel5_END, success_node_12);
		sel5_END : composite_selector_without_memory_END;
		parLink3 : composite_parallel_without_memory(parLink3_1, sel4, FALSE);
		parLink3_1 : composite_parallel_without_memory(parLink3_END, sel5, FALSE);
		parLink3_END : composite_parallel_without_memory_END(FALSE);
		parLink14 : composite_parallel_without_memory(parLink14_1, parLink2, FALSE);
		parLink14_1 : composite_parallel_without_memory(parLink14_END, parLink3, FALSE);
		parLink14_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_13 : success_failure_node_13_module(randomizer_stage_14);
		success_node_13 : success_DEFAULT_module();
		sel6 : composite_selector_without_memory(sel6_1, success_failure_node_13);
		sel6_1 : composite_selector_without_memory(sel6_END, success_node_13);
		sel6_END : composite_selector_without_memory_END;
		success_failure_node_14 : success_failure_node_14_module(randomizer_stage_15);
		success_node_14 : success_DEFAULT_module();
		sel7 : composite_selector_without_memory(sel7_1, success_failure_node_14);
		sel7_1 : composite_selector_without_memory(sel7_END, success_node_14);
		sel7_END : composite_selector_without_memory_END;
		parLink4 : composite_parallel_without_memory(parLink4_1, sel6, FALSE);
		parLink4_1 : composite_parallel_without_memory(parLink4_END, sel7, FALSE);
		parLink4_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_15 : success_failure_node_15_module(randomizer_stage_16);
		success_node_15 : success_DEFAULT_module();
		sel8 : composite_selector_without_memory(sel8_1, success_failure_node_15);
		sel8_1 : composite_selector_without_memory(sel8_END, success_node_15);
		sel8_END : composite_selector_without_memory_END;
		success_failure_node_16 : success_failure_node_16_module(randomizer_stage_17);
		success_node_16 : success_DEFAULT_module();
		sel9 : composite_selector_without_memory(sel9_1, success_failure_node_16);
		sel9_1 : composite_selector_without_memory(sel9_END, success_node_16);
		sel9_END : composite_selector_without_memory_END;
		parLink5 : composite_parallel_without_memory(parLink5_1, sel8, FALSE);
		parLink5_1 : composite_parallel_without_memory(parLink5_END, sel9, FALSE);
		parLink5_END : composite_parallel_without_memory_END(FALSE);
		parLink15 : composite_parallel_without_memory(parLink15_1, parLink4, FALSE);
		parLink15_1 : composite_parallel_without_memory(parLink15_END, parLink5, FALSE);
		parLink15_END : composite_parallel_without_memory_END(FALSE);
		parLink20 : composite_parallel_without_memory(parLink20_1, parLink14, FALSE);
		parLink20_1 : composite_parallel_without_memory(parLink20_END, parLink15, FALSE);
		parLink20_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_17 : success_failure_node_17_module(randomizer_stage_18);
		success_node_17 : success_DEFAULT_module();
		sel10 : composite_selector_without_memory(sel10_1, success_failure_node_17);
		sel10_1 : composite_selector_without_memory(sel10_END, success_node_17);
		sel10_END : composite_selector_without_memory_END;
		success_failure_node_18 : success_failure_node_18_module(randomizer_stage_19);
		success_node_18 : success_DEFAULT_module();
		sel11 : composite_selector_without_memory(sel11_1, success_failure_node_18);
		sel11_1 : composite_selector_without_memory(sel11_END, success_node_18);
		sel11_END : composite_selector_without_memory_END;
		parLink6 : composite_parallel_without_memory(parLink6_1, sel10, FALSE);
		parLink6_1 : composite_parallel_without_memory(parLink6_END, sel11, FALSE);
		parLink6_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_19 : success_failure_node_19_module(randomizer_stage_20);
		success_node_19 : success_DEFAULT_module();
		sel12 : composite_selector_without_memory(sel12_1, success_failure_node_19);
		sel12_1 : composite_selector_without_memory(sel12_END, success_node_19);
		sel12_END : composite_selector_without_memory_END;
		success_failure_node_20 : success_failure_node_20_module(randomizer_stage_21);
		success_node_20 : success_DEFAULT_module();
		sel13 : composite_selector_without_memory(sel13_1, success_failure_node_20);
		sel13_1 : composite_selector_without_memory(sel13_END, success_node_20);
		sel13_END : composite_selector_without_memory_END;
		parLink7 : composite_parallel_without_memory(parLink7_1, sel12, FALSE);
		parLink7_1 : composite_parallel_without_memory(parLink7_END, sel13, FALSE);
		parLink7_END : composite_parallel_without_memory_END(FALSE);
		parLink16 : composite_parallel_without_memory(parLink16_1, parLink6, FALSE);
		parLink16_1 : composite_parallel_without_memory(parLink16_END, parLink7, FALSE);
		parLink16_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_21 : success_failure_node_21_module(randomizer_stage_22);
		success_node_21 : success_DEFAULT_module();
		sel14 : composite_selector_without_memory(sel14_1, success_failure_node_21);
		sel14_1 : composite_selector_without_memory(sel14_END, success_node_21);
		sel14_END : composite_selector_without_memory_END;
		success_failure_node_22 : success_failure_node_22_module(randomizer_stage_23);
		success_node_22 : success_DEFAULT_module();
		sel15 : composite_selector_without_memory(sel15_1, success_failure_node_22);
		sel15_1 : composite_selector_without_memory(sel15_END, success_node_22);
		sel15_END : composite_selector_without_memory_END;
		parLink8 : composite_parallel_without_memory(parLink8_1, sel14, FALSE);
		parLink8_1 : composite_parallel_without_memory(parLink8_END, sel15, FALSE);
		parLink8_END : composite_parallel_without_memory_END(FALSE);
		success_failure_node_23 : success_failure_node_23_module(randomizer_stage_24);
		success_node_23 : success_DEFAULT_module();
		sel16 : composite_selector_without_memory(sel16_1, success_failure_node_23);
		sel16_1 : composite_selector_without_memory(sel16_END, success_node_23);
		sel16_END : composite_selector_without_memory_END;
		success_failure_node_24 : success_failure_node_24_module(randomizer_stage_25);
		success_node_24 : success_DEFAULT_module();
		sel17 : composite_selector_without_memory(sel17_1, success_failure_node_24);
		sel17_1 : composite_selector_without_memory(sel17_END, success_node_24);
		sel17_END : composite_selector_without_memory_END;
		parLink9 : composite_parallel_without_memory(parLink9_1, sel16, FALSE);
		parLink9_1 : composite_parallel_without_memory(parLink9_END, sel17, FALSE);
		parLink9_END : composite_parallel_without_memory_END(FALSE);
		parLink17 : composite_parallel_without_memory(parLink17_1, parLink8, FALSE);
		parLink17_1 : composite_parallel_without_memory(parLink17_END, parLink9, FALSE);
		parLink17_END : composite_parallel_without_memory_END(FALSE);
		parLink21 : composite_parallel_without_memory(parLink21_1, parLink16, FALSE);
		parLink21_1 : composite_parallel_without_memory(parLink21_END, parLink17, FALSE);
		parLink21_END : composite_parallel_without_memory_END(FALSE);
		parLink23 : composite_parallel_without_memory(parLink23_1, parLink20, FALSE);
		parLink23_1 : composite_parallel_without_memory(parLink23_END, parLink21, FALSE);
		parLink23_END : composite_parallel_without_memory_END(FALSE);
		parLink24 : composite_parallel_without_memory(parLink24_1, parLink22, FALSE);
		parLink24_1 : composite_parallel_without_memory(parLink24_END, parLink23, FALSE);
		parLink24_END : composite_parallel_without_memory_END(FALSE);
		--START OF BLACKBOARD VARIABLES DECLARATION
		randomizer_stage_1 : boolean;
		randomizer_stage_2 : boolean;
		randomizer_stage_3 : boolean;
		randomizer_stage_4 : boolean;
		randomizer_stage_5 : boolean;
		randomizer_stage_6 : boolean;
		randomizer_stage_7 : boolean;
		randomizer_stage_8 : boolean;
		randomizer_stage_9 : boolean;
		randomizer_stage_10 : boolean;
		randomizer_stage_11 : boolean;
		randomizer_stage_12 : boolean;
		randomizer_stage_13 : boolean;
		randomizer_stage_14 : boolean;
		randomizer_stage_15 : boolean;
		randomizer_stage_16 : boolean;
		randomizer_stage_17 : boolean;
		randomizer_stage_18 : boolean;
		randomizer_stage_19 : boolean;
		randomizer_stage_20 : boolean;
		randomizer_stage_21 : boolean;
		randomizer_stage_22 : boolean;
		randomizer_stage_23 : boolean;
		randomizer_stage_24 : boolean;
		randomizer_stage_25 : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(randomizer_stage_1) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(randomizer_stage_1) := 
			case
				next(!(success_failure_node.active)) : LINK_TO_PREVIOUS_FINAL_randomizer;
				!(TRUE) : randomizer_stage_0;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_2 := 
			case
				!(success_failure_node_1.active) : randomizer_stage_1;
				!(TRUE) : randomizer_stage_1;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_3 := 
			case
				!(success_failure_node_2.active) : randomizer_stage_2;
				!(TRUE) : randomizer_stage_2;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_4 := 
			case
				!(success_failure_node_3.active) : randomizer_stage_3;
				!(TRUE) : randomizer_stage_3;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_5 := 
			case
				!(success_failure_node_4.active) : randomizer_stage_4;
				!(TRUE) : randomizer_stage_4;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_6 := 
			case
				!(success_failure_node_5.active) : randomizer_stage_5;
				!(TRUE) : randomizer_stage_5;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_7 := 
			case
				!(success_failure_node_6.active) : randomizer_stage_6;
				!(TRUE) : randomizer_stage_6;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_8 := 
			case
				!(success_failure_node_7.active) : randomizer_stage_7;
				!(TRUE) : randomizer_stage_7;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_9 := 
			case
				!(success_failure_node_8.active) : randomizer_stage_8;
				!(TRUE) : randomizer_stage_8;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_10 := 
			case
				!(success_failure_node_9.active) : randomizer_stage_9;
				!(TRUE) : randomizer_stage_9;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_11 := 
			case
				!(success_failure_node_10.active) : randomizer_stage_10;
				!(TRUE) : randomizer_stage_10;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_12 := 
			case
				!(success_failure_node_11.active) : randomizer_stage_11;
				!(TRUE) : randomizer_stage_11;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_13 := 
			case
				!(success_failure_node_12.active) : randomizer_stage_12;
				!(TRUE) : randomizer_stage_12;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_14 := 
			case
				!(success_failure_node_13.active) : randomizer_stage_13;
				!(TRUE) : randomizer_stage_13;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_15 := 
			case
				!(success_failure_node_14.active) : randomizer_stage_14;
				!(TRUE) : randomizer_stage_14;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_16 := 
			case
				!(success_failure_node_15.active) : randomizer_stage_15;
				!(TRUE) : randomizer_stage_15;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_17 := 
			case
				!(success_failure_node_16.active) : randomizer_stage_16;
				!(TRUE) : randomizer_stage_16;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_18 := 
			case
				!(success_failure_node_17.active) : randomizer_stage_17;
				!(TRUE) : randomizer_stage_17;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_19 := 
			case
				!(success_failure_node_18.active) : randomizer_stage_18;
				!(TRUE) : randomizer_stage_18;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_20 := 
			case
				!(success_failure_node_19.active) : randomizer_stage_19;
				!(TRUE) : randomizer_stage_19;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_21 := 
			case
				!(success_failure_node_20.active) : randomizer_stage_20;
				!(TRUE) : randomizer_stage_20;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_22 := 
			case
				!(success_failure_node_21.active) : randomizer_stage_21;
				!(TRUE) : randomizer_stage_21;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_23 := 
			case
				!(success_failure_node_22.active) : randomizer_stage_22;
				!(TRUE) : randomizer_stage_22;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_24 := 
			case
				!(success_failure_node_23.active) : randomizer_stage_23;
				!(TRUE) : randomizer_stage_23;
				TRUE : {TRUE, FALSE};
			esac;
		randomizer_stage_25 := 
			case
				!(success_failure_node_24.active) : randomizer_stage_24;
				!(TRUE) : randomizer_stage_24;
				TRUE : {TRUE, FALSE};
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

INVARSPEC ((success_failure_node.status = failure) -> (success_node.status = success));
INVARSPEC ((success_failure_node.status = failure) -> !((success_node.status = success)));
INVARSPEC ((success_failure_node_1.status = failure) -> (success_node_1.status = success));
INVARSPEC ((success_failure_node_1.status = failure) -> !((success_node_1.status = success)));
INVARSPEC ((success_failure_node_2.status = failure) -> (success_node_2.status = success));
INVARSPEC ((success_failure_node_2.status = failure) -> !((success_node_2.status = success)));
INVARSPEC ((success_failure_node_3.status = failure) -> (success_node_3.status = success));
INVARSPEC ((success_failure_node_3.status = failure) -> !((success_node_3.status = success)));
INVARSPEC ((success_failure_node_4.status = failure) -> (success_node_4.status = success));
INVARSPEC ((success_failure_node_4.status = failure) -> !((success_node_4.status = success)));
INVARSPEC ((success_failure_node_5.status = failure) -> (success_node_5.status = success));
INVARSPEC ((success_failure_node_5.status = failure) -> !((success_node_5.status = success)));
INVARSPEC ((success_failure_node_6.status = failure) -> (success_node_6.status = success));
INVARSPEC ((success_failure_node_6.status = failure) -> !((success_node_6.status = success)));
INVARSPEC ((success_failure_node_7.status = failure) -> (success_node_7.status = success));
INVARSPEC ((success_failure_node_7.status = failure) -> !((success_node_7.status = success)));
INVARSPEC ((success_failure_node_8.status = failure) -> (success_node_8.status = success));
INVARSPEC ((success_failure_node_8.status = failure) -> !((success_node_8.status = success)));
INVARSPEC ((success_failure_node_9.status = failure) -> (success_node_9.status = success));
INVARSPEC ((success_failure_node_9.status = failure) -> !((success_node_9.status = success)));
INVARSPEC ((success_failure_node_10.status = failure) -> (success_node_10.status = success));
INVARSPEC ((success_failure_node_10.status = failure) -> !((success_node_10.status = success)));
INVARSPEC ((success_failure_node_11.status = failure) -> (success_node_11.status = success));
INVARSPEC ((success_failure_node_11.status = failure) -> !((success_node_11.status = success)));
INVARSPEC ((success_failure_node_12.status = failure) -> (success_node_12.status = success));
INVARSPEC ((success_failure_node_12.status = failure) -> !((success_node_12.status = success)));
INVARSPEC ((success_failure_node_13.status = failure) -> (success_node_13.status = success));
INVARSPEC ((success_failure_node_13.status = failure) -> !((success_node_13.status = success)));
INVARSPEC ((success_failure_node_14.status = failure) -> (success_node_14.status = success));
INVARSPEC ((success_failure_node_14.status = failure) -> !((success_node_14.status = success)));
INVARSPEC ((success_failure_node_15.status = failure) -> (success_node_15.status = success));
INVARSPEC ((success_failure_node_15.status = failure) -> !((success_node_15.status = success)));
INVARSPEC ((success_failure_node_16.status = failure) -> (success_node_16.status = success));
INVARSPEC ((success_failure_node_16.status = failure) -> !((success_node_16.status = success)));
INVARSPEC ((success_failure_node_17.status = failure) -> (success_node_17.status = success));
INVARSPEC ((success_failure_node_17.status = failure) -> !((success_node_17.status = success)));
INVARSPEC ((success_failure_node_18.status = failure) -> (success_node_18.status = success));
INVARSPEC ((success_failure_node_18.status = failure) -> !((success_node_18.status = success)));
INVARSPEC ((success_failure_node_19.status = failure) -> (success_node_19.status = success));
INVARSPEC ((success_failure_node_19.status = failure) -> !((success_node_19.status = success)));
INVARSPEC ((success_failure_node_20.status = failure) -> (success_node_20.status = success));
INVARSPEC ((success_failure_node_20.status = failure) -> !((success_node_20.status = success)));
INVARSPEC ((success_failure_node_21.status = failure) -> (success_node_21.status = success));
INVARSPEC ((success_failure_node_21.status = failure) -> !((success_node_21.status = success)));
INVARSPEC ((success_failure_node_22.status = failure) -> (success_node_22.status = success));
INVARSPEC ((success_failure_node_22.status = failure) -> !((success_node_22.status = success)));
INVARSPEC ((success_failure_node_23.status = failure) -> (success_node_23.status = success));
INVARSPEC ((success_failure_node_23.status = failure) -> !((success_node_23.status = success)));
INVARSPEC ((success_failure_node_24.status = failure) -> (success_node_24.status = success));
INVARSPEC ((success_failure_node_24.status = failure) -> !((success_node_24.status = success)));
MODULE define_nodes
	DEFINE
		parLink24 := 0;
		parLink22 := 1;
		parLink18 := 2;
		parLink10 := 3;
		sel18 := 4;
		success_failure_node := 5;
		success_node := 6;
		sel19 := 7;
		success_failure_node_1 := 8;
		success_node_1 := 9;
		parLink11 := 10;
		sel20 := 11;
		success_failure_node_2 := 12;
		success_node_2 := 13;
		sel21 := 14;
		success_failure_node_3 := 15;
		success_node_3 := 16;
		parLink19 := 17;
		parLink12 := 18;
		sel22 := 19;
		success_failure_node_4 := 20;
		success_node_4 := 21;
		sel23 := 22;
		success_failure_node_5 := 23;
		success_node_5 := 24;
		parLink13 := 25;
		sel24 := 26;
		success_failure_node_6 := 27;
		success_node_6 := 28;
		parLink1 := 29;
		sel0 := 30;
		success_failure_node_7 := 31;
		success_node_7 := 32;
		sel1 := 33;
		success_failure_node_8 := 34;
		success_node_8 := 35;
		parLink23 := 36;
		parLink20 := 37;
		parLink14 := 38;
		parLink2 := 39;
		sel2 := 40;
		success_failure_node_9 := 41;
		success_node_9 := 42;
		sel3 := 43;
		success_failure_node_10 := 44;
		success_node_10 := 45;
		parLink3 := 46;
		sel4 := 47;
		success_failure_node_11 := 48;
		success_node_11 := 49;
		sel5 := 50;
		success_failure_node_12 := 51;
		success_node_12 := 52;
		parLink15 := 53;
		parLink4 := 54;
		sel6 := 55;
		success_failure_node_13 := 56;
		success_node_13 := 57;
		sel7 := 58;
		success_failure_node_14 := 59;
		success_node_14 := 60;
		parLink5 := 61;
		sel8 := 62;
		success_failure_node_15 := 63;
		success_node_15 := 64;
		sel9 := 65;
		success_failure_node_16 := 66;
		success_node_16 := 67;
		parLink21 := 68;
		parLink16 := 69;
		parLink6 := 70;
		sel10 := 71;
		success_failure_node_17 := 72;
		success_node_17 := 73;
		sel11 := 74;
		success_failure_node_18 := 75;
		success_node_18 := 76;
		parLink7 := 77;
		sel12 := 78;
		success_failure_node_19 := 79;
		success_node_19 := 80;
		sel13 := 81;
		success_failure_node_20 := 82;
		success_node_20 := 83;
		parLink17 := 84;
		parLink8 := 85;
		sel14 := 86;
		success_failure_node_21 := 87;
		success_node_21 := 88;
		sel15 := 89;
		success_failure_node_22 := 90;
		success_node_22 := 91;
		parLink9 := 92;
		sel16 := 93;
		success_failure_node_23 := 94;
		success_node_23 := 95;
		sel17 := 96;
		success_failure_node_24 := 97;
		success_node_24 := 98;
MODULE composite_parallel_without_memory(next_composite, child, success_on_all)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child.internal_status = failure : failure;
				success_on_all & (child.internal_status = success) : next_composite.internal_status;
				success_on_all & (child.internal_status = running) : running;
				(child.internal_status = success) : success;
				TRUE : next_composite.internal_status;
			esac;
		child.active := active;
		next_composite.active := active;

MODULE composite_parallel_without_memory_END(success_on_all)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success_on_all ? success : running;
MODULE composite_selector_without_memory(next_composite, child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child.internal_status = failure : next_composite.internal_status;
				TRUE : child.internal_status;
			esac;
		child.active := active;
		next_composite.active := active & (child.internal_status = failure);

MODULE composite_selector_without_memory_END
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? failure : invalid;
		internal_status := failure;
MODULE success_failure_node_module(randomizer_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_1 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_1_module(randomizer_stage_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_2 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_2_module(randomizer_stage_3)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_3 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_3_module(randomizer_stage_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_4 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_4_module(randomizer_stage_5)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_5 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_5_module(randomizer_stage_6)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_6 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_6_module(randomizer_stage_7)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_7 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_7_module(randomizer_stage_8)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_8 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_8_module(randomizer_stage_9)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_9 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_9_module(randomizer_stage_10)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_10 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_10_module(randomizer_stage_11)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_11 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_11_module(randomizer_stage_12)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_12 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_12_module(randomizer_stage_13)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_13 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_13_module(randomizer_stage_14)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_14 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_14_module(randomizer_stage_15)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_15 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_15_module(randomizer_stage_16)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_16 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_16_module(randomizer_stage_17)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_17 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_17_module(randomizer_stage_18)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_18 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_18_module(randomizer_stage_19)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_19 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_19_module(randomizer_stage_20)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_20 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_20_module(randomizer_stage_21)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_21 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_21_module(randomizer_stage_22)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_22 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_22_module(randomizer_stage_23)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_23 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_23_module(randomizer_stage_24)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_24 : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_24_module(randomizer_stage_25)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				randomizer_stage_25 : success;
				TRUE : failure;
			esac;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
