MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__parLink1 := -3;
		resume_from_here_in_subtree__sel0 := -3;
		resume_from_here_in_subtree__sel1 := -3;
		child_index_to_resume_from__sel0 := -2;
		child_index_to_resume_from__sel1 := -2;
		status__success_failure_node := success_failure_node.status;
		status__success_node := success_node.status;
		status__sel0 := 
			case
				status__success_failure_node != failure : status__success_failure_node;
				status__success_node != failure : status__success_node;
				TRUE : failure;
			esac;
		status__success_failure_node_1 := success_failure_node_1.status;
		status__success_node_1 := success_node_1.status;
		status__sel1 := 
			case
				status__success_failure_node_1 != failure : status__success_failure_node_1;
				status__success_node_1 != failure : status__success_node_1;
				TRUE : failure;
			esac;
		status__parLink1 := 
			case
				(status__sel0 = failure) | (status__sel0 = invalid) : status__sel0;
				(status__sel1 = failure) | (status__sel1 = invalid) : status__sel1;
				status__sel0 = running : running;
				status__sel1 = running : running;
				TRUE : success;
			esac;
		next_child__sel0 := 
			case
				(status__success_failure_node = invalid)& (child_index_to_resume_from__sel0 <= 0) : node_names.success_failure_node;
				(status__success_node = invalid)& (child_index_to_resume_from__sel0 <= 1) : node_names.success_node;
			esac;
		next_child__sel1 := 
			case
				(status__success_failure_node_1 = invalid)& (child_index_to_resume_from__sel1 <= 0) : node_names.success_failure_node_1;
				(status__success_node_1 = invalid)& (child_index_to_resume_from__sel1 <= 1) : node_names.success_node_1;
			esac;
		next_child__parLink1 := 
			case
				(status__sel0 = invalid)& !(resume_from_here_in_subtree__sel0 = -2) : node_names.sel0;
				(status__sel1 = invalid)& !(resume_from_here_in_subtree__sel1 = -2) : node_names.sel1;
			esac;
		success_failure_node.active := active_node = node_names.success_failure_node;
		success_failure_node.reset := active_node = -1;
		success_node.active := active_node = node_names.success_node;
		success_node.reset := active_node = -1;
		success_failure_node_1.active := active_node = node_names.success_failure_node_1;
		success_failure_node_1.reset := active_node = -1;
		success_node_1.active := active_node = node_names.success_node_1;
		success_node_1.reset := active_node = -1;
		--START OF BLACKBOARD DEFINITIONS
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		active_node : -1..7;
		success_failure_node : success_failure_node_module(randomizer);
		success_node : success_DEFAULT_module;
		success_failure_node_1 : success_failure_node_1_module(randomizer);
		success_node_1 : success_DEFAULT_module;
		--START OF BLACKBOARD VARIABLES DECLARATION
		randomizer : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		init(active_node) := -1;
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(randomizer) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		next(active_node) :=
			case
				active_node = -1 & TRUE : node_names.parLink1;
				active_node = -1 & !(TRUE) : -1;
				(active_node = node_names.success_failure_node) & (status__success_failure_node != invalid) : node_names.sel0;
				(active_node = node_names.success_node) & (status__success_node != invalid) : node_names.sel0;
				(active_node = node_names.sel0) & (status__sel0 != invalid) : node_names.parLink1;
				(active_node = node_names.sel0) & (status__sel0 = invalid) : next_child__sel0;
				(active_node = node_names.success_failure_node_1) & (status__success_failure_node_1 != invalid) : node_names.sel1;
				(active_node = node_names.success_node_1) & (status__success_node_1 != invalid) : node_names.sel1;
				(active_node = node_names.sel1) & (status__sel1 != invalid) : node_names.parLink1;
				(active_node = node_names.sel1) & (status__sel1 = invalid) : next_child__sel1;
				(active_node = node_names.parLink1) & (status__parLink1 != invalid) : -1;
				(active_node = node_names.parLink1) & (status__parLink1 = invalid) : next_child__parLink1;
				TRUE : active_node;
			esac;
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(randomizer) :=
			case
				(active_node = -1) & !(status__success_failure_node = invalid) & (!(TRUE)) : randomizer;
				(active_node = -1) & !(status__success_failure_node = invalid) & (TRUE) : {TRUE, FALSE};
				(active_node = -1) & !(status__success_failure_node_1 = invalid) & (!(TRUE)) : randomizer;
				(active_node = -1) & !(status__success_failure_node_1 = invalid) & (TRUE) : {TRUE, FALSE};
				TRUE : randomizer;
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

INVARSPEC ((active_node = 0) -> ((success_failure_node.status = failure) -> (success_node.status = success)));
INVARSPEC ((active_node = 0) -> ((success_failure_node.status = failure) -> !(success_node.status = success)));
INVARSPEC ((active_node = 0) -> ((success_failure_node_1.status = failure) -> (success_node_1.status = success)));
INVARSPEC ((active_node = 0) -> ((success_failure_node_1.status = failure) -> !(success_node_1.status = success)));
MODULE define_nodes
	DEFINE
		parLink1 := 0;
		sel0 := 1;
		success_failure_node := 2;
		success_node := 3;
		sel1 := 4;
		success_failure_node_1 := 5;
		success_node_1 := 6;
MODULE success_failure_node_module(randomizer)
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success,failure,invalid};
	ASSIGN
		init(status) := invalid;
		next(status) :=
			case
				reset : invalid;
				!(active) : status;
				randomizer : success;
				TRUE : failure;
			esac;
MODULE success_failure_node_1_module(randomizer)
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success,failure,invalid};
	ASSIGN
		init(status) := invalid;
		next(status) :=
			case
				reset : invalid;
				!(active) : status;
				randomizer : success;
				TRUE : failure;
			esac;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	VAR
		status : {success, invalid};
	ASSIGN
		init(status) := invalid;
		next(status) := 
			case
				reset : invalid;
				active : {success};
				TRUE : status;
			esac;
