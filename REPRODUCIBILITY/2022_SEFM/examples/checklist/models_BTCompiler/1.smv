MODULE main
	VAR
		sel0 : bt_fallback(safety_check0, backup0);
		safety_check0 : bt_non_blocking_skill;
		backup0 : bt_success;
		tick_generator : bt_tick_generator(sel0);
LTLSPEC G (safety_check0.output = bt_output_false -> backup0.enable = TRUE);
LTLSPEC G (safety_check0.output = bt_output_false -> backup0.enable = FALSE);


MODULE bt_success
	VAR
		enable : boolean;
	DEFINE
		output := enable ? bt_output_true : bt_output_none;
MODULE bt_non_blocking_skill
	IVAR
		input : {bt_input_false, bt_input_true };
	VAR
		output : { bt_output_none, bt_output_running, bt_output_false, bt_output_true};
		enable : boolean;
	ASSIGN
		init(output) := bt_output_none;
		next(output) :=
			case
				! enable : bt_output_none;
				input = bt_input_false : bt_output_false;
				input = bt_input_true : bt_output_true;
			esac;
MODULE bt_fallback(left_bt, right_bt)
	VAR
		enable : boolean;
	ASSIGN
		left_bt.enable := enable;
		right_bt.enable := (left_bt.output = bt_output_false);
	DEFINE
		output :=
			case
				left_bt.output in { bt_output_running, bt_output_true } : left_bt.output;
				TRUE : right_bt.output;
			esac;
MODULE bt_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := (top_level_bt.output != bt_output_none);
MODULE bt_single_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := FALSE;
