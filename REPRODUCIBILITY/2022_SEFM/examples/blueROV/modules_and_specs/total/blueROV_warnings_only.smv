MODULE battery_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		battery := 0; --this isn't actually used. it's representing a pixhawk message
		battery_exists := TRUE;
MODULE battery_low_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		battery_low_warning_exists := TRUE;
	VAR
		battery_low_warning : 0..1;
	ASSIGN
		init(battery_low_warning) := 0;
		next(battery_low_warning) :=
			case
				(statuses[node_names.battery2bb] = success) : {0, 1};
				TRUE : battery_low_warning;
			esac;
MODULE battery_dot_batt_charge_remaining_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		battery_dot_batt_charge_remaining_exists := TRUE;
		battery_dot_batt_charge_remaining := 0;
MODULE bb_rth_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_rth := 0; --fake variable
		bb_rth_exists := TRUE;
MODULE bb_rth_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_rth_warning_exists := TRUE;
	VAR
		bb_rth_warning : 0..1;
	ASSIGN
		init(bb_rth_warning) := 0;
		next(bb_rth_warning) := 
			case
				(bb_rth_warning = 1) : 1; -- can't be unset.
				(statuses[node_names.mission_server] = running) & (variables[variable_names.next_mission] = 1) : {0, 1}; -- can be either, but only runs if next mission is true.
				(statuses[node_names.rth2bb] = success) : {0, 1};
				TRUE : bb_rth_warning;
			esac;
MODULE bb_rth_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_rth_dot_data_exists := TRUE;
		bb_rth_dot_data := 0;
MODULE bb_geofence_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_geofence := 0; -- a fake variable
		bb_geofence_exists := TRUE;
MODULE bb_geofence_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_geofence_warning_exists := TRUE;
	VAR
		bb_geofence_warning : 0..1;
	ASSIGN
		init(bb_geofence_warning) := 0;
		next(bb_geofence_warning) := 
			case
				(bb_geofence_warning = 1) : 1;
				(statuses[node_names.geofence2bb] = success) : {0, 1};
				TRUE : bb_geofence_warning;
			esac;
MODULE bb_geofence_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_geofence_dot_data_exists := TRUE;
		bb_geofence_dot_data := 0;
MODULE lec2_am_r_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_r_exists := TRUE;
		lec2_am_r := 0;
MODULE lec2_am_r_speed_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_r_speed_warning_exists := TRUE;
	VAR
		lec2_am_r_speed_warning : 0..1;
	ASSIGN
		init(lec2_am_r_speed_warning) := 0;
		next(lec2_am_r_speed_warning) := 
			case
				(statuses[node_names.lec2_am_r_2bb] = success) : {0, 1};
				TRUE : lec2_am_r_speed_warning;
			esac;
MODULE lec2_am_r_pipe_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_r_pipe_warning_exists := TRUE;
	VAR
		lec2_am_r_pipe_warning : 0..1;
	ASSIGN
		init(lec2_am_r_pipe_warning) := 0;
		next(lec2_am_r_pipe_warning) := 
			case
				(statuses[node_names.lec2_am_r_2bb] = success) : {0, 1};
				TRUE : lec2_am_r_pipe_warning;
			esac;
MODULE lec2_am_r_dot_confs_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_r_dot_confs := 0;
		lec2_am_r_dot_confs_exists := TRUE;
MODULE lec2_am_l_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_l_exists := TRUE;
		lec2_am_l := 0;
MODULE lec2_am_l_speed_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_l_speed_warning_exists := TRUE;
	VAR
		lec2_am_l_speed_warning : 0..1;
	ASSIGN
		init(lec2_am_l_speed_warning) := 0;
		next(lec2_am_l_speed_warning) := 
			case
				(statuses[node_names.lec2_am_l_2bb] = success) : {0, 1};
				TRUE : lec2_am_l_speed_warning;
			esac;
MODULE lec2_am_l_pipe_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_l_pipe_warning_exists := TRUE;
	VAR
		lec2_am_l_pipe_warning : 0..1;
	ASSIGN
		init(lec2_am_l_pipe_warning) := 0;
		next(lec2_am_l_pipe_warning) := 
			case
				(statuses[node_names.lec2_am_l_2bb] = success) : {0, 1};
				TRUE : lec2_am_l_pipe_warning;
			esac;

MODULE lec2_am_l_dot_confs_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		lec2_am_l_dot_confs := 0;
		lec2_am_l_dot_confs_exists := TRUE;
MODULE bb_pipelost_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_pipelost := 0;
		bb_pipelost_exists := TRUE;
MODULE bb_pipe_lost_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_pipe_lost_warning_exists := TRUE;
	VAR
		bb_pipe_lost_warning : 0..1;
	ASSIGN
		init(bb_pipe_lost_warning) := 0;
		next(bb_pipe_lost_warning) := 
			case
				(variables[variable_names.bb_mission_dot_data] = 1) & (statuses[node_names.pipe_lost2bb] = success) : {0, 1}; -- only set it if mission_dot_data is pipe-tracking
				TRUE : bb_pipe_lost_warning;
			esac;
MODULE bb_pipelost_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_pipelost_dot_data_exists := TRUE;
		bb_pipelost_dot_data := 0; -- as far as i can tell, this is just going to set the warning
MODULE bb_sensor_failure_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_sensor_failure := 0;
		bb_sensor_failure_exists := TRUE;
MODULE bb_sensor_failure_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_sensor_failure_warning_exists := TRUE;
	VAR
		bb_sensor_failure_warning : 0..1;
	ASSIGN
		init(bb_sensor_failure_warning) := 0;
		next(bb_sensor_failure_warning) := 
			case
				(bb_sensor_failure_warning = 1) : 1;
				(statuses[node_names.sensor_failure2bb] = success) : {0, 1};
				TRUE : bb_sensor_failure_warning;
			esac;
MODULE bb_sensor_failure_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_sensor_failure_dot_data_exists := TRUE;
		bb_sensor_failure_dot_data := 0; --i think this it just used to set the warning.
MODULE bb_waypoints_completed_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_waypoints_completed := 0; -- fake variable?
		bb_waypoints_completed_exists := TRUE;
MODULE bb_waypoints_completed_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_waypoints_completed_dot_data_exists := TRUE;
	VAR
		bb_waypoints_completed_dot_data : 0..1; -- this one is initialized to false. 
	ASSIGN
		init(bb_waypoints_completed_dot_data) := 0;
		next(bb_waypoints_completed_dot_data) := 
			case
				(statuses[node_names.waypoints_completed2bb] = success) : {0, 1};
				TRUE : bb_waypoints_completed_dot_data;
			esac;
MODULE bb_mission_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_mission := 0;
		bb_mission_exists := TRUE;
MODULE bb_mission_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_mission_dot_data_exists := TRUE;
	VAR
		bb_mission_dot_data : 0..4; -- 0 means other, 1 means pipe-track,  2 means waypoint-follow, 3 means fdr, 4 mean loiter.
	ASSIGN
		init(bb_mission_dot_data) := 1;
		next(bb_mission_dot_data) := 
			case
				(statuses[node_names.mission_server] = running) : {0, 1, 2, 3, 4};
				(statuses[node_names.mission2bb] = success) : {0, 1, 2, 3, 4};
				TRUE : bb_mission_dot_data;
			esac;
MODULE dd_output_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		dd_output_exists := TRUE;
		dd_output := 0;
MODULE dd_output_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		dd_output_dot_data_exists := TRUE;
		dd_output_dot_data := 0;
MODULE dd_z_axis_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		dd_z_axis_warning_exists := TRUE;
	VAR
		dd_z_axis_warning : 0..1;
	ASSIGN
		init(dd_z_axis_warning) := 0;
		next(dd_z_axis_warning) := 
			case
				(statuses[node_names.ddlec2bb] = success) : {0, 1};
				TRUE : dd_z_axis_warning;
			esac;
MODULE dd_xy_axis_degradation_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		dd_xy_axis_degradation_exists := TRUE;
	VAR
		dd_xy_axis_degradation : 0..1;
	ASSIGN
		init(dd_xy_axis_degradation) := 0;
		next(dd_xy_axis_degradation) := 
			case
				(statuses[node_names.ddlec2bb] = success) : {0, 1};
				TRUE : dd_xy_axis_degradation;
			esac;
MODULE fls_range_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		fls_range := 0;
		fls_range_exists := TRUE;
MODULE fls_range_dot_range_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		fls_range_dot_range := 0;
		fls_range_dot_range_exists := TRUE;
MODULE obstacle_standoff_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		obstacle_standoff_warning_exists := TRUE;
	VAR
		obstacle_standoff_warning : 0..1;
	ASSIGN
		init(obstacle_standoff_warning) := 0;
		next(obstacle_standoff_warning) := 
			case
				(obstacle_standoff_warning = 1) : 1;
				(statuses[node_names.fls2bb] = success) : {0, 1};
				TRUE : obstacle_standoff_warning;
			esac;
MODULE obstacle_min_standoff_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		obstacle_min_standoff_exists := TRUE;
		obstacle_min_standoff := 0; -- currently not dealing with this, as it's just used to set the standoff warning, which is just nondeterministic anyways
MODULE obstacle_in_view_dot_stamp_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		obstacle_in_view_dot_stamp := 0;
		obstacle_in_view_dot_stamp_exists := TRUE;
MODULE obstacle_in_view_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		obstacle_in_view := 0;
		obstacle_in_view_exists := TRUE;
MODULE bb_fls_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_fls_warning_exists := TRUE;
	VAR
		bb_fls_warning : 0..1;
	ASSIGN
		init(bb_fls_warning) := 0;
		next(bb_fls_warning) := 
			case
				(bb_fls_warning = 1 ) : 1;
				(statuses[node_names.fls_warning2bb] = success) : {0, 1};
				TRUE : bb_fls_warning;
			esac;
MODULE hsd_pipeline_mapping_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		hsd_pipeline_mapping := 0;
		hsd_pipeline_mapping_exists := TRUE; --yeah i don't know what this does yet
MODULE hsd_to_waypoint_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		hsd_to_waypoint := 0;
		hsd_to_waypoint_exists := TRUE;
MODULE hsd_to_rth_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		hsd_to_rth := 0;
		hsd_to_rth_exists := TRUE;
MODULE hsd_to_surface_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		hsd_to_surface := 0;
		hsd_to_surface_exists := TRUE;
MODULE rtreach_out_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		rtreach_out := 0;
		rtreach_out_exists := TRUE;
MODULE rtreach_out_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		rtreach_out_dot_data := 0;
		rtreach_out_dot_data_exists := TRUE;
MODULE emergency_stop_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		emergency_stop_warning_exists := TRUE;
	VAR
		emergency_stop_warning : 0..1;
	ASSIGN
		init(emergency_stop_warning) := 0;
		next(emergency_stop_warning) := 
			case
				(emergency_stop_warning = 1) : 1;
				(statuses[node_names.mission_server] = running) : {0, 1};
				(statuses[node_names.fls_warning2bb] = success | statuses[node_names.rtreach2bb] = success) : {0, 1};--this means we're not in mission server, so only update if success
				TRUE : emergency_stop_warning;
			esac;
MODULE total_degradation_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		total_degradation := 0;
		total_degradation_exists := TRUE;
MODULE uuv_max_speed_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		uuv_max_speed := 0;
		uuv_max_speed_exists := TRUE;
MODULE mission_file_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		mission_file := 0;
		mission_file_exists := TRUE; -- i actually don't know what this variable is for.
MODULE refLat_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		refLat := 0;
		refLat_exists := TRUE; --not sure what this is either. pretty sure it's storing lattitude.
MODULE refLon_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		refLon := 0;
		refLon_exists := TRUE; --not sure what this is either. pretty sure it's storing longitude
MODULE next_mission_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		next_mission_exists := TRUE;
	VAR
		next_mission : 0..1;
	ASSIGN
		init(next_mission) := 0; -- starts out as false.
		next(next_mission) := 
			case
				(statuses[node_names.next_mission] = running) : 1;
				(statuses[node_names.mission_server] = running) : 0;
				TRUE : next_mission;
			esac;
MODULE decision_threshold_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		decision_threshold := 0;
		decision_threshold_exists := TRUE;
MODULE HSD_out_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		HSD_out := 0; --fake variable
		HSD_out_exists := TRUE; --always exists, cuz it's initialized. 
MODULE bb_obstacle_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_obstacle_warning_exists := TRUE;
	VAR
		bb_obstacle_warning : 0..1;
	ASSIGN
		init(bb_obstacle_warning) := 0; -- starts as false.
		next(bb_obstacle_warning) := 
			case
				(statuses[node_names.obstacle_avoidance] = running) : {0, 1}; -- can be set either way
				TRUE : bb_obstacle_warning;
			esac;
MODULE cm_hsd_input_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		cm_hsd_input := 0;
		cm_hsd_input_exists := TRUE;
MODULE HSD_out_dot_heading_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		HSD_out_dot_heading := 0;
		HSD_out_dot_heading_exists := TRUE;
MODULE HSD_out_dot_speed_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		HSD_out_dot_speed := 0;
		HSD_out_dot_speed_exists := TRUE;
MODULE HSD_out_dot_depth_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		HSD_out_dot_depth := 0;
		HSD_out_dot_depth_exists := TRUE;
MODULE bb_home_reached_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_home_reached_exists := TRUE;
	VAR
		bb_home_reached : 0..1;
	ASSIGN
		init(bb_home_reached) := 0;--starts at false
		next(bb_home_reached) := 
			case
				(statuses[node_names.home2bb] = success | statuses[node_names.home2bb1] = success) : {0, 1};
				TRUE : bb_home_reached;
			esac;
MODULE bb_home_dist_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_home_dist := 0;
		bb_home_dist_exists := TRUE;
MODULE bb_home_dist_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		bb_home_dist_dot_data := 0;
		bb_home_dist_dot_data_exists := TRUE;
MODULE pipe_mapping_enable_SET_module(variables, variable_exists, node_names, variable_names, statuses)
	DEFINE
		pipe_mapping_enable_exists := TRUE;
	VAR
		pipe_mapping_enable : 0..1;
	ASSIGN
		init(pipe_mapping_enable) := 1; -- starts as true.
		next(pipe_mapping_enable) := 
			case
				!(statuses[node_names.pipe_mapping_enable_task] in {invalid, error}) : 1;
				!(statuses[node_names.pipe_mapping_disable_task1] in {invalid, error}) : 0;
				!(statuses[node_names.pipe_mapping_disable_task] in {invalid, error}) : 0;
				TRUE : pipe_mapping_enable;
			esac;
MODULE battery2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE rth2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE geofence2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE lec2_am_r_2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE lec2_am_l_2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE pipe_lost2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE sensor_failure2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE waypoints_completed2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE mission2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE ddlec2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE fls2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status; 
MODULE fls_warning2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_pipe2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_wp2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_rth2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_surface2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE rtreach2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status; 
MODULE reallocate_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE dd_lec_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE mission_server_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE obstacle_avoidance_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE emergency_stop_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := success;
MODULE surface_task2_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task3_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task4_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE rth_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE home2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE rth_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE home2bb1_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE loiter_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE tracking_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE speed_min_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE speed_min_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE speed_max_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE pipe_mapping_disable_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE pipe_mapping_disable_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE pipe_mapping_enable_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE next_mission_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := success;
MODULE loiter_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE waypoint_task_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE loiter_task2_SET_status_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--dd_xy_axis_degradation is set before this check is made. therefore, we need to use next() value
		result := (next(variables[variable_names.dd_xy_axis_degradation]) = 0);
MODULE battery_low_fs_CHECK_battery_low_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--battery_low_warning is set before this check is made. need next()
		result := (next(variables[variable_names.battery_low_warning]) = 0);
MODULE check_sensor_failure_CHECK_bb_sensor_failure_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--bb_sensor_failure-warning is set before this check. need next()
		result := (next(variables[variable_names.bb_sensor_failure_warning]) = 0);
MODULE emergency_stop_fs_CHECK_emergency_stop_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--fls_warning2bb comes before
		--rtreach2bb comes before
		--mission_server comes before.
		--therefore, the value will be set before we enter this check, and will not be changed afterwards.
		--safe to use next()
		result := (next(variables[variable_names.emergency_stop_warning]) = 0);
MODULE check_surface_CHECK_bb_home_reached_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in home2bb and home2bb1, both of which occur AFTER this check. use value as is. no next()
		result := (variables[variable_names.bb_home_reached] = 0);
MODULE obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in fls2bb, which is before. use next
		result := (next(variables[variable_names.obstacle_standoff_warning]) = 0);
MODULE check_rth_CHECK_bb_rth_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in rth2bb and mission_server. both before check_rth. use next()
		result := (next(variables[variable_names.bb_rth_warning]) = 0);
MODULE check_geofence_CHECK_bb_geofence_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in geofence2bb. occurs before check_geofence. use next() value
		result := (next(variables[variable_names.bb_geofence_warning]) = 0);
MODULE check_pipe_post_CHECK_bb_pipe_lost_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in pipe_lost2bb. occurs before check_pipe_post. use next()
		result := (next(variables[variable_names.bb_pipe_lost_warning]) = 0);
MODULE is_track_pipe_mission_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in mission2bb
		--set in mission_server
		--both occur before this check
		--use next()
		result := (next(variables[variable_names.bb_mission_dot_data]) = 1);
MODULE is_waypoint_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.bb_mission_dot_data]) = 2);
MODULE check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in lec2_am_l_2bb. occurs before this check. use next()
		result := (next(variables[variable_names.lec2_am_l_speed_warning]) = 0);
MODULE check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.lec2_am_r_speed_warning]) = 0);
MODULE check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.lec2_am_l_pipe_warning]) = 0);
MODULE check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.lec2_am_r_pipe_warning]) = 0);
MODULE check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in waypoints_completed2bb. occurs before this check. use next()
		result := (next(variables[variable_names.bb_waypoints_completed_dot_data]) = 0);

