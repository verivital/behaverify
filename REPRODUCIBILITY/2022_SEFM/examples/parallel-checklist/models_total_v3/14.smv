MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [linkPar12.status, linkPar10.status, linkPar6.status, sel12.status, safety_check12.status, backup12.status, sel13.status, safety_check13.status, backup13.status, linkPar7.status, linkPar0.status, sel0.status, safety_check0.status, backup0.status, sel1.status, safety_check1.status, backup1.status, linkPar1.status, sel2.status, safety_check2.status, backup2.status, sel3.status, safety_check3.status, backup3.status, linkPar11.status, linkPar8.status, linkPar2.status, sel4.status, safety_check4.status, backup4.status, sel5.status, safety_check5.status, backup5.status, linkPar3.status, sel6.status, safety_check6.status, backup6.status, sel7.status, safety_check7.status, backup7.status, linkPar9.status, linkPar4.status, sel8.status, safety_check8.status, backup8.status, sel9.status, safety_check9.status, backup9.status, linkPar5.status, sel10.status, safety_check10.status, backup10.status, sel11.status, safety_check11.status, backup11.status];
		resume_from_node_0 := -3;
		resume_from_node_1 := -3;
		resume_from_node_2 := -3;
		resume_from_node_3 := -3;
		resume_from_node_6 := -3;
		resume_from_node_9 := -3;
		resume_from_node_10 := -3;
		resume_from_node_11 := -3;
		resume_from_node_14 := -3;
		resume_from_node_17 := -3;
		resume_from_node_18 := -3;
		resume_from_node_21 := -3;
		resume_from_node_24 := -3;
		resume_from_node_25 := -3;
		resume_from_node_26 := -3;
		resume_from_node_27 := -3;
		resume_from_node_30 := -3;
		resume_from_node_33 := -3;
		resume_from_node_34 := -3;
		resume_from_node_37 := -3;
		resume_from_node_40 := -3;
		resume_from_node_41 := -3;
		resume_from_node_42 := -3;
		resume_from_node_45 := -3;
		resume_from_node_48 := -3;
		resume_from_node_49 := -3;
		resume_from_node_52 := -3;
		linkPar12.active := TRUE;
		parallel_skip_0 := [resume_from_node_1, resume_from_node_24];
		parallel_skip_1 := [resume_from_node_2, resume_from_node_9];
		parallel_skip_2 := [resume_from_node_3, resume_from_node_6];
		parallel_skip_9 := [resume_from_node_10, resume_from_node_17];
		parallel_skip_10 := [resume_from_node_11, resume_from_node_14];
		parallel_skip_17 := [resume_from_node_18, resume_from_node_21];
		parallel_skip_24 := [resume_from_node_25, resume_from_node_40];
		parallel_skip_25 := [resume_from_node_26, resume_from_node_33];
		parallel_skip_26 := [resume_from_node_27, resume_from_node_30];
		parallel_skip_33 := [resume_from_node_34, resume_from_node_37];
		parallel_skip_40 := [resume_from_node_41, resume_from_node_48];
		parallel_skip_41 := [resume_from_node_42, resume_from_node_45];
		parallel_skip_48 := [resume_from_node_49, resume_from_node_52];
	VAR
		node_names : define_nodes;
		linkPar12 : node_parallel_success_on_all2(linkPar10, linkPar11,  parallel_skip_0);
		linkPar10 : node_parallel_success_on_all2(linkPar6, linkPar7,  parallel_skip_1);
		linkPar6 : node_parallel_success_on_all2(sel12, sel13,  parallel_skip_2);
		sel12 : node_selector_without_memory2(safety_check12, backup12);
		safety_check12 : node_non_blocking();
		backup12 : node_success();
		sel13 : node_selector_without_memory2(safety_check13, backup13);
		safety_check13 : node_non_blocking();
		backup13 : node_success();
		linkPar7 : node_parallel_success_on_all2(linkPar0, linkPar1,  parallel_skip_9);
		linkPar0 : node_parallel_success_on_all2(sel0, sel1,  parallel_skip_10);
		sel0 : node_selector_without_memory2(safety_check0, backup0);
		safety_check0 : node_non_blocking();
		backup0 : node_success();
		sel1 : node_selector_without_memory2(safety_check1, backup1);
		safety_check1 : node_non_blocking();
		backup1 : node_success();
		linkPar1 : node_parallel_success_on_all2(sel2, sel3,  parallel_skip_17);
		sel2 : node_selector_without_memory2(safety_check2, backup2);
		safety_check2 : node_non_blocking();
		backup2 : node_success();
		sel3 : node_selector_without_memory2(safety_check3, backup3);
		safety_check3 : node_non_blocking();
		backup3 : node_success();
		linkPar11 : node_parallel_success_on_all2(linkPar8, linkPar9,  parallel_skip_24);
		linkPar8 : node_parallel_success_on_all2(linkPar2, linkPar3,  parallel_skip_25);
		linkPar2 : node_parallel_success_on_all2(sel4, sel5,  parallel_skip_26);
		sel4 : node_selector_without_memory2(safety_check4, backup4);
		safety_check4 : node_non_blocking();
		backup4 : node_success();
		sel5 : node_selector_without_memory2(safety_check5, backup5);
		safety_check5 : node_non_blocking();
		backup5 : node_success();
		linkPar3 : node_parallel_success_on_all2(sel6, sel7,  parallel_skip_33);
		sel6 : node_selector_without_memory2(safety_check6, backup6);
		safety_check6 : node_non_blocking();
		backup6 : node_success();
		sel7 : node_selector_without_memory2(safety_check7, backup7);
		safety_check7 : node_non_blocking();
		backup7 : node_success();
		linkPar9 : node_parallel_success_on_all2(linkPar4, linkPar5,  parallel_skip_40);
		linkPar4 : node_parallel_success_on_all2(sel8, sel9,  parallel_skip_41);
		sel8 : node_selector_without_memory2(safety_check8, backup8);
		safety_check8 : node_non_blocking();
		backup8 : node_success();
		sel9 : node_selector_without_memory2(safety_check9, backup9);
		safety_check9 : node_non_blocking();
		backup9 : node_success();
		linkPar5 : node_parallel_success_on_all2(sel10, sel11,  parallel_skip_48);
		sel10 : node_selector_without_memory2(safety_check10, backup10);
		safety_check10 : node_non_blocking();
		backup10 : node_success();
		sel11 : node_selector_without_memory2(safety_check11, backup11);
		safety_check11 : node_non_blocking();
		backup11 : node_success();
	ASSIGN
LTLSPEC G (safety_check0.status = failure -> backup0.status = success);
LTLSPEC G (safety_check0.status = failure -> !(backup0.status = success));
LTLSPEC G (safety_check1.status = failure -> backup1.status = success);
LTLSPEC G (safety_check1.status = failure -> !(backup1.status = success));
LTLSPEC G (safety_check2.status = failure -> backup2.status = success);
LTLSPEC G (safety_check2.status = failure -> !(backup2.status = success));
LTLSPEC G (safety_check3.status = failure -> backup3.status = success);
LTLSPEC G (safety_check3.status = failure -> !(backup3.status = success));
LTLSPEC G (safety_check4.status = failure -> backup4.status = success);
LTLSPEC G (safety_check4.status = failure -> !(backup4.status = success));
LTLSPEC G (safety_check5.status = failure -> backup5.status = success);
LTLSPEC G (safety_check5.status = failure -> !(backup5.status = success));
LTLSPEC G (safety_check6.status = failure -> backup6.status = success);
LTLSPEC G (safety_check6.status = failure -> !(backup6.status = success));
LTLSPEC G (safety_check7.status = failure -> backup7.status = success);
LTLSPEC G (safety_check7.status = failure -> !(backup7.status = success));
LTLSPEC G (safety_check8.status = failure -> backup8.status = success);
LTLSPEC G (safety_check8.status = failure -> !(backup8.status = success));
LTLSPEC G (safety_check9.status = failure -> backup9.status = success);
LTLSPEC G (safety_check9.status = failure -> !(backup9.status = success));
LTLSPEC G (safety_check10.status = failure -> backup10.status = success);
LTLSPEC G (safety_check10.status = failure -> !(backup10.status = success));
LTLSPEC G (safety_check11.status = failure -> backup11.status = success);
LTLSPEC G (safety_check11.status = failure -> !(backup11.status = success));
LTLSPEC G (safety_check12.status = failure -> backup12.status = success);
LTLSPEC G (safety_check12.status = failure -> !(backup12.status = success));
LTLSPEC G (safety_check13.status = failure -> backup13.status = success);
LTLSPEC G (safety_check13.status = failure -> !(backup13.status = success));


MODULE node_non_blocking()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := input_status;
	VAR
		input_status : {success, failure};
MODULE node_success()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
MODULE node_selector_without_memory2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE node_parallel_success_on_all2(child_0, child_1, skip_child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & !(skip_child[0] = -2);
		child_1.active := active & !(skip_child[1] = -2);
MODULE define_nodes
	DEFINE
		linkPar12 := 0;
		linkPar10 := 1;
		linkPar6 := 2;
		sel12 := 3;
		safety_check12 := 4;
		backup12 := 5;
		sel13 := 6;
		safety_check13 := 7;
		backup13 := 8;
		linkPar7 := 9;
		linkPar0 := 10;
		sel0 := 11;
		safety_check0 := 12;
		backup0 := 13;
		sel1 := 14;
		safety_check1 := 15;
		backup1 := 16;
		linkPar1 := 17;
		sel2 := 18;
		safety_check2 := 19;
		backup2 := 20;
		sel3 := 21;
		safety_check3 := 22;
		backup3 := 23;
		linkPar11 := 24;
		linkPar8 := 25;
		linkPar2 := 26;
		sel4 := 27;
		safety_check4 := 28;
		backup4 := 29;
		sel5 := 30;
		safety_check5 := 31;
		backup5 := 32;
		linkPar3 := 33;
		sel6 := 34;
		safety_check6 := 35;
		backup6 := 36;
		sel7 := 37;
		safety_check7 := 38;
		backup7 := 39;
		linkPar9 := 40;
		linkPar4 := 41;
		sel8 := 42;
		safety_check8 := 43;
		backup8 := 44;
		sel9 := 45;
		safety_check9 := 46;
		backup9 := 47;
		linkPar5 := 48;
		sel10 := 49;
		safety_check10 := 50;
		backup10 := 51;
		sel11 := 52;
		safety_check11 := 53;
		backup11 := 54;
