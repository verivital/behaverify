MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [linkPar1.status, sel2.status, safety_check2.status, backup2.status, linkPar0.status, sel0.status, safety_check0.status, backup0.status, sel1.status, safety_check1.status, backup1.status];
		resume_from_node_0 := -3;
		resume_from_node_1 := -3;
		resume_from_node_4 := -3;
		resume_from_node_5 := -3;
		resume_from_node_8 := -3;
		next_node := [ascent_from_0, ascent_from_1, ascent_from_2, ascent_from_3, ascent_from_4, ascent_from_5, ascent_from_6, ascent_from_7, ascent_from_8, ascent_from_9, ascent_from_10];
		descent_from_0 := 
			case
				(active_node <1) : descent_from_1;
				(active_node <4) : descent_from_4;
				TRUE : -2;
			esac;
		descent_from_1 := 
			case
				(active_node <2) : descent_from_2;
				(active_node <3) : descent_from_3;
				TRUE : -2;
			esac;
		descent_from_2 := 2;
		descent_from_3 := 3;
		descent_from_4 := 
			case
				(active_node <5) : descent_from_5;
				(active_node <8) : descent_from_8;
				TRUE : -2;
			esac;
		descent_from_5 := 
			case
				(active_node <6) : descent_from_6;
				(active_node <7) : descent_from_7;
				TRUE : -2;
			esac;
		descent_from_6 := 6;
		descent_from_7 := 7;
		descent_from_8 := 
			case
				(active_node <9) : descent_from_9;
				(active_node <10) : descent_from_10;
				TRUE : -2;
			esac;
		descent_from_9 := 9;
		descent_from_10 := 10;
		ascent_from_0 := 
			case
				(statuses[0] = invalid) : descent_from_0;
				TRUE : -1;
			esac;
		ascent_from_1 := 
			case
				(statuses[1] = invalid) : descent_from_1;
				TRUE : ascent_from_0;
			esac;
		ascent_from_2 := ascent_from_1;
		ascent_from_3 := ascent_from_1;
		ascent_from_4 := 
			case
				(statuses[4] = invalid) : descent_from_4;
				TRUE : ascent_from_0;
			esac;
		ascent_from_5 := 
			case
				(statuses[5] = invalid) : descent_from_5;
				TRUE : ascent_from_4;
			esac;
		ascent_from_6 := ascent_from_5;
		ascent_from_7 := ascent_from_5;
		ascent_from_8 := 
			case
				(statuses[8] = invalid) : descent_from_8;
				TRUE : ascent_from_4;
			esac;
		ascent_from_9 := ascent_from_8;
		ascent_from_10 := ascent_from_8;
		relevant_child_0 := 
			case
				 !(relevant_child_1 = -2) : 1;
				 !(relevant_child_4 = -2) : 4;
				TRUE : -2;
			esac;
		resume_relevant_child_0 := 
			case
				(resume_from_node_0 = 0) : TRUE ;
				(resume_relevant_child_1) : TRUE;
				(resume_relevant_child_4) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_0 := 
			case
				(relevant_child_0 = 1) : sel2.status;
				(relevant_child_0 = 4) : linkPar0.status;
				TRUE : invalid;
			esac;
		relevant_child_1 := 
			case
				 !(relevant_child_2 = -2) : 2;
				 !(relevant_child_3 = -2) : 3;
				TRUE : -2;
			esac;
		resume_relevant_child_1 := 
			case
				(resume_from_node_1 = 1) : TRUE ;
				(resume_relevant_child_2) : TRUE;
				(resume_relevant_child_3) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_1 := 
			case
				(relevant_child_1 = 2) : safety_check2.status;
				(relevant_child_1 = 3) : backup2.status;
				TRUE : invalid;
			esac;
		relevant_child_2 := (active_node = 2) ? -1 : -2 ;
		resume_relevant_child_2 := (resume_from_node_1 = 2) ? TRUE : FALSE ;
		relevant_child_3 := (active_node = 3) ? -1 : -2 ;
		resume_relevant_child_3 := (resume_from_node_1 = 3) ? TRUE : FALSE ;
		relevant_child_4 := 
			case
				 !(relevant_child_5 = -2) : 5;
				 !(relevant_child_8 = -2) : 8;
				TRUE : -2;
			esac;
		resume_relevant_child_4 := 
			case
				(resume_from_node_4 = 4) : TRUE ;
				(resume_relevant_child_5) : TRUE;
				(resume_relevant_child_8) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_4 := 
			case
				(relevant_child_4 = 5) : sel0.status;
				(relevant_child_4 = 8) : sel1.status;
				TRUE : invalid;
			esac;
		relevant_child_5 := 
			case
				 !(relevant_child_6 = -2) : 6;
				 !(relevant_child_7 = -2) : 7;
				TRUE : -2;
			esac;
		resume_relevant_child_5 := 
			case
				(resume_from_node_5 = 5) : TRUE ;
				(resume_relevant_child_6) : TRUE;
				(resume_relevant_child_7) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_5 := 
			case
				(relevant_child_5 = 6) : safety_check0.status;
				(relevant_child_5 = 7) : backup0.status;
				TRUE : invalid;
			esac;
		relevant_child_6 := (active_node = 6) ? -1 : -2 ;
		resume_relevant_child_6 := (resume_from_node_5 = 6) ? TRUE : FALSE ;
		relevant_child_7 := (active_node = 7) ? -1 : -2 ;
		resume_relevant_child_7 := (resume_from_node_5 = 7) ? TRUE : FALSE ;
		relevant_child_8 := 
			case
				 !(relevant_child_9 = -2) : 9;
				 !(relevant_child_10 = -2) : 10;
				TRUE : -2;
			esac;
		resume_relevant_child_8 := 
			case
				(resume_from_node_8 = 8) : TRUE ;
				(resume_relevant_child_9) : TRUE;
				(resume_relevant_child_10) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_8 := 
			case
				(relevant_child_8 = 9) : safety_check1.status;
				(relevant_child_8 = 10) : backup1.status;
				TRUE : invalid;
			esac;
		relevant_child_9 := (active_node = 9) ? -1 : -2 ;
		resume_relevant_child_9 := (resume_from_node_8 = 9) ? TRUE : FALSE ;
		relevant_child_10 := (active_node = 10) ? -1 : -2 ;
		resume_relevant_child_10 := (resume_from_node_8 = 10) ? TRUE : FALSE ;
		parallel_reset_0 := 
			case
				(statuses[0] in {success, failure, running}) : TRUE;
				TRUE : FALSE;
			esac;
		last_child_0 := 4;
		parallel_reset_4 := 
			case
				(statuses[4] in {success, failure, running}) : TRUE;
				(statuses[0] in {success, failure, running}) : TRUE;
				TRUE : FALSE;
			esac;
		last_child_4 := 8;
		last_child_8 := 10;
		last_child_1 := 3;
		last_child_5 := 7;
	VAR
		active_node : {-2, -1,2, 3, 6, 7, 9, 10};
		random_status : {running, success, failure};
		node_names : define_nodes;
		linkPar1 : node_parallel(relevant_child_0, relevant_status_0, last_child_0, parallel_reset_0, FALSE, TRUE);
		sel2 : node_selector(relevant_child_1, relevant_status_1, last_child_1);
		safety_check2 : node_default(active_node, 2, random_status);
		backup2 : node_success(active_node, 3);
		linkPar0 : node_parallel(relevant_child_4, relevant_status_4, last_child_4, parallel_reset_4, FALSE, TRUE);
		sel0 : node_selector(relevant_child_5, relevant_status_5, last_child_5);
		safety_check0 : node_default(active_node, 6, random_status);
		backup0 : node_success(active_node, 7);
		sel1 : node_selector(relevant_child_8, relevant_status_8, last_child_8);
		safety_check1 : node_default(active_node, 9, random_status);
		backup1 : node_success(active_node, 10);
	INVAR
		active_node = -1 -> random_status = running;
	ASSIGN
		init(active_node) := -1;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) : next_node[0];
				TRUE : next_node[active_node];
			esac;
LTLSPEC G (safety_check0.status = failure -> !(active_node = -1) U backup0.status = success);
LTLSPEC G (safety_check0.status = failure -> !(!(active_node = -1) U backup0.status = success));
LTLSPEC G (safety_check1.status = failure -> !(active_node = -1) U backup1.status = success);
LTLSPEC G (safety_check1.status = failure -> !(!(active_node = -1) U backup1.status = success));
LTLSPEC G (safety_check2.status = failure -> !(active_node = -1) U backup2.status = success);
LTLSPEC G (safety_check2.status = failure -> !(!(active_node = -1) U backup2.status = success));


MODULE node_selector(relevant_child, relevant_status, last_child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(last_child = -2) : failure;
				(relevant_child <= 0) : invalid;
				(relevant_status = running) : running;
				(relevant_status = success) : success;
				(last_child = relevant_child) & (relevant_status = failure) : failure;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id, random_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(active_node = id) : random_status;
				TRUE : invalid;
			esac;
MODULE node_success(active_node, id)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE node_parallel(relevant_child, relevant_status, last_child, reset, synchronized, parallel_policy_all)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(last_child = -2) : success;
				(relevant_child <= 0) : invalid;
				!(relevant_child = last_child) : invalid;
				(relevant_status = invalid) : invalid;
				((cur_status = failure) | (relevant_status = failure)) : failure;
				(cur_status = running) & (relevant_status = running) : running;
				!(parallel_policy_all) : success;
				(cur_status = success) & (relevant_status = success) : success;
				TRUE : running;
			esac;
	VAR
		cur_status : {failure, running, success};
	ASSIGN
		init(cur_status) :=
			case
				(parallel_policy_all) : success;
				TRUE : running;
			esac;
		next(cur_status) :=
			case
				reset & (parallel_policy_all) : success;
				reset & !(parallel_policy_all) : running;
				(relevant_child < 0) : cur_status;
				((relevant_status = failure) | (cur_status = failure)) : failure;
				(parallel_policy_all) & (relevant_status = success) : cur_status;
				(parallel_policy_all) & (relevant_status = running) : running;
				!(parallel_policy_all) & (relevant_status = success) : success;
				!(parallel_policy_all) & (relevant_status = running) : cur_status;
				TRUE : cur_status;
			esac;
MODULE define_nodes
	DEFINE
		linkPar1 := 0;
		sel2 := 1;
		safety_check2 := 2;
		backup2 := 3;
		linkPar0 := 4;
		sel0 := 5;
		safety_check0 := 6;
		backup0 := 7;
		sel1 := 8;
		safety_check1 := 9;
		backup1 := 10;
