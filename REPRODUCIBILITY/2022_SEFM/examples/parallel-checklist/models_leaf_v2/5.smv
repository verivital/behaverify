MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [linkPar3.status, linkPar1.status, sel2.status, safety_check2.status, backup2.status, sel3.status, safety_check3.status, backup3.status, linkPar2.status, sel4.status, safety_check4.status, backup4.status, linkPar0.status, sel0.status, safety_check0.status, backup0.status, sel1.status, safety_check1.status, backup1.status];
		resume_from_node_0 := -3;
		resume_from_node_1 := -3;
		resume_from_node_2 := -3;
		resume_from_node_5 := -3;
		resume_from_node_8 := -3;
		resume_from_node_9 := -3;
		resume_from_node_12 := -3;
		resume_from_node_13 := -3;
		resume_from_node_16 := -3;
		next_node := [ascent_from_0, ascent_from_1, ascent_from_2, ascent_from_3, ascent_from_4, ascent_from_5, ascent_from_6, ascent_from_7, ascent_from_8, ascent_from_9, ascent_from_10, ascent_from_11, ascent_from_12, ascent_from_13, ascent_from_14, ascent_from_15, ascent_from_16, ascent_from_17, ascent_from_18];
		descent_from_0 := 
			case
				(active_node <1) : descent_from_1;
				(active_node <8) : descent_from_8;
				TRUE : -2;
			esac;
		descent_from_1 := 
			case
				(active_node <2) : descent_from_2;
				(active_node <5) : descent_from_5;
				TRUE : -2;
			esac;
		descent_from_2 := 
			case
				(active_node <3) : descent_from_3;
				(active_node <4) : descent_from_4;
				TRUE : -2;
			esac;
		descent_from_3 := 3;
		descent_from_4 := 4;
		descent_from_5 := 
			case
				(active_node <6) : descent_from_6;
				(active_node <7) : descent_from_7;
				TRUE : -2;
			esac;
		descent_from_6 := 6;
		descent_from_7 := 7;
		descent_from_8 := 
			case
				(active_node <9) : descent_from_9;
				(active_node <12) : descent_from_12;
				TRUE : -2;
			esac;
		descent_from_9 := 
			case
				(active_node <10) : descent_from_10;
				(active_node <11) : descent_from_11;
				TRUE : -2;
			esac;
		descent_from_10 := 10;
		descent_from_11 := 11;
		descent_from_12 := 
			case
				(active_node <13) : descent_from_13;
				(active_node <16) : descent_from_16;
				TRUE : -2;
			esac;
		descent_from_13 := 
			case
				(active_node <14) : descent_from_14;
				(active_node <15) : descent_from_15;
				TRUE : -2;
			esac;
		descent_from_14 := 14;
		descent_from_15 := 15;
		descent_from_16 := 
			case
				(active_node <17) : descent_from_17;
				(active_node <18) : descent_from_18;
				TRUE : -2;
			esac;
		descent_from_17 := 17;
		descent_from_18 := 18;
		ascent_from_0 := 
			case
				(statuses[0] = invalid) : descent_from_0;
				TRUE : -1;
			esac;
		ascent_from_1 := 
			case
				(statuses[1] = invalid) : descent_from_1;
				TRUE : ascent_from_0;
			esac;
		ascent_from_2 := 
			case
				(statuses[2] = invalid) : descent_from_2;
				TRUE : ascent_from_1;
			esac;
		ascent_from_3 := ascent_from_2;
		ascent_from_4 := ascent_from_2;
		ascent_from_5 := 
			case
				(statuses[5] = invalid) : descent_from_5;
				TRUE : ascent_from_1;
			esac;
		ascent_from_6 := ascent_from_5;
		ascent_from_7 := ascent_from_5;
		ascent_from_8 := 
			case
				(statuses[8] = invalid) : descent_from_8;
				TRUE : ascent_from_0;
			esac;
		ascent_from_9 := 
			case
				(statuses[9] = invalid) : descent_from_9;
				TRUE : ascent_from_8;
			esac;
		ascent_from_10 := ascent_from_9;
		ascent_from_11 := ascent_from_9;
		ascent_from_12 := 
			case
				(statuses[12] = invalid) : descent_from_12;
				TRUE : ascent_from_8;
			esac;
		ascent_from_13 := 
			case
				(statuses[13] = invalid) : descent_from_13;
				TRUE : ascent_from_12;
			esac;
		ascent_from_14 := ascent_from_13;
		ascent_from_15 := ascent_from_13;
		ascent_from_16 := 
			case
				(statuses[16] = invalid) : descent_from_16;
				TRUE : ascent_from_12;
			esac;
		ascent_from_17 := ascent_from_16;
		ascent_from_18 := ascent_from_16;
		relevant_child_0 := 
			case
				 !(relevant_child_1 = -2) : 1;
				 !(relevant_child_8 = -2) : 8;
				TRUE : -2;
			esac;
		resume_relevant_child_0 := 
			case
				(resume_from_node_0 = 0) : TRUE ;
				(resume_relevant_child_1) : TRUE;
				(resume_relevant_child_8) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_0 := 
			case
				(relevant_child_0 = 1) : linkPar1.status;
				(relevant_child_0 = 8) : linkPar2.status;
				TRUE : invalid;
			esac;
		relevant_child_1 := 
			case
				 !(relevant_child_2 = -2) : 2;
				 !(relevant_child_5 = -2) : 5;
				TRUE : -2;
			esac;
		resume_relevant_child_1 := 
			case
				(resume_from_node_1 = 1) : TRUE ;
				(resume_relevant_child_2) : TRUE;
				(resume_relevant_child_5) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_1 := 
			case
				(relevant_child_1 = 2) : sel2.status;
				(relevant_child_1 = 5) : sel3.status;
				TRUE : invalid;
			esac;
		relevant_child_2 := 
			case
				 !(relevant_child_3 = -2) : 3;
				 !(relevant_child_4 = -2) : 4;
				TRUE : -2;
			esac;
		resume_relevant_child_2 := 
			case
				(resume_from_node_2 = 2) : TRUE ;
				(resume_relevant_child_3) : TRUE;
				(resume_relevant_child_4) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_2 := 
			case
				(relevant_child_2 = 3) : safety_check2.status;
				(relevant_child_2 = 4) : backup2.status;
				TRUE : invalid;
			esac;
		relevant_child_3 := (active_node = 3) ? -1 : -2 ;
		resume_relevant_child_3 := (resume_from_node_2 = 3) ? TRUE : FALSE ;
		relevant_child_4 := (active_node = 4) ? -1 : -2 ;
		resume_relevant_child_4 := (resume_from_node_2 = 4) ? TRUE : FALSE ;
		relevant_child_5 := 
			case
				 !(relevant_child_6 = -2) : 6;
				 !(relevant_child_7 = -2) : 7;
				TRUE : -2;
			esac;
		resume_relevant_child_5 := 
			case
				(resume_from_node_5 = 5) : TRUE ;
				(resume_relevant_child_6) : TRUE;
				(resume_relevant_child_7) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_5 := 
			case
				(relevant_child_5 = 6) : safety_check3.status;
				(relevant_child_5 = 7) : backup3.status;
				TRUE : invalid;
			esac;
		relevant_child_6 := (active_node = 6) ? -1 : -2 ;
		resume_relevant_child_6 := (resume_from_node_5 = 6) ? TRUE : FALSE ;
		relevant_child_7 := (active_node = 7) ? -1 : -2 ;
		resume_relevant_child_7 := (resume_from_node_5 = 7) ? TRUE : FALSE ;
		relevant_child_8 := 
			case
				 !(relevant_child_9 = -2) : 9;
				 !(relevant_child_12 = -2) : 12;
				TRUE : -2;
			esac;
		resume_relevant_child_8 := 
			case
				(resume_from_node_8 = 8) : TRUE ;
				(resume_relevant_child_9) : TRUE;
				(resume_relevant_child_12) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_8 := 
			case
				(relevant_child_8 = 9) : sel4.status;
				(relevant_child_8 = 12) : linkPar0.status;
				TRUE : invalid;
			esac;
		relevant_child_9 := 
			case
				 !(relevant_child_10 = -2) : 10;
				 !(relevant_child_11 = -2) : 11;
				TRUE : -2;
			esac;
		resume_relevant_child_9 := 
			case
				(resume_from_node_9 = 9) : TRUE ;
				(resume_relevant_child_10) : TRUE;
				(resume_relevant_child_11) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_9 := 
			case
				(relevant_child_9 = 10) : safety_check4.status;
				(relevant_child_9 = 11) : backup4.status;
				TRUE : invalid;
			esac;
		relevant_child_10 := (active_node = 10) ? -1 : -2 ;
		resume_relevant_child_10 := (resume_from_node_9 = 10) ? TRUE : FALSE ;
		relevant_child_11 := (active_node = 11) ? -1 : -2 ;
		resume_relevant_child_11 := (resume_from_node_9 = 11) ? TRUE : FALSE ;
		relevant_child_12 := 
			case
				 !(relevant_child_13 = -2) : 13;
				 !(relevant_child_16 = -2) : 16;
				TRUE : -2;
			esac;
		resume_relevant_child_12 := 
			case
				(resume_from_node_12 = 12) : TRUE ;
				(resume_relevant_child_13) : TRUE;
				(resume_relevant_child_16) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_12 := 
			case
				(relevant_child_12 = 13) : sel0.status;
				(relevant_child_12 = 16) : sel1.status;
				TRUE : invalid;
			esac;
		relevant_child_13 := 
			case
				 !(relevant_child_14 = -2) : 14;
				 !(relevant_child_15 = -2) : 15;
				TRUE : -2;
			esac;
		resume_relevant_child_13 := 
			case
				(resume_from_node_13 = 13) : TRUE ;
				(resume_relevant_child_14) : TRUE;
				(resume_relevant_child_15) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_13 := 
			case
				(relevant_child_13 = 14) : safety_check0.status;
				(relevant_child_13 = 15) : backup0.status;
				TRUE : invalid;
			esac;
		relevant_child_14 := (active_node = 14) ? -1 : -2 ;
		resume_relevant_child_14 := (resume_from_node_13 = 14) ? TRUE : FALSE ;
		relevant_child_15 := (active_node = 15) ? -1 : -2 ;
		resume_relevant_child_15 := (resume_from_node_13 = 15) ? TRUE : FALSE ;
		relevant_child_16 := 
			case
				 !(relevant_child_17 = -2) : 17;
				 !(relevant_child_18 = -2) : 18;
				TRUE : -2;
			esac;
		resume_relevant_child_16 := 
			case
				(resume_from_node_16 = 16) : TRUE ;
				(resume_relevant_child_17) : TRUE;
				(resume_relevant_child_18) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_16 := 
			case
				(relevant_child_16 = 17) : safety_check1.status;
				(relevant_child_16 = 18) : backup1.status;
				TRUE : invalid;
			esac;
		relevant_child_17 := (active_node = 17) ? -1 : -2 ;
		resume_relevant_child_17 := (resume_from_node_16 = 17) ? TRUE : FALSE ;
		relevant_child_18 := (active_node = 18) ? -1 : -2 ;
		resume_relevant_child_18 := (resume_from_node_16 = 18) ? TRUE : FALSE ;
		parallel_reset_0 := 
			case
				(statuses[0] in {success, failure, running}) : TRUE;
				TRUE : FALSE;
			esac;
		last_child_0 := 8;
		parallel_reset_1 := 
			case
				(statuses[1] in {success, failure, running}) : TRUE;
				(statuses[0] in {success, failure, running}) : TRUE;
				TRUE : FALSE;
			esac;
		last_child_1 := 5;
		parallel_reset_12 := 
			case
				(statuses[12] in {success, failure, running}) : TRUE;
				(statuses[8] in {success, failure, running}) : TRUE;
				(statuses[0] in {success, failure, running}) : TRUE;
				TRUE : FALSE;
			esac;
		last_child_12 := 16;
		parallel_reset_8 := 
			case
				(statuses[8] in {success, failure, running}) : TRUE;
				(statuses[0] in {success, failure, running}) : TRUE;
				TRUE : FALSE;
			esac;
		last_child_8 := 12;
		last_child_2 := 4;
		last_child_5 := 7;
		last_child_9 := 11;
		last_child_13 := 15;
		last_child_16 := 18;
	VAR
		active_node : {-2, -1,3, 4, 6, 7, 10, 11, 14, 15, 17, 18};
		random_status : {running, success, failure};
		node_names : define_nodes;
		linkPar3 : node_parallel(relevant_child_0, relevant_status_0, last_child_0, parallel_reset_0, FALSE, TRUE);
		linkPar1 : node_parallel(relevant_child_1, relevant_status_1, last_child_1, parallel_reset_1, FALSE, TRUE);
		sel2 : node_selector(relevant_child_2, relevant_status_2, last_child_2);
		safety_check2 : node_default(active_node, 3, random_status);
		backup2 : node_success(active_node, 4);
		sel3 : node_selector(relevant_child_5, relevant_status_5, last_child_5);
		safety_check3 : node_default(active_node, 6, random_status);
		backup3 : node_success(active_node, 7);
		linkPar2 : node_parallel(relevant_child_8, relevant_status_8, last_child_8, parallel_reset_8, FALSE, TRUE);
		sel4 : node_selector(relevant_child_9, relevant_status_9, last_child_9);
		safety_check4 : node_default(active_node, 10, random_status);
		backup4 : node_success(active_node, 11);
		linkPar0 : node_parallel(relevant_child_12, relevant_status_12, last_child_12, parallel_reset_12, FALSE, TRUE);
		sel0 : node_selector(relevant_child_13, relevant_status_13, last_child_13);
		safety_check0 : node_default(active_node, 14, random_status);
		backup0 : node_success(active_node, 15);
		sel1 : node_selector(relevant_child_16, relevant_status_16, last_child_16);
		safety_check1 : node_default(active_node, 17, random_status);
		backup1 : node_success(active_node, 18);
	INVAR
		active_node = -1 -> random_status = running;
	ASSIGN
		init(active_node) := -1;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) : next_node[0];
				TRUE : next_node[active_node];
			esac;
LTLSPEC G (safety_check0.status = failure -> !(active_node = -1) U backup0.status = success);
LTLSPEC G (safety_check0.status = failure -> !(!(active_node = -1) U backup0.status = success));
LTLSPEC G (safety_check1.status = failure -> !(active_node = -1) U backup1.status = success);
LTLSPEC G (safety_check1.status = failure -> !(!(active_node = -1) U backup1.status = success));
LTLSPEC G (safety_check2.status = failure -> !(active_node = -1) U backup2.status = success);
LTLSPEC G (safety_check2.status = failure -> !(!(active_node = -1) U backup2.status = success));
LTLSPEC G (safety_check3.status = failure -> !(active_node = -1) U backup3.status = success);
LTLSPEC G (safety_check3.status = failure -> !(!(active_node = -1) U backup3.status = success));
LTLSPEC G (safety_check4.status = failure -> !(active_node = -1) U backup4.status = success);
LTLSPEC G (safety_check4.status = failure -> !(!(active_node = -1) U backup4.status = success));


MODULE node_default(active_node, id, random_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(active_node = id) : random_status;
				TRUE : invalid;
			esac;
MODULE node_parallel(relevant_child, relevant_status, last_child, reset, synchronized, parallel_policy_all)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(last_child = -2) : success;
				(relevant_child <= 0) : invalid;
				!(relevant_child = last_child) : invalid;
				(relevant_status = invalid) : invalid;
				((cur_status = failure) | (relevant_status = failure)) : failure;
				(cur_status = running) & (relevant_status = running) : running;
				!(parallel_policy_all) : success;
				(cur_status = success) & (relevant_status = success) : success;
				TRUE : running;
			esac;
	VAR
		cur_status : {failure, running, success};
	ASSIGN
		init(cur_status) :=
			case
				(parallel_policy_all) : success;
				TRUE : running;
			esac;
		next(cur_status) :=
			case
				reset & (parallel_policy_all) : success;
				reset & !(parallel_policy_all) : running;
				(relevant_child < 0) : cur_status;
				((relevant_status = failure) | (cur_status = failure)) : failure;
				(parallel_policy_all) & (relevant_status = success) : cur_status;
				(parallel_policy_all) & (relevant_status = running) : running;
				!(parallel_policy_all) & (relevant_status = success) : success;
				!(parallel_policy_all) & (relevant_status = running) : cur_status;
				TRUE : cur_status;
			esac;
MODULE node_selector(relevant_child, relevant_status, last_child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(last_child = -2) : failure;
				(relevant_child <= 0) : invalid;
				(relevant_status = running) : running;
				(relevant_status = success) : success;
				(last_child = relevant_child) & (relevant_status = failure) : failure;
				TRUE : invalid;
			esac;
MODULE node_success(active_node, id)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		linkPar3 := 0;
		linkPar1 := 1;
		sel2 := 2;
		safety_check2 := 3;
		backup2 := 4;
		sel3 := 5;
		safety_check3 := 6;
		backup3 := 7;
		linkPar2 := 8;
		sel4 := 9;
		safety_check4 := 10;
		backup4 := 11;
		linkPar0 := 12;
		sel0 := 13;
		safety_check0 := 14;
		backup0 := 15;
		sel1 := 16;
		safety_check1 := 17;
		backup1 := 18;
