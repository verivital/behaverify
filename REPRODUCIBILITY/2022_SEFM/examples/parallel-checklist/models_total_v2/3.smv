MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [linkPar1.status, sel2.status, safety_check2.status, backup2.status, linkPar0.status, sel0.status, safety_check0.status, backup0.status, sel1.status, safety_check1.status, backup1.status];
		resume_from_node_0 := -3;
		resume_from_node_1 := -3;
		resume_from_node_4 := -3;
		resume_from_node_5 := -3;
		resume_from_node_8 := -3;
		linkPar1.active := TRUE;
		parallel_skip_0 := [resume_from_node_1, resume_from_node_4];
		parallel_skip_4 := [resume_from_node_5, resume_from_node_8];
	VAR
		node_names : define_nodes;
		linkPar1 : node_parallel_success_on_all2(sel2, linkPar0,  parallel_skip_0);
		sel2 : node_selector2(safety_check2, backup2);
		safety_check2 : node_non_blocking();
		backup2 : node_success();
		linkPar0 : node_parallel_success_on_all2(sel0, sel1,  parallel_skip_4);
		sel0 : node_selector2(safety_check0, backup0);
		safety_check0 : node_non_blocking();
		backup0 : node_success();
		sel1 : node_selector2(safety_check1, backup1);
		safety_check1 : node_non_blocking();
		backup1 : node_success();
	ASSIGN
LTLSPEC G (safety_check0.status = failure -> backup0.status = success);
LTLSPEC G (safety_check0.status = failure -> !(backup0.status = success));
LTLSPEC G (safety_check1.status = failure -> backup1.status = success);
LTLSPEC G (safety_check1.status = failure -> !(backup1.status = success));
LTLSPEC G (safety_check2.status = failure -> backup2.status = success);
LTLSPEC G (safety_check2.status = failure -> !(backup2.status = success));


MODULE node_non_blocking()
	CONSTANTS
		success, failure, running, invalid;
	VAR
		input_status : {success, failure};
	DEFINE
		status := active ? input_status : invalid;
MODULE node_success()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				TRUE : success;
			esac;
MODULE node_selector2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(child_0.status = failure) : child_0.status;
				!(child_1.status = failure) : child_1.status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE node_parallel_success_on_all2(child_0, child_1, skip_child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				(child_0.status = failure) : failure;
				(child_1.status = failure) : failure;
				!(child_0.status = success) : child_0.status;
				!(child_1.status = success) : child_1.status;
				TRUE : success;
			esac;
		child_0.active := active & !(skip_child[0] = -2);
		child_1.active := active & !(skip_child[1] = -2);
MODULE define_nodes
	DEFINE
		linkPar1 := 0;
		sel2 := 1;
		safety_check2 := 2;
		backup2 := 3;
		linkPar0 := 4;
		sel0 := 5;
		safety_check0 := 6;
		backup0 := 7;
		sel1 := 8;
		safety_check1 := 9;
		backup1 := 10;
