MODULE main
	VAR
		linkPar26 : bt_parallel(2, linkPar24, linkPar25);
		linkPar24 : bt_parallel(2, linkPar20, linkPar21);
		linkPar20 : bt_parallel(2, linkPar12, linkPar13);
		linkPar12 : bt_parallel(2, sel24, sel25);
		sel24 : bt_fallback(safety_check24, backup24);
		safety_check24 : bt_non_blocking_skill;
		backup24 : bt_success;
		sel25 : bt_fallback(safety_check25, backup25);
		safety_check25 : bt_non_blocking_skill;
		backup25 : bt_success;
		linkPar13 : bt_parallel(2, sel26, sel27);
		sel26 : bt_fallback(safety_check26, backup26);
		safety_check26 : bt_non_blocking_skill;
		backup26 : bt_success;
		sel27 : bt_fallback(safety_check27, backup27);
		safety_check27 : bt_non_blocking_skill;
		backup27 : bt_success;
		linkPar21 : bt_parallel(2, linkPar14, linkPar15);
		linkPar14 : bt_parallel(2, linkPar0, linkPar1);
		linkPar0 : bt_parallel(2, sel0, sel1);
		sel0 : bt_fallback(safety_check0, backup0);
		safety_check0 : bt_non_blocking_skill;
		backup0 : bt_success;
		sel1 : bt_fallback(safety_check1, backup1);
		safety_check1 : bt_non_blocking_skill;
		backup1 : bt_success;
		linkPar1 : bt_parallel(2, sel2, sel3);
		sel2 : bt_fallback(safety_check2, backup2);
		safety_check2 : bt_non_blocking_skill;
		backup2 : bt_success;
		sel3 : bt_fallback(safety_check3, backup3);
		safety_check3 : bt_non_blocking_skill;
		backup3 : bt_success;
		linkPar15 : bt_parallel(2, linkPar2, linkPar3);
		linkPar2 : bt_parallel(2, sel4, sel5);
		sel4 : bt_fallback(safety_check4, backup4);
		safety_check4 : bt_non_blocking_skill;
		backup4 : bt_success;
		sel5 : bt_fallback(safety_check5, backup5);
		safety_check5 : bt_non_blocking_skill;
		backup5 : bt_success;
		linkPar3 : bt_parallel(2, sel6, sel7);
		sel6 : bt_fallback(safety_check6, backup6);
		safety_check6 : bt_non_blocking_skill;
		backup6 : bt_success;
		sel7 : bt_fallback(safety_check7, backup7);
		safety_check7 : bt_non_blocking_skill;
		backup7 : bt_success;
		linkPar25 : bt_parallel(2, linkPar22, linkPar23);
		linkPar22 : bt_parallel(2, linkPar16, linkPar17);
		linkPar16 : bt_parallel(2, linkPar4, linkPar5);
		linkPar4 : bt_parallel(2, sel8, sel9);
		sel8 : bt_fallback(safety_check8, backup8);
		safety_check8 : bt_non_blocking_skill;
		backup8 : bt_success;
		sel9 : bt_fallback(safety_check9, backup9);
		safety_check9 : bt_non_blocking_skill;
		backup9 : bt_success;
		linkPar5 : bt_parallel(2, sel10, sel11);
		sel10 : bt_fallback(safety_check10, backup10);
		safety_check10 : bt_non_blocking_skill;
		backup10 : bt_success;
		sel11 : bt_fallback(safety_check11, backup11);
		safety_check11 : bt_non_blocking_skill;
		backup11 : bt_success;
		linkPar17 : bt_parallel(2, linkPar6, linkPar7);
		linkPar6 : bt_parallel(2, sel12, sel13);
		sel12 : bt_fallback(safety_check12, backup12);
		safety_check12 : bt_non_blocking_skill;
		backup12 : bt_success;
		sel13 : bt_fallback(safety_check13, backup13);
		safety_check13 : bt_non_blocking_skill;
		backup13 : bt_success;
		linkPar7 : bt_parallel(2, sel14, sel15);
		sel14 : bt_fallback(safety_check14, backup14);
		safety_check14 : bt_non_blocking_skill;
		backup14 : bt_success;
		sel15 : bt_fallback(safety_check15, backup15);
		safety_check15 : bt_non_blocking_skill;
		backup15 : bt_success;
		linkPar23 : bt_parallel(2, linkPar18, linkPar19);
		linkPar18 : bt_parallel(2, linkPar8, linkPar9);
		linkPar8 : bt_parallel(2, sel16, sel17);
		sel16 : bt_fallback(safety_check16, backup16);
		safety_check16 : bt_non_blocking_skill;
		backup16 : bt_success;
		sel17 : bt_fallback(safety_check17, backup17);
		safety_check17 : bt_non_blocking_skill;
		backup17 : bt_success;
		linkPar9 : bt_parallel(2, sel18, sel19);
		sel18 : bt_fallback(safety_check18, backup18);
		safety_check18 : bt_non_blocking_skill;
		backup18 : bt_success;
		sel19 : bt_fallback(safety_check19, backup19);
		safety_check19 : bt_non_blocking_skill;
		backup19 : bt_success;
		linkPar19 : bt_parallel(2, linkPar10, linkPar11);
		linkPar10 : bt_parallel(2, sel20, sel21);
		sel20 : bt_fallback(safety_check20, backup20);
		safety_check20 : bt_non_blocking_skill;
		backup20 : bt_success;
		sel21 : bt_fallback(safety_check21, backup21);
		safety_check21 : bt_non_blocking_skill;
		backup21 : bt_success;
		linkPar11 : bt_parallel(2, sel22, sel23);
		sel22 : bt_fallback(safety_check22, backup22);
		safety_check22 : bt_non_blocking_skill;
		backup22 : bt_success;
		sel23 : bt_fallback(safety_check23, backup23);
		safety_check23 : bt_non_blocking_skill;
		backup23 : bt_success;
		tick_generator : bt_tick_generator(linkPar26);
LTLSPEC G (safety_check0.output = bt_output_false -> backup0.enable = TRUE);
LTLSPEC G (safety_check0.output = bt_output_false -> backup0.enable = FALSE);
LTLSPEC G (safety_check1.output = bt_output_false -> backup1.enable = TRUE);
LTLSPEC G (safety_check1.output = bt_output_false -> backup1.enable = FALSE);
LTLSPEC G (safety_check2.output = bt_output_false -> backup2.enable = TRUE);
LTLSPEC G (safety_check2.output = bt_output_false -> backup2.enable = FALSE);
LTLSPEC G (safety_check3.output = bt_output_false -> backup3.enable = TRUE);
LTLSPEC G (safety_check3.output = bt_output_false -> backup3.enable = FALSE);
LTLSPEC G (safety_check4.output = bt_output_false -> backup4.enable = TRUE);
LTLSPEC G (safety_check4.output = bt_output_false -> backup4.enable = FALSE);
LTLSPEC G (safety_check5.output = bt_output_false -> backup5.enable = TRUE);
LTLSPEC G (safety_check5.output = bt_output_false -> backup5.enable = FALSE);
LTLSPEC G (safety_check6.output = bt_output_false -> backup6.enable = TRUE);
LTLSPEC G (safety_check6.output = bt_output_false -> backup6.enable = FALSE);
LTLSPEC G (safety_check7.output = bt_output_false -> backup7.enable = TRUE);
LTLSPEC G (safety_check7.output = bt_output_false -> backup7.enable = FALSE);
LTLSPEC G (safety_check8.output = bt_output_false -> backup8.enable = TRUE);
LTLSPEC G (safety_check8.output = bt_output_false -> backup8.enable = FALSE);
LTLSPEC G (safety_check9.output = bt_output_false -> backup9.enable = TRUE);
LTLSPEC G (safety_check9.output = bt_output_false -> backup9.enable = FALSE);
LTLSPEC G (safety_check10.output = bt_output_false -> backup10.enable = TRUE);
LTLSPEC G (safety_check10.output = bt_output_false -> backup10.enable = FALSE);
LTLSPEC G (safety_check11.output = bt_output_false -> backup11.enable = TRUE);
LTLSPEC G (safety_check11.output = bt_output_false -> backup11.enable = FALSE);
LTLSPEC G (safety_check12.output = bt_output_false -> backup12.enable = TRUE);
LTLSPEC G (safety_check12.output = bt_output_false -> backup12.enable = FALSE);
LTLSPEC G (safety_check13.output = bt_output_false -> backup13.enable = TRUE);
LTLSPEC G (safety_check13.output = bt_output_false -> backup13.enable = FALSE);
LTLSPEC G (safety_check14.output = bt_output_false -> backup14.enable = TRUE);
LTLSPEC G (safety_check14.output = bt_output_false -> backup14.enable = FALSE);
LTLSPEC G (safety_check15.output = bt_output_false -> backup15.enable = TRUE);
LTLSPEC G (safety_check15.output = bt_output_false -> backup15.enable = FALSE);
LTLSPEC G (safety_check16.output = bt_output_false -> backup16.enable = TRUE);
LTLSPEC G (safety_check16.output = bt_output_false -> backup16.enable = FALSE);
LTLSPEC G (safety_check17.output = bt_output_false -> backup17.enable = TRUE);
LTLSPEC G (safety_check17.output = bt_output_false -> backup17.enable = FALSE);
LTLSPEC G (safety_check18.output = bt_output_false -> backup18.enable = TRUE);
LTLSPEC G (safety_check18.output = bt_output_false -> backup18.enable = FALSE);
LTLSPEC G (safety_check19.output = bt_output_false -> backup19.enable = TRUE);
LTLSPEC G (safety_check19.output = bt_output_false -> backup19.enable = FALSE);
LTLSPEC G (safety_check20.output = bt_output_false -> backup20.enable = TRUE);
LTLSPEC G (safety_check20.output = bt_output_false -> backup20.enable = FALSE);
LTLSPEC G (safety_check21.output = bt_output_false -> backup21.enable = TRUE);
LTLSPEC G (safety_check21.output = bt_output_false -> backup21.enable = FALSE);
LTLSPEC G (safety_check22.output = bt_output_false -> backup22.enable = TRUE);
LTLSPEC G (safety_check22.output = bt_output_false -> backup22.enable = FALSE);
LTLSPEC G (safety_check23.output = bt_output_false -> backup23.enable = TRUE);
LTLSPEC G (safety_check23.output = bt_output_false -> backup23.enable = FALSE);
LTLSPEC G (safety_check24.output = bt_output_false -> backup24.enable = TRUE);
LTLSPEC G (safety_check24.output = bt_output_false -> backup24.enable = FALSE);
LTLSPEC G (safety_check25.output = bt_output_false -> backup25.enable = TRUE);
LTLSPEC G (safety_check25.output = bt_output_false -> backup25.enable = FALSE);
LTLSPEC G (safety_check26.output = bt_output_false -> backup26.enable = TRUE);
LTLSPEC G (safety_check26.output = bt_output_false -> backup26.enable = FALSE);
LTLSPEC G (safety_check27.output = bt_output_false -> backup27.enable = TRUE);
LTLSPEC G (safety_check27.output = bt_output_false -> backup27.enable = FALSE);


MODULE bt_parallel(success_threshold, left_bt, right_bt)
	VAR
		enable : boolean;
		left_bt_stored_output : { bt_output_none, bt_output_running, bt_output_false, bt_output_true};
	ASSIGN
		left_bt.enable := enable;
		right_bt.enable := is_left_bt_active;
		init(left_bt_stored_output) := bt_output_none;
		next(left_bt_stored_output) :=
			case
				is_left_bt_active : left_bt.output;
				TRUE : left_bt_stored_output;
			esac;
	DEFINE
		is_left_bt_active := (left_bt.output != bt_output_none);
		is_right_bt_active := (right_bt.output != bt_output_none);
		true_output_count :=
		count(left_bt_stored_output = bt_output_true, right_bt.output = bt_output_true);
		running_output_count :=
		count(left_bt_stored_output = bt_output_running, right_bt.output = bt_output_running);
		output :=
			case
				is_right_bt_active & true_output_count >= success_threshold : bt_output_true;
				is_right_bt_active & success_threshold > true_output_count + running_output_count : bt_output_false;
				is_right_bt_active : bt_output_running;
				TRUE : bt_output_none;
			esac;
MODULE bt_non_blocking_skill
	IVAR
		input : {bt_input_false, bt_input_true };
	VAR
		output : { bt_output_none, bt_output_running, bt_output_false, bt_output_true};
		enable : boolean;
	ASSIGN
		init(output) := bt_output_none;
		next(output) :=
			case
				! enable : bt_output_none;
				input = bt_input_false : bt_output_false;
				input = bt_input_true : bt_output_true;
			esac;
MODULE bt_success
	VAR
		enable : boolean;
	DEFINE
		output := enable ? bt_output_true : bt_output_none;
MODULE bt_fallback(left_bt, right_bt)
	VAR
		enable : boolean;
	ASSIGN
		left_bt.enable := enable;
		right_bt.enable := (left_bt.output = bt_output_false);
	DEFINE
		output :=
			case
				left_bt.output in { bt_output_running, bt_output_true } : left_bt.output;
				TRUE : right_bt.output;
			esac;
MODULE bt_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := (top_level_bt.output != bt_output_none);
MODULE bt_single_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := FALSE;
