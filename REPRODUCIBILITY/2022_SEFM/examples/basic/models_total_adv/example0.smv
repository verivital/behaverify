MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [example_0_seq1.status, node_2.status, node_3.status];
		trace_running_source_2 := (statuses[2] = running) ? 2 : -2;
		trace_running_source_0 := 
			case
				!(trace_running_source_2 = -2) : trace_running_source_2;
				TRUE : -2;
			esac;
		resume_point_0 := 
			case
				(resume_from_node_0 in {2}) : 1;
				TRUE : -2;
			esac;
		example_0_seq1.active := TRUE;
	VAR
		node_names : define_nodes;
		resume_from_node_0 : {0, 2};
		example_0_seq1 : node_sequence_with_memory2(node_2, node_3, resume_point_0);
		node_2 : node_default();
		node_3 : node_default();
	ASSIGN
		init(resume_from_node_0) := 0;
		next(resume_from_node_0) := 
			case
				(statuses[0] in {success, failure}) : 0;
				TRUE : max(trace_running_source_0, 0);
			esac;
MODULE node_default()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := input_status;
	VAR
		input_status : {success, running, failure};
MODULE node_sequence_with_memory2(child_0, child_1, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
MODULE define_nodes
	DEFINE
		example_0_seq1 := 0;
		node_2 := 1;
		node_3 := 2;
