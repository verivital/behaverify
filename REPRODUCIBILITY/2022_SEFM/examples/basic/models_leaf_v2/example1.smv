MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [seq1.status, node_w.status, sel1.status, node_x.status, node_y.status, node_z.status];
		next_node := [ascent_from_0, ascent_from_1, ascent_from_2, ascent_from_3, ascent_from_4, ascent_from_5];
		descent_from_0 := 
			case
				(active_node <1) & (resume_relevant_child_1) : descent_from_1;
				(active_node <2) & (resume_relevant_child_2) : descent_from_2;
				(active_node <1) : descent_from_1;
				(active_node <2) : descent_from_2;
				TRUE : -2;
			esac;
		descent_from_1 := 1;
		descent_from_2 := 
			case
				(active_node <3) : descent_from_3;
				(active_node <4) : descent_from_4;
				(active_node <5) : descent_from_5;
				TRUE : -2;
			esac;
		descent_from_3 := 3;
		descent_from_4 := 4;
		descent_from_5 := 5;
		ascent_from_0 := 
			case
				(statuses[0] = invalid) : descent_from_0;
				TRUE : -1;
			esac;
		ascent_from_1 := ascent_from_0;
		ascent_from_2 := 
			case
				(statuses[2] = invalid) : descent_from_2;
				TRUE : ascent_from_0;
			esac;
		ascent_from_3 := ascent_from_2;
		ascent_from_4 := ascent_from_2;
		ascent_from_5 := ascent_from_2;
		relevant_child_0 := 
			case
				 !(relevant_child_1 = -2) : 1;
				 !(relevant_child_2 = -2) : 2;
				TRUE : -2;
			esac;
		resume_relevant_child_0 := 
			case
				(resume_from_node_0 = 0) : TRUE ;
				(resume_relevant_child_1) : TRUE;
				(resume_relevant_child_2) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_0 := 
			case
				(relevant_child_0 = 1) : node_w.status;
				(relevant_child_0 = 2) : sel1.status;
				TRUE : invalid;
			esac;
		relevant_child_1 := (active_node = 1) ? -1 : -2 ;
		resume_relevant_child_1 := (resume_from_node_0 = 1) ? TRUE : FALSE ;
		relevant_child_2 := 
			case
				 !(relevant_child_3 = -2) : 3;
				 !(relevant_child_4 = -2) : 4;
				 !(relevant_child_5 = -2) : 5;
				TRUE : -2;
			esac;
		resume_relevant_child_2 := 
			case
				(resume_from_node_0 = 2) : TRUE ;
				(resume_relevant_child_3) : TRUE;
				(resume_relevant_child_4) : TRUE;
				(resume_relevant_child_5) : TRUE;
				TRUE : FALSE;
			esac;
		relevant_status_2 := 
			case
				(relevant_child_2 = 3) : node_x.status;
				(relevant_child_2 = 4) : node_y.status;
				(relevant_child_2 = 5) : node_z.status;
				TRUE : invalid;
			esac;
		relevant_child_3 := (active_node = 3) ? -1 : -2 ;
		resume_relevant_child_3 := (resume_from_node_0 = 3) ? TRUE : FALSE ;
		relevant_child_4 := (active_node = 4) ? -1 : -2 ;
		resume_relevant_child_4 := (resume_from_node_0 = 4) ? TRUE : FALSE ;
		relevant_child_5 := (active_node = 5) ? -1 : -2 ;
		resume_relevant_child_5 := (resume_from_node_0 = 5) ? TRUE : FALSE ;
		last_child_2 := 5;
		last_child_0 := 2;
	VAR
		active_node : {-2, -1,1, 3, 4, 5};
		random_status : {running, success, failure};
		node_names : define_nodes;
		resume_from_node_0 : {0, 2};
		seq1 : node_sequence(relevant_child_0, relevant_status_0, last_child_0);
		node_w : node_default(active_node, 1, random_status);
		sel1 : node_selector(relevant_child_2, relevant_status_2, last_child_2);
		node_x : node_default(active_node, 3, random_status);
		node_y : node_default(active_node, 4, random_status);
		node_z : node_default(active_node, 5, random_status);
	INVAR
		active_node = -1 -> random_status = running;
	ASSIGN
		init(active_node) := -1;
		init(resume_from_node_0) := 0;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) : next_node[0];
				TRUE : next_node[active_node];
			esac;
		next(resume_from_node_0) := 
			case
				(statuses[0] in {success, failure}) : 0;
				(statuses[2] = running) : 2;
				(resume_from_node_0 = 2) & !(next(relevant_child_2) = -2) : 0;
				(statuses[max(0, resume_from_node_0)] in {success, failure}) : 0;
				TRUE : resume_from_node_0;
			esac;
MODULE node_selector(relevant_child, relevant_status, last_child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(last_child = -2) : failure;
				(relevant_child <= 0) : invalid;
				(relevant_status = running) : running;
				(relevant_status = success) : success;
				(last_child = relevant_child) & (relevant_status = failure) : failure;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id, random_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(active_node = id) : random_status;
				TRUE : invalid;
			esac;
MODULE node_sequence(relevant_child, relevant_status, last_child)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				(last_child = -2) : success;
				(relevant_child <= 0) : invalid;
				(relevant_status = running) : running;
				(relevant_status = failure) : failure;
				(last_child = relevant_child) & (relevant_status = success) : success;
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		seq1 := 0;
		node_w := 1;
		sel1 := 2;
		node_x := 3;
		node_y := 4;
		node_z := 5;
