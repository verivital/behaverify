    //This is intended to be used with BehaVerify
    //Author: Serena Serafina Serbinowska
    //last edit: 2023-09-19
BehaviorModel:
    'configuration' '{'
    (hypersafety ?= 'hypersafety')
    (use_reals ?= 'use_reals')
    '}' ('end_configuration')?
    'enumerations' '{'
    enumerations *= STRING[',']
    '}' ('end_enumerations')?
    'constants' '{'
    constants *= constant_declaration[',']
    '}' ('end_constants')?
    'variables' '{'
    variables *= variable
    '}' ('end_variables')?
    'environment_update' '{'
    update *= variable_statement
    '}' ('end_environment_update')?
    'checks' '{'
    check_nodes *= check_node
    '}' ('end_checks')?
    'environment_checks' '{'
    environment_checks *= check_environment_node
    '}' ('end_environment_checks')?
    'actions' '{'
    action_nodes *= action_node
    '}' ('end_actions')?
    'sub_trees' '{'
    sub_trees *= sub_tree
    '}' ('end_sub_trees')?
    'tree' '{' root = node '}' ('end_tree')?
    'tick_prerequisite' '{'
    tick_condition = code_statement
    '}' ('end_tick_prerequisite')?
    'specifications' '{'
    specifications *= specification
    '}' ('end_specifications')?
;

//comments so that we can explain what is happening in a .tree file
Comment:
    /#\{([^a]|a)*?\}#/
;//I can't get it to match newlines without doing something janky like this.
    
    //--------------------SEC:NODES-------------------------------
    //nodes are either composite, decorator, or leaf. 

node:
    sub_tree_reference | composite_node | decorator_node | leaf_node
;

    sub_tree :
    'sub_tree' '{'
    name = ID
    sub_root = node
    '}' ('end_sub_tree')?
;
    sub_tree_reference :
    'insert' '{' 
    sub_root = [sub_tree]
    '}' ('end_insert')?
;
    
    composite_node:
    'composite' '{'
    name = ID
    ((node_type = 'parallel' 'policy'
    (parallel_policy = 'success_on_all' | parallel_policy = 'success_on_one'))
    |
    (node_type = 'sequence') | (node_type = 'selector'))
    (memory = 'with_partial_memory' | memory = 'with_true_memory' | memory = '')
    'children' '{'
    children += node
    '}' ('end_children')?
    '}' ('end_composite')?
;
    
    decorator_node:
    'decorator' '{'
    name = ID
    (
    (node_type = 'X_is_Y' 'X' x = status 'Y' y = status) |
    (node_type = 'inverter')
    )
    'child' '{' child = node '}' ('end_child')?
    '}' ('end_decorator')?
;

    leaf_node:
    ((leaf = [check_node]) |
    (leaf = [action_node]) |
    (leaf = [check_environment_node]))
    '{'
    arguments *= meta_code[',']
    '}'
;
    possible_argument_types:
    'INT' | 'ENUM' | 'BOOLEAN' | 'REAL'
;

    argument_declaration:
    argument_name = ID ':=' argument_type = possible_argument_types
;
    
    check_node:
    (node_type = 'check') '{'
    name = ID
    'arguments' '{' arguments *= argument_declaration[','] '}' ('end_arguments')?
    'read_variables' '{' read_variables *= [variable][',']  '}' ('end_read_variables')?
    'condition' '{' condition = code_statement '}' ('end_condition')?
    '}' ('end_check')?
;
    check_environment_node:
    (node_type = 'environment_check') '{'
    name = ID
    'arguments' '{' arguments *= argument_declaration[','] '}' ('end_arguments')?
    'read_variables' '{' read_variables *= [variable][',']  '}' ('end_read_variables')?
    'condition' '{' condition = code_statement '}' ('end_condition')?
    '}' ('end_environment_check')?
;
    
    action_node:
    (node_type = 'action') '{'
    name = ID
    'arguments' '{' arguments *= argument_declaration[','] '}' ('end_arguments')?
    'local_variables' '{' local_variables *= [variable][','] '}' ('end_local_variables')?
    'read_variables' '{' read_variables *= [variable][','] '}' ('end_read_variables')?
    'write_variables' '{' write_variables *= [variable][','] '}' ('end_write_variables')?
    'initial_values' '{'
    init_statements *= variable_statement_initial
    '}' ('end_initial_values')?
    'update' '{'
    pre_update_statements *= statement
    return_statement = return_statement
    post_update_statements *= statement
    '}' ('end_update')?
    '}' ('end_action')?
;

    //--------------------SEC:VARIABLES---------------------------
    variable:
    'variable' '{'
    ((var_type = 'bl') | (var_type = 'local') | (var_type = 'env'))
    name = ID
    (('array' array_size = meta_code
    ((model_as = 'VAR' domain = variable_domain) |
    (model_as = 'FROZENVAR' domain = variable_domain) |
    (model_as = 'DEFINE' ((domain = 'INT') | (domain = 'ENUM') | (domain = 'BOOLEAN') | (domain = 'REAL'))))
    'default' default_value = meta_code
    ((constant_index = 'constant_index' assigns *= array_index_constant) | (constant_index = '' assigns *= array_index)))
    |
    (((model_as = 'VAR' domain = variable_domain) |
    (model_as = 'FROZENVAR' domain = variable_domain) |
    (model_as = 'DEFINE' ((domain = 'INT') | (domain = 'ENUM') | (domain = 'BOOLEAN') | (domain = 'REAL'))))
    assign = assign_value))
    '}' ('end_variable')?
;
    
    variable_domain:
    (boolean = 'BOOLEAN') |
    (true_int = 'INT') |
    (true_real = 'REAL') |
    ('[' min_val = meta_code ',' max_val = meta_code ']') |
    ('{' domain_codes += meta_code[','] '}')
;
    
    constant_value:
    STRICTFLOAT | INT | STRING | BOOL
;
    
    constant_or_reference:
    (constant = constant_value) | (reference = ID)
;

    constant_declaration:
    name = ID ':=' val = constant_value
;
    

status:
    'success' | 'running' | 'failure'
;

    //--------------------SEC:STATEMENTS--------------------------
    
statement:
    (variable_statement = variable_statement) |
    (read_statement = read_statement) |
    (write_statement = write_statement)
;
    
    read_statement:
    'read_environment' '{'
    name = ID
    ('condition_variable' '{'
    (('(' constant_index = 'constant_index' condition_variable = [variable] ',' index_of = meta_code ')') |
    ('(' constant_intdex = '' condition_variable = [variable] ',' index_of = code_statement ')') |
    (condition_variable = [variable]))
    '}' ('end_condition_variable')?)?
    'condition' '{'
    ((non_determinism = 'non_determinism' ',') | (non_determinism = '')) condition = code_statement
    '}' ('end_condition')?
    variable_statements += variable_statement
    '}' ('end_read_environment')?
;
    
    write_statement:
    'write_environment' '{'
    name = ID
    update *= variable_statement
    '}' ('end_write_environment')?
;

    //--------------------SEC:VAR_STATEMENTS--------------------------

    variable_statement:
    'variable_statement' '{'
    instant ?= 'instant'
    variable = [variable]
    (((constant_index = 'constant_index' assigns += array_index_constant) | (constant_index = '' assigns += array_index))
    |
    (assign = assign_value))
    '}' ('end_variable_statement')?
    ;

    variable_statement_initial:
    'variable_statement' '{'
    variable = [variable]
    (('default' default_value = meta_code ((constant_index = 'constant_index' assigns *= array_index_constant) | (constant_index = '' assigns *= array_index))) | (assign = assign_value))
    '}' ('end_variable_statement')?
;
    
    return_statement:
    'return_statement' '{'
    case_results *=  status_case_result
    default_result = status_default_result
    '}' ('end_return_statement')?
;
    //--------------------SEC:ARRAY_INDEX_OF--------------------------
    array_index:
    'index_of' '{' index_expr += code_statement[','] '}' ('end_index_of')?
    assign = assign_value
;
    array_index_constant:
    'index_of' '{' index_expr += meta_code[','] '}' ('end_index_of')?
    assign = assign_value
;
    assign_value:
    'assign' '{'
    case_results *= case_result
    default_result = default_result
    '}' ('end_assign')?
;

    //--------------------SEC:CASE_RESULT--------------------------

    case_result:
    'case' '{' condition = code_statement '}' ('end_case')?
    'result' '{'
    values += code_statement[',']
    '}' ('end_result')?
;
        
    default_result:
    'result' '{'
    values += code_statement[',']
    '}' ('end_result')?
;

    status_case_result:
    'case' '{' condition = code_statement '}' ('end_case')?
    'result' '{'
    status = status
    '}' ('end_result')?
;
    
    status_default_result:
    'result' '{'
    status = status
    '}' ('end_result')?
;

    //--------------------SEC:CODE--------------------------------

    meta_code:
    ('(' function_call = meta_function ')') |
    ('(' code_statement = meta_code ')') |
    (atom = constant_or_reference)
;

    code_statement:
    ('(' function_call = function ')') |
    ('(' code_statement = code_statement ')') |
    (atom = constant_or_reference (node_name = meta_code)? (read_at = meta_code)? (trace_num = meta_code)?)
;

    //--------------------SEC:FUNCTION_BL_LOCALS--------------------------------

    meta_function:
    (function_name = 'loop' ',' loop_variable = ID ',' (('{' loop_variable_domain += meta_code[','] '}') | ('[' min_val = meta_code ',' max_val = meta_code ']')) 'such_that' loop_condition = meta_code ',' values = meta_code) |
    (function_name = meta_function_names ',' values += meta_code[','])
;
   
    function:
    (function_name = 'loop' ',' loop_variable = ID ',' (('{' loop_variable_domain += meta_code[','] '}') | ('[' min_val = meta_code ',' max_val = meta_code ']')) 'such_that' loop_condition = meta_code ',' values = code_statement) |
    (function_name = 'index' ',' to_index = meta_code (node_name = meta_code)? (read_at = meta_code)? (trace_num = meta_code)? ',' values = code_statement) |
    (function_name = bounded_function_names ',' bound = bound_statement ',' values = code_statement) |
    (function_name = function_names ',' values += code_statement[',']) |
    (function_name = status_function_names ',' node_name = meta_code)
;

    bound_statement:
    '[' lower_bound = meta_code ',' upper_bound = meta_code ']'
;

    meta_function_names:
    'if' | 'abs' | 'max' | 'min' | 'sin' | 'cos' | 'exp' | 'tan' | 'ln' | 'not' | 'and' | 'or' | 'xor' | 'xnor' | 'imply' | 'equiv' | 'eq' | 'neq' | 'lte' | 'gte' | 'lt' | 'gt' | 'neg' | 'add' | 'sub' | 'mult' | 'idiv' | 'mod' | 'rdiv' | 'floor' | 'count'
;
    function_names:
    'if' | 'abs' | 'max' | 'min' | 'sin' | 'cos' | 'exp' | 'tan' | 'ln' | 'eq' | 'neq' | 'lte' | 'gte' | 'lt' | 'gt' | 'neg' | 'add' | 'sub' | 'mult' | 'idiv' | 'mod' | 'rdiv' | 'floor' | 'count' |
    //these functions permit the continuation of ltl/ctl specific functions
    'not' | 'and' | 'or' | 'xor' | 'xnor' | 'imply' | 'equiv' |
    //start of ltl specific
    'next' | 'globally' | 'finally' | 'until' | 'release' | 'previous' | 'not_previous_not' | 'historically' | 'once' | 'since' | 'triggered' | 
    //start of ctl specific
    'exists_globally' | 'exists_next' | 'exists_finally' | 'exists_until' | 'always_globally' | 'always_next' | 'always_finally' | 'always_until' 
;
    bounded_function_names:
    'globally_bounded' | 'finally_bounded' | 'until_bounded' | 'release_bounded' | 'historically_bounded' | 'once_bounded' | 'since_bounded' | 'triggered_bounded'
;
    status_function_names:
    //these functions permitted only in specifications
    'active' | 'success' | 'running' | 'failure'
;

specification:
    (spec_type = 'LTLSPEC' '{' code_statement = code_statement '}' ('end_LTLSPEC')?) |
    (spec_type = 'CTLSPEC' '{' code_statement = code_statement '}' ('end_CTLSPEC')?) |
    (spec_type = 'INVARSPEC' '{' code_statement = code_statement '}' ('end_INVARSPEC')?)
;
