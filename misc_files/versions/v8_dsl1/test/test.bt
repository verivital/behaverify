variables {
	variable {
		c
		VAR
		BOOLEAN
	} end_variable
} end_variables

local_variables {
	variable {
		a
		DEFINE
		[1, 1]
	} end_variable

	variable {
		b
		VAR
		[0, 2]
	} end_variable
} end_local_variables

environment_variables { } end_environment_variables

environment { initial_values { } end_initial_values update_values { } end_update_values } end_environment

checks {
	check {
		guard
		read_variables { c } end_read_variables
		condition { (equal, c, c) } end_condition
	} end_check
} end_checks

actions {
	action {
		action
		read_variables {} end_read_variables
		write_variables {c} end_write_variables
		init {
			variable_statement {
				local a
				result {
				       1
				} end_result
			} end_variable_statement
			variable_statement {
				local b
				result {
					(addition, local a, 1) 
				} end_result
			} end_variable_statement
			variable_statement {
				c
				case { (equal, local a, local b) } end_case
				result { True } end_result
				result { False } end_result
			} end_variable_statement
		} end_init
		update {
			variable_statement {
				local b
				result {
					local a,
					(addition, local a, 1)
				} end_result
			} end_variable_statement
			variable_statement {
				c
				case {(less_than_or_equal, local a, local b)} end_case
				result { True } end_result
				result { False } end_result
			} end_variable_statement
			return_statement {
				case { c } end_case
				result {
					success True
					failure False
					running False
				} end_result
				result {
					success False
					failure True
					running True
				} end_result
			} end_return_statement
		} end_update
	} end_action
} end_actions

root_node composite {
	root parallel
	policy success_on_all
	memory False
	children {
		composite {
			sel selector
			memory False
			children {
				decorator {
					dec X_is_Y
					X running
					Y success
					child guard
				} end_decorator
				action
			} end_children
		} end_composite
		composite {
			seq sequence
			memory False
			children {
				guard
				action
			} end_children
		} end_composite
	} end_children
} end_composite