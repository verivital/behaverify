variables {
	variable {
		local a
		DEFINE
		[1, 1]
		used_before_tick False
		used_after_tick False
	} end_variable

	variable {
		local b
		VAR
		[0, 2]
		used_before_tick False
		used_after_tick False
	} end_variable

	variable {
		c
		VAR
		BOOLEAN
		used_before_tick False
		used_after_tick False
		} end_variable
} end_variables

checks {
	check {
		guard
		comparison_operator ==
		left_hand_side {c} end_left_hand_side
		right_hand_side {c} end_right_hand_side
	} end_check
} end_checks

actions {
	action {
		action
		init {
			variable_statement {
				local a
				result {
				       '1'
				} end_result
			} end_variable_statement
			variable_statement {
				local b
				result {
					local a '+ 1'
				} end_result
			} end_variable_statement
			variable_statement {
				c
				case {
					comparison_operator ==
					left_hand_side {local a} end_left_hand_side
					right_hand_side {local b} end_right_hand_side
				} end_case
				result {
					True
				} end_result
				result {
					False
				} end_result
			} end_variable_statement
		} end_init
		update {
			variable_statement {
				local b
				result {
					local a,
					local a  '+ 1'
				} end_result
			} end_variable_statement
			variable_statement {
				c
				case {
					comparison_operator ==
					left_hand_side {local a} end_left_hand_side
					right_hand_side {local b} end_right_hand_side
				} end_case
				result {
					True
				} end_result
				result {
					False
				} end_result
			} end_variable_statement
			return_statement {
				case {
					comparison_operator ==
					left_hand_side {c} end_left_hand_side
					right_hand_side {True} end_right_hand_side
				} end_case
				result {
					success True
					failure False
					running False
				} end_result
				result {
					success False
					failure True
					running True
				} end_result
			} end_return_statement
		} end_update
	} end_action
} end_actions

root_node composite {
	root parallel
	policy success_on_all
	memory False
	children {
		composite {
			sel selector
			memory False
			children {
				decorator {
					dec X_is_Y
					X running
					Y success
					child guard
				} end_decorator
				action
			} end_children
		} end_composite
		composite {
			seq sequence
			memory False
			children {
				guard
				action
			} end_children
		} end_composite
	} end_children
} end_composite