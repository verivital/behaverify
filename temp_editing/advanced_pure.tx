BehaviorModel:
    'variables' '{'
    variables *= variable
    '}' 'end_variables'
    'local_variables' '{'
    local_variables *= variable
    '}' 'end_local_variables'
    'environment_variables' '{'
    environment_variables *= environment_variable
    '}' 'end_environment_variables'
    'checks' '{'
    check_nodes *= check_node
    '}' 'end_checks'
    'actions' '{'
    action_nodes *= action_node
    '}' 'end_actions'
    'root_node' root = node
;
    
    
variable:
    'variable' '{'
    name = ID
    ((model_as = 'VAR') | (model_as = 'FROZENVAR') | (model_as = 'DEFINE'))
    domain = variable_domain
    '}' 'end_variable'
;
    environment_variable:
    'environment_variable' '{'
    name = ID
    ((model_as = 'VAR') | (model_as = 'FROZENVAR') | (model_as = 'DEFINE'))
    domain = variable_domain
    ('initial_value' '{' initial = variable_statement '}' 'end_initial_value')?
    ('between_tick' '{' statement = variable_statement '}' 'end_between_tick')?
    '}' 'end_enviroment_variable'
;
    
    variable_domain:
    ('[' min_val = INT ',' max_val = INT ']') | (boolean = 'BOOLEAN') | ('{' enums += ID[','] '}')
;
    
node:
    composite_node | decorator_node | leaf_node
;
    composite_node:
    'composite' '{'
    name = ID
    ((node_type = 'parallel' 'policy' (parallel_policy = 'success_on_all' | parallel_policy = 'success_on_one')) | (node_type = 'sequence') | (node_type = 'selector'))
    'memory' memory=BOOL
    'children' '{'
    children += node
    '}' 'end_children'
    '}' 'end_composite'
;
    
    decorator_node:
    'decorator' '{'
    name = ID
    node_type = 'X_is_Y'
    'X' x = status
    'Y' y = status
    'child' child = node 
    '}' 'end_decorator'
;
status:
    'success' | 'running' | 'failure'
;
    
    
    leaf_node:
    (leaf = [check_node]) | (leaf = [action_node])
;
    
    check_node:
    (node_type = 'check') '{'
    name = ID
    ('start_python_code' '{' python_code = STRING '}' 'end_python_code')?
    ('start_condition' '{' condition = code_statement '}' 'end_condition')?
    '}' 'end_check'
;
    
    action_node:
    (node_type = 'action') '{'
    name = ID
    'init' '{'
    init_statements *= variable_statement
    '}' 'end_init'
    'update' '{'
    pre_update_statements *= variable_statement
    return_statement = return_statement
    post_update_statements *= variable_statement
    '}' 'end_update'
    '}' 'end_action'
;
    
    variable_statement:
    'variable_statement' '{'
    is_local ?= 'local' variable = [variable]
    case_results *= variable_case_result
    default_result = variable_default_result
    '}' 'end_variable_statement'
;
    
    return_statement:
    'return_statement' '{'
    case_results *=  status_case_result
    default_result = status_default_result
    '}' 'end_return_statement'
;

    variable_case_result:
    ('start_python_code' '{' python_code = STRING '}' 'end_python_code')?
    ('case' '{' condition = code_statement '}' 'end_case')
    'result' '{'
    values += code_statement[',']
    '}' 'end_result'
;
        
    variable_default_result:
    ('start_python_code' '{' python_code = STRING '}' 'end_python_code')?
    'result' '{'
    values += code_statement[',']
    '}' 'end_result'
;

    status_case_result:
    ('start_python_code' '{' python_code = STRING '}' 'end_python_code')?
    ('case' '{' condition = code_statement '}' 'end_case')
    'result' '{'
    'success' can_success = BOOL
    'failure' can_failure = BOOL
    'running' can_running = BOOL
    '}' 'end_result'
;
    
    status_default_result:
    ('start_python_code' '{' python_code = STRING '}' 'end_python_code')?
    'result' '{'
    'success' can_success = BOOL
    'failure' can_failure = BOOL
    'running' can_running = BOOL
    '}' 'end_result'
;

    code_statement:
    (constant = INT) | (constant = FLOAT) | (constant = BOOL) | (constant = STRING) |
    (is_local ?= 'local' variable = [variable]) |
    ('(' function_call = function ')') |
    ('(' code_statement = code_statement ')')
;

function:
    (function_name = 'abs' ',' value1 = code_statement) |
    (function_name = 'max' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'min' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'sin' ',' value1 = code_statement) |
    (function_name = 'cos' ',' value1 = code_statement) |
    (function_name = 'tan' ',' value1 = code_statement) |
    (function_name = 'ln' ',' value1 = code_statement) |
    (function_name = 'not' ',' value1 = code_statement) |
    (function_name = 'and' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'or' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'xor' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'xnor' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'implies' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'equivalent' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'equal' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'not_equal' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'less_than' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'greater_than' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'less_than_or_equal' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'greater_than_or_equal' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'negative' ',' value1 = code_statement) |
    (function_name = 'addition' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'subtraction' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'multiplication' ',' value1 = code_statement ',' value2 = code_statement) |
    (function_name = 'division' ',' value1 = code_statement ',' value2 = code_statement)
;
    
