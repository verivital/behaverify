BehaviorModel:
	'system' name=ID';'
	simpleTypes *= SimpleType
	messageTypes *= MessageType
	rosTopics *= Topic
    bbVariables *= BBVar
    (modeling_variables=modeling_variables)?
	args *= Arg
	bbEvents *= BBEvent
	bbNodes *= BBNode
	checkNodes *= CheckNode
	taskNodes *= BehaviorNode
    'tree' '(' 'updatetime' '=' updatetime=FLOAT ',' 'timeout' '=' timeout=FLOAT ')' tree=BTree
;



SimpleType:
	'type' name=ID ';'
	;

MessageType:
	'message' name=ID package=ID
		  fields *= Field
    'end'(';')?
	;

Type:	SimpleType | MessageType
	;

Field:	type=[Type](array='['(count=INT)?']')?  name=ID ';'
	;

Topic:	'topic' type=[MessageType] name=ID topic_string=/([^\s;]+)/ ';'
	;



    

    variable_name:
    "'"variable_name=ID"'" | '"'variable_name=ID'"' | variable_name=ID | variable_name='None'
;

    access_node_name:
    ("'"node_name=ID"'" | '"'node_name=ID'"' | node_name=ID) (',')?
;
    next_exist_line:
    variable_name=variable_name ':' exist_val=BOOL (',')?
;
    
VariableModelType:
    'DEFINE' | 'FROZENVAR' | 'VAR' 
;
    string_or_none:
    (STRING | 'None')
;
    int_or_none:
    (INT | 'None')
;
    condition_pair:
    '(' left_hand_side+=int_or_string ',' right_hand_side+=int_or_string ')'
;
    
    int_or_string:
    (INT | STRING)
;
    int_or_string_or_none:
    (INT | STRING | 'None')
;
    int_comma:
    INT (',')?
;

    
    modeling_variables:
    "'variables'" ':' '{'
    variables *= modeling_variable
    '}'
;
    
keyword_access:  
    "'access'" | '"access"' | 'access'
;
    keyword_always_exist:
    "'always_exist'" | '"always_exist"' | 'always_exist'
;
    keyword_auto_change:
    "'auto_change'" | '"auto_change"' | 'auto_change'
;
    keyword_custom_value_range:
    "'custom_value_range'" | '"custom_value_range"' | 'custom_value_range'
;
    keyword_init_exist:
    "'init_exist'" | '"init_exist"' | 'init_exist'
;
    keyword_init_value:
    "'init_value'" | '"init_value"' | 'init_value'
;
    keyword_max_value:
    "'max_value'" | '"max_value"' | 'max_value'
;
    keyword_min_value:
    "'min_value'" | '"min_value"' | 'min_value'
;
    keyword_mode:
    "'mode'" | '"mode"' | 'mode'
;
    keyword_next_exist:
    "'next_exist'" | '"next_exist"' | 'next_exist'
;
    keyword_next_value:
    "'next_value'" | '"next_value"' | 'next_value'
;
    keyword_non_variable:
    "'non-variable'" | '"non-variable"' | 'non-variable'
;
    keyword_stages:
    "'stages'" | '"stages"' | 'stages'
;
    keyword_use_stages:
    "'use_stages'" | '"use_stages"' | 'use_stages'
;
    keyword_variable_id:
    "'variable_id'" | '"variable_id"' | 'variable_id'
;
    keyword_variable_name:
    "'variable_name'" | '"variable_name"' | 'variable_name'
;
    keyword_initial_stage:
    "'initial_stage'" | '"initial_stage"' | 'initial_stage'
;
    keyword_next_stage:
    "'next_stage'" | '"next_stage"' | 'next_stage'
;
    keyword_prev_stage:
    "'prev_stage'" | '"prev_stage"' | 'prev_stage'
;
    keyword_last_stage:
    "'last_stage'" | '"last_stage"' | 'last_stage'
;
    

    internal_value_old:   
    (('"')? ("'")? keyword=keyword_access ("'")? ('"')? ':' (('set' '(' ('[')?) | '{')
    value *=  access_node_name
    (((']')? ')') | '}') (',')?) |
    (('"')? ("'")? keyword=keyword_always_exist ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword=keyword_auto_change ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword=keyword_custom_value_range ("'")? ('"')? ':' value='None' (',')?) |
    (('"')? ("'")? keyword=keyword_custom_value_range ("'")? ('"')? ':' value+=STRING (',')?) |
    (('"')? ("'")? keyword=keyword_init_exist ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword=keyword_init_value ("'")? ('"')? ':' value='None' (',')?) |
    (('"')? ("'")? keyword=keyword_init_value ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword=keyword_init_value ("'")? ('"')? ':' value+=STRING (',')?) |
    (('"')? ("'")? keyword=keyword_max_value ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword=keyword_min_value ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword=keyword_mode ("'")? ('"')? ':' ('"')? ("'")? value=VariableModelType ("'")? ('"')? (',')?)  |
    (('"')? ("'")? keyword=keyword_next_exist ("'")? ('"')? ':' '{'
    value *= next_exist_line
    '}' (',')?) |
    (('"')? ("'")? keyword=keyword_next_value ("'")? ('"')? ':' value='None' (',')?) |
    (('"')? ("'")? keyword=keyword_next_value ("'")? ('"')? ':' '[' value+=condition_pair[','] ']' (',')?) |
    (('"')? ("'")? keyword=keyword_non_variable ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword=keyword_stages ("'")? ('"')? ':' '['
    value *= INT[',']
    ']' (',')?) |
    (('"')? ("'")? keyword=keyword_use_stages ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword=keyword_variable_id ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword=keyword_variable_name ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword=keyword_initial_stage ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword=keyword_next_stage ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword=keyword_prev_stage ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword=keyword_last_stage ("'")? ('"')? ':' value=variable_name (',')?)
;

    internal_value:   
    (('"')? ("'")? keyword='access' ("'")? ('"')? ':' (('set' '(' ('[')?) | '{')
    value *=  access_node_name
    (((']')? ')') | '}') (',')?) |
    (('"')? ("'")? keyword='always_exist' ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword='auto_change' ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword='custom_value_range' ("'")? ('"')? ':' value='None' (',')?) |
    (('"')? ("'")? keyword='custom_value_range' ("'")? ('"')? ':' value+=STRING (',')?) |
    (('"')? ("'")? keyword='init_exist' ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword='init_value' ("'")? ('"')? ':' value='None' (',')?) |
    (('"')? ("'")? keyword='init_value' ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword='init_value' ("'")? ('"')? ':' value+=STRING (',')?) |
    (('"')? ("'")? keyword='max_value' ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword='min_value' ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword='mode' ("'")? ('"')? ':' ('"')? ("'")? value=VariableModelType ("'")? ('"')? (',')?)  |
    (('"')? ("'")? keyword='next_exist' ("'")? ('"')? ':' '{'
    value *= next_exist_line
    '}' (',')?) |
    (('"')? ("'")? keyword='next_value' ("'")? ('"')? ':' value='None' (',')?) |
    (('"')? ("'")? keyword='next_value' ("'")? ('"')? ':' '[' value+=condition_pair[','] ']' (',')?) |
    (('"')? ("'")? keyword='non-variable' ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword='stages' ("'")? ('"')? ':' '['
    value *= INT[',']
    ']' (',')?) |
    (('"')? ("'")? keyword='use_stages' ("'")? ('"')? ':' value=BOOL (',')?) |
    (('"')? ("'")? keyword='variable_id' ("'")? ('"')? ':' value=INT (',')?) |
    (('"')? ("'")? keyword='variable_name' ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword='initial_stage' ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword='next_stage' ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword='prev_stage' ("'")? ('"')? ':' value=variable_name (',')?) |
    (('"')? ("'")? keyword='last_stage' ("'")? ('"')? ':' value=variable_name (',')?)
;
    

    modeling_variable:
    ('"')? ("'")? name=variable_name ("'")? ('"')? ':' '{'
    internal_values *= internal_value
    '}' (',')?
;

    
AccessNode:
    'node_name' name=ID ('('next_val=STRING')')? ';'
;

ParallelPolicy:
    'success_on_all' | 'success_on_one'
;




BBVar:
	'var' type=[Type] name=ID ('=' default=DefaultBBType)? ';'
	;

DefaultBBType:
    value=DefaultType | ref=[Arg]
	;

BBEvent:
	'event' name=ID topic=[Topic]';'
	;

Arg:          
    'arg' type=[Type](array='['(count=INT)?']')? name=ID ('=' default=DefaultType)? ';'
	;


Param:          
    'arg' type=[Type](array='['(count=INT)?']')? name=ID ('=' default=DefaultBBType)? ';'
	;

DefaultType:
    BASE_TYPE | BaseArrayType
    ;


BaseArrayType:
    '[' values+=BASETYPE[','] ']'
	;

BBNode:
	'input' name=ID
		 input_topic=[Topic] '->' topic_bbvar=[BBVar]
		 bb_vars *= BBVar
		 args *= Param
		 'success' can_succeed=BOOL ';'
		 'failure' can_failure=BOOL ';'
		 'running' can_running=BOOL ';'
		 ('comment' comment=STRING)?
    'end'(';')?
	;


CheckNode:
    'check' name=ID	bbvar=[BBVar] '==' default=BASETYPE ';'
    'right_hand_side' right_hand_side=int_or_string ';'
    'end_check'(';')?
;
	
BehaviorNode:
	StdBehaviorNode |
	TaskNode
	;

StdBehaviorNode:
    type=[StdBehaviorType] name=ID ';'
	;

StdBehaviorType:
	'success' | 'failure' | 'running'
	;
	
TaskNode:
	'task' name=ID 
	('in' input_topics+=TopicArg[','] ';')?
	('out' output_topics+=TopicArg[','] ';')?
	bb_vars*=BBVar
	args*=Param
	'success' can_succeed=BOOL ';'
	'failure' can_failure=BOOL ';'
	'running' can_running=BOOL ';'
	('comment' comment=STRING (';')?)?
    'end'(';')?
	;
	
TopicArg:
	type=[Topic] name=ID
	;

BTree:	btree=BTreeNode
	;

BTreeNode:
	ParBTNode
	| SeqBTNode
	| SelBTNode
	| SIFBTNode
	| MonBTNode
	| TaskBTNode
	| TimerBTNode
    | CheckBTNode
	;

ChildNode:
    BTreeNode
	;
	
ParBTNode:
	'par' name=ID ('('cond=Status')')? ('('par_policy=ParallelPolicy','synchronized=BOOL')')?'{'
	      nodes *= ChildNode
	 '}'
	 ;

SeqBTNode:
	'seq' name=ID ('('cond=Status')')? ('('memory=BOOL')')?'{'
	      nodes *= ChildNode
	'}'
	;

SelBTNode:
	'sel' name=ID ('('cond=Status')')? ('('memory=BOOL')')?'{'
	      nodes *= ChildNode
	'}'
	;

SIFBTNode:
	'do' name=ID ('('memory=BOOL')')?'{'
	       'if' checks+=[CheckNode][',']
	       'then' '{'
		    	nodes *= ChildNode
			'}'
	'}'
	;

MonBTNode:
	'mon' mon+=[BBNode][',']
	;

TaskBTNode:
	'exec' task+=[BehaviorNode][',']
	;

TimerBTNode:
	'timer' name=ID '('duration=NUMBER')'	
	;

CheckBTNode:
    'chk' check+=[CheckNode][',']
    ;

Status: 
    'success' | 'failure' | 'running' | 'invalid'
;

BASE_TYPE:
	NUMBER | FLOAT | BOOL |  STRING
	;


Comment:
    /\/\/.*$/
    ;


