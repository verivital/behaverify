BehaviorModel:
	'system' name=ID';'
	simpleTypes *= SimpleType
	messageTypes *= MessageType
	rosTopics *= Topic
    bbVariables *= BBVar
    (modeling_variables=modeling_variables)?
	bbEvents *= BBEvent
	bbNodes *= BBNode
	checkNodes *= CheckNode
	taskNodes *= BehaviorNode
    'tree' '(' 'updatetime' '=' updatetime=FLOAT ',' 'timeout' '=' timeout=FLOAT ')' tree=BTree
;



SimpleType:
	'type' name=ID ';'
	;

MessageType:
	'message' name=ID package=ID
		  fields *= Field
    'end'(';')?
	;

Type:	SimpleType | MessageType
	;

Field:	type=[Type](array='['(count=INT)?']')?  name=ID ';'
	;

Topic:	'topic' type=[MessageType] name=ID topic_string=/([^\s;]+)/ ';'
	;


    variable_name:
    "'"ID"'" | '"'ID'"' | 'None'
;
    access_node_name:
    ("'"ID"'" | '"'ID'"') (',')?
;

    next_exist_line:
    variable_name=variable_name ':' exist_val=BOOL (',')?
;
    
    
    modeling_variables:
    "'variables'" ':' '{'
    variables *= modeling_variable
    '}'
;
    string_or_none:
    (STRING | 'None')
;
    int_or_none:
    (INT | 'None')
;
    int_comma:
    INT (',')?
;
    modeling_variable:
    name=variable_name ':' '{'
    ("'access'" | '"access"') ':' (('set' '(' '[') | '{')
    nodes_with_access *= access_node_name
    ((']' ')') | '}') (',')?
    ("'always_exist'" | '"always_exist"') ':' always_exist=BOOL (',')?
    ("'auto_change'" | '"auto_change"') ':' auto_change=BOOL (',')?
    ("'custom_value_range'" | '"custom_value_range"') ':' custom_value_range=string_or_none (',')?
    ("'init_exist'" | '"init_exist"') ':' init_exist=BOOL (',')?
    ("'init_value'" | '"init_value"') ':' init_value=int_or_none (',')?
    ("'max_value'" | '"max_value"') ':' max_value=INT (',')?
    ("'min_value'" | '"min_value"') ':' min_value=INT (',')?
    ("'mode'" | '"mode"') ':' mode=VariableModelType (',')?
    ("'next_exist'" | '"next_exist"') ':' '{'
    nodes_next_exist *= next_exist_line
    '}' (',')?
    ("'next_value'" | '"next_value"') ':' next_value=string_or_none (',')?
    ("'non-variable'" | '"non-variable"') ':' non_variable=BOOL (',')?
    ("'stages'" | '"stages"') ':' '['
    stages *= int_comma
    ']' (',')?
    ("'use_stages'" | '"use_stages"') ':' use_stages=BOOL (',')?
    ("'variable_id'" | '"variable_id"') ':' variable_id=INT (',')?
    ("'variable_name'" | '"variable_name"') ':' variable_name=variable_name (',')?
    ("'initial_stage'" | '"initial_stage"') ':' initial_stage=variable_name (',')?
    ("'next_stage'" | '"next_stage"') ':' next_stage=variable_name (',')?
    ("'prev_stage'" | '"prev_stage"') ':' prev_stage=variable_name (',')?
    ("'last_stage'" | '"last_stage"') ':' last_stage=variable_name (',')?
    '}' (',')?
;
    
    

BBVar:
    'var' type=[Type] name=ID ('=' default=BASETYPE)? ';'
;

BBEvent:
	'event' name=ID topic=[Topic]';'
;

VariableModelType:
    "'DEFINE'" | "'FROZENVAR'" | "'VAR'" | '"DEFINE"' | '"FROZENVAR"' | '"VAR"' 
;

AccessNode:
    'node_name' name=ID ('('next_val=STRING')')? ';'
;

ParallelPolicy:
    'success_on_all' | 'success_on_one'
;
Arg:          
    'arg' type=[Type](array='['(count=INT)?']')? name=ID ('=' default=DefaultType)? ';'
	;

DefaultType:
    BASETYPE | BaseArrayType
    ;

BaseArrayType:
    '[' values+=BASETYPE[','] ']'
	;

BBNode:
	'input' name=ID
		 input_topic=[Topic] '->' topic_bbvar=[BBVar]
		 bb_vars *= BBVar
		 args *= Arg
		 'success' can_succeed=BOOL ';'
		 'failure' can_failure=BOOL ';'
		 'running' can_running=BOOL ';'
		 ('comment' comment=STRING)?
    'end'(';')?
	;


CheckNode:
    'check' name=ID	bbvar=[BBVar] '==' default=BASETYPE ';'
    'integer_representation' int_rep=INT ';'
    'end_check'(';')?
;
	
BehaviorNode:
	StdBehaviorNode |
	TaskNode
	;

StdBehaviorNode:
    type=[StdBehaviorType] name=ID ';'
	;

StdBehaviorType:
	'success' | 'failure' | 'running'
	;
	
TaskNode:
	'task' name=ID 
	('in' input_topics+=TopicArg[','] ';')?
	('out' output_topics+=TopicArg[','] ';')?
	bb_vars*=BBVar
	args*=Arg
	'success' can_succeed=BOOL ';'
	'failure' can_failure=BOOL ';'
	'running' can_running=BOOL ';'
	('comment' comment=STRING (';')?)?
    'end'(';')?
	;
	
TopicArg:
	type=[Topic] name=ID
	;

BTree:	btree=BTreeNode
	;

BTreeNode:
	ParBTNode
	| SeqBTNode
	| SelBTNode
	| SIFBTNode
	| MonBTNode
	| TaskBTNode
	| TimerBTNode
    | CheckBTNode
	;

ChildNode:
    BTreeNode
	;
	
ParBTNode:
	'par' name=ID ('('cond=Status')')? ('('par_policy=ParallelPolicy','synchronized=BOOL')')?'{'
	      nodes *= ChildNode
	 '}'
	 ;

SeqBTNode:
	'seq' name=ID ('('cond=Status')')? ('('memory=BOOL')')?'{'
	      nodes *= ChildNode
	'}'
	;

SelBTNode:
	'sel' name=ID ('('cond=Status')')? ('('memory=BOOL')')?'{'
	      nodes *= ChildNode
	'}'
	;

SIFBTNode:
	'do' name=ID ('('memory=BOOL')')?'{'
	       'if' checks+=[CheckNode][',']
	       'then' '{'
		    	nodes *= ChildNode
			'}'
	'}'
	;

MonBTNode:
	'mon' mon+=[BBNode][',']
	;

TaskBTNode:
	'exec' task+=[BehaviorNode][',']
	;

TimerBTNode:
	'timer' name=ID '('duration=NUMBER')'	
	;

CheckBTNode:
    'chk' check+=[CheckNode][',']
    ;

Status: 
    'success' | 'failure' | 'running' | 'invalid'
    ;

Comment:
    /\/\/.*$/
    ;


