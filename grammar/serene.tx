BehaviorModel:
	'system' name=ID';'
	simpleTypes *= SimpleType
	messageTypes *= MessageType
	rosTopics *= Topic
    bbVariables *= BBVar
    (modeling_variables=modeling_variables)?
	bbEvents *= BBEvent
	bbNodes *= BBNode
	checkNodes *= CheckNode
	taskNodes *= BehaviorNode
    'tree' '(' 'updatetime' '=' updatetime=FLOAT ',' 'timeout' '=' timeout=FLOAT ')' tree=BTree
;



SimpleType:
	'type' name=ID ';'
	;

MessageType:
	'message' name=ID package=ID
		  fields *= Field
    'end'(';')?
	;

Type:	SimpleType | MessageType
	;

Field:	type=[Type](array='['(count=INT)?']')?  name=ID ';'
	;

Topic:	'topic' type=[MessageType] name=ID topic_string=/([^\s;]+)/ ';'
	;




    modeling_variable:
    'variable' name=ID
    ('do_not_model' do_not_model=BOOL ';')?
    ('variable_type'  variable_type=VariableModelType';')?
    ('init' initial_value=STRING ';')?
    ('min' min_value=INT ';')?
    ('max' max_value=INT ';')?
    ('use_stages' use_stages=BOOL ';')?
    ('nodes_that_set' '{'
    nodes_with_access *= AccessNode 
    '}')?
    'end_var' (';')?
;

    variable_name:
    "'"ID"'" | '"'ID'"'
;
    access_node_name:
    ("'"ID"'" | '"'ID'"') (',')?
;
    
    
    modeling_variables:
    'variables' ':' '{'
    variables *= modeling_variable
    '}'
;
    modeling_variable:
    name=variable_name ':' '{'
    'access' ':' '{'
    nodes_with_access *= access_node_name
    '}' (',')?
    'always_exist': True,
                                    'auto_change': False,
                                    'custom_value_range': None,
                                    'init_exist': True,
                                    'init_value': None,
                                    'max_value': 1,
                                    'min_value': 0,
                                    'mode': 'VAR',
                                    'next_exist': {   'loiter_task': True,
                                                      'loiter_task1': True,
                                                      'loiter_task2': True,
                                                      'obstacle_avoidance': True,
                                                      'rth_task': True,
                                                      'rth_task1': True,
                                                      'speed_max_task': True,
                                                      'speed_min_task': True,
                                                      'speed_min_task1': True,
                                                      'surface_task': True,
                                                      'surface_task1': True,
                                                      'surface_task2': True,
                                                      'surface_task3': True,
                                                      'surface_task4': True,
                                                      'tracking_task': True,
                                                      'waypoint_task': True},
                                    'next_value': None,
                                    'non-variable': False,
                                    'stages': [   26,
                                                  31,
                                                  35,
                                                  41,
                                                  45,
                                                  49,
                                                  54,
                                                  60,
                                                  65,
                                                  69,
                                                  74,
                                                  78,
                                                  79,
                                                  100,
                                                  101,
                                                  102],
                                    'use_stages': False,
                                    'variable_id': 53,
    'variable_name': 'HSD_out'}
    '}' (',')?
;
    
    

BBVar:
    'var' type=[Type] name=ID ('=' default=BASETYPE)? ';'
;

BBEvent:
	'event' name=ID topic=[Topic]';'
;

VariableModelType:
    'DEFINE' | 'FROZENVAR' | 'VAR'
;

AccessNode:
    'node_name' name=ID ('('next_val=STRING')')? ';'
;

ParallelPolicy:
    'success_on_all' | 'success_on_one'
;
Arg:          
    'arg' type=[Type](array='['(count=INT)?']')? name=ID ('=' default=DefaultType)? ';'
	;

DefaultType:
    BASETYPE | BaseArrayType
    ;

BaseArrayType:
    '[' values+=BASETYPE[','] ']'
	;

BBNode:
	'input' name=ID
		 input_topic=[Topic] '->' topic_bbvar=[BBVar]
		 bb_vars *= BBVar
		 args *= Arg
		 'success' can_succeed=BOOL ';'
		 'failure' can_failure=BOOL ';'
		 'running' can_running=BOOL ';'
		 ('comment' comment=STRING)?
    'end'(';')?
	;


CheckNode:
    'check' name=ID	bbvar=[BBVar] '==' default=BASETYPE ';'
    'integer_representation' int_rep=INT ';'
    'end_check'(';')?
;
	
BehaviorNode:
	StdBehaviorNode |
	TaskNode
	;

StdBehaviorNode:
    type=[StdBehaviorType] name=ID ';'
	;

StdBehaviorType:
	'success' | 'failure' | 'running'
	;
	
TaskNode:
	'task' name=ID 
	('in' input_topics+=TopicArg[','] ';')?
	('out' output_topics+=TopicArg[','] ';')?
	bb_vars*=BBVar
	args*=Arg
	'success' can_succeed=BOOL ';'
	'failure' can_failure=BOOL ';'
	'running' can_running=BOOL ';'
	('comment' comment=STRING (';')?)?
    'end'(';')?
	;
	
TopicArg:
	type=[Topic] name=ID
	;

BTree:	btree=BTreeNode
	;

BTreeNode:
	ParBTNode
	| SeqBTNode
	| SelBTNode
	| SIFBTNode
	| MonBTNode
	| TaskBTNode
	| TimerBTNode
    | CheckBTNode
	;

ChildNode:
    BTreeNode
	;
	
ParBTNode:
	'par' name=ID ('('cond=Status')')? ('('par_policy=ParallelPolicy','synchronized=BOOL')')?'{'
	      nodes *= ChildNode
	 '}'
	 ;

SeqBTNode:
	'seq' name=ID ('('cond=Status')')? ('('memory=BOOL')')?'{'
	      nodes *= ChildNode
	'}'
	;

SelBTNode:
	'sel' name=ID ('('cond=Status')')? ('('memory=BOOL')')?'{'
	      nodes *= ChildNode
	'}'
	;

SIFBTNode:
	'do' name=ID ('('memory=BOOL')')?'{'
	       'if' checks+=[CheckNode][',']
	       'then' '{'
		    	nodes *= ChildNode
			'}'
	'}'
	;

MonBTNode:
	'mon' mon+=[BBNode][',']
	;

TaskBTNode:
	'exec' task+=[BehaviorNode][',']
	;

TimerBTNode:
	'timer' name=ID '('duration=NUMBER')'	
	;

CheckBTNode:
    'chk' check+=[CheckNode][',']
    ;

Status: 
    'success' | 'failure' | 'running' | 'invalid'
    ;

Comment:
    /\/\/.*$/
    ;


