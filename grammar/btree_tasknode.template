#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/stonier/py_trees_ros/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################

{%if task_node.comment%}
"""
{{task_node.comment}}
"""
{%endif-%}
##############################################################################
# Imports
##############################################################################

import dynamic_reconfigure.client
import py_trees
import rospy
{%- set importtypes = [] %}            

{% for input_topic in task_node.input_topics %}
{%if input_topic.type.type not in importtypes %}
{{ importtypes.append( input_topic.type.type ) or "" }} 
from {{input_topic.type.type.package}}.msg import {{input_topic.type.type.name}}
{%-endif%}
{% endfor %}
{% for output_topic in task_node.output_topics %}
{%if output_topic.type.type not in importtypes %}
{{ importtypes.append( output_topic.type.type ) or "" }} 
from {{output_topic.type.type.package}}.msg import {{output_topic.type.type.name}}
{%-endif%}
{% endfor %}
{% for bb_var in task_node.bb_vars %}
{%if bb_var.type.package is defined %}
{%if bb_var.type not in importtypes %}
{{ importtypes.append( bb_var.type ) or "" }} 
from {{bb_var.type.package}}.msg import {{bb_var.type.name}}
{%endif%}
{% endif %}
{% endfor %}

############<<USER IMPORT CODE BEGINS>>##############################
{{user_code['IMPORT']-}}
############<<USER IMPORT CODE ENDS>>################################

##############################################################################
# Behaviours
##############################################################################


class TaskHandler(py_trees.behaviour.Behaviour):
    
    def __init__(self, 
                 name {{ ", " if task_node.args else "" }} 
{%for arg in task_node.args %}
{%if is_basearraytype(arg.default) %}
                 {{arg.name}} = [{{arg.default.values|join(', ')}}]{{ ", " if not loop.last else "" }}
{%else%}
                 {{arg.name}}={{arg.default}}{{ ", " if not loop.last else "" }}
{%endif %}         
{%-endfor %}
                ):                 
        super(TaskHandler, self).__init__(name=name)
        self.task = name
        self.blackboard = py_trees.blackboard.Blackboard()
{% for var in task_node.bb_vars %}
{% if is_message(var.type) %}
        self.blackboard.{{var.name}} = {{var.type.name}}()
{%else %}
        self.blackboard.{{var.name}} = {{get_default(var)}}
{% endif %}        
{%- endfor %}
{%- for arg in task_node.args %}        
        self.{{arg.name}}={{arg.name}}
{%- endfor %}     
{% for input_topic_var in task_node.input_topics %}
        self.{{input_topic_var.name}}_sub = rospy.Subscriber( '{{input_topic_var.type.topic_string}}',
                                            {{input_topic_var.type.type.name}},
                                            self.{{input_topic_var.name}}_callback,
                                            queue_size =1)
        self.{{input_topic_var.name}}_msg =  {{input_topic_var.type.type.name}}()                   
{% endfor %}
{% for output_topic_var in task_node.output_topics %}
        self.{{output_topic_var.name}}_pub = rospy.Publisher( '{{output_topic_var.type.topic_string}}',
                                            {{output_topic_var.type.type.name}},
                                            queue_size=1)
        self.{{output_topic_var.name}}_msg =  {{output_topic_var.type.type.name}}()                   
{% endfor %}

############<<USER INIT CODE BEGINS>>##############################
{{user_code['INIT']-}}
############<<USER INIT CODE ENDS>>################################

    def setup(self, timeout):
############<<USER SETUP CODE BEGINS>>##############################
{{user_code['SETUP']-}}
############<<USER SETUP CODE ENDS>>################################
        return True            

{% for input_topic_var in task_node.input_topics %}
    def {{input_topic_var.name}}_callback(self, msg):
        self.{{input_topic_var.name}}_msg = msg
############<<USER SUB_{{input_topic_var.name}} CODE BEGINS>>##############################
{{user_code['SUB_{{input_topic_var.name}}']-}}
############<<USER SUB_{{input_topic_var.name}} CODE ENDS>>################################        

{% endfor %}

{% for output_topic_var in task_node.output_topics %}
    def {{output_topic_var.name}}_publish(self, data):
        self.{{output_topic_var.name}}_msg = data
############<<USER PUB_{{output_topic_var.name}} CODE BEGINS>>##############################
{{user_code['PUB_{{output_topic_var.name}}']-}}
############<<USER PUB_{{output_topic_var.name}} CODE ENDS>>################################
        self.{{output_topic_var.name}}_pub.publish(data)        
{% endfor %}

    def update(self):
        """
        Call the parent to write the raw data to the blackboard and then check against the
        parameters to update the bb variable
        """
        self.logger.debug("%s.update()" % self.__class__.__name__)
        
############<<USER UPDATE CODE BEGINS>>##############################
{{user_code['UPDATE']-}}
############<<USER UPDATE CODE ENDS>>################################

         # Return always running                
        return py_trees.common.Status.RUNNING

    def terminate(self, new_status):
        """
        Shoot off a clearing command.

        Args:
            new_status (:class:`~py_trees.common.Status`): the behaviour is transitioning to this new status
        """
############<<USER TERMINATE CODE BEGINS>>##############################
{{user_code['TERMINATE']-}}
############<<USER TERMINATE CODE ENDS>>################################        

############<<USER CUSTOM CODE BEGINS>>##############################
{{user_code['CUSTOM']-}}
############<<USER CUSTOM CODE ENDS>>################################