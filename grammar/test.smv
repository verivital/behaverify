MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [BlueROV.status, topics2bb.status, battery2bb.status, rth2bb.status, geofence2bb.status, lec2_am_r_2bb.status, lec2_am_l_2bb.status, pipe_lost2bb.status, sensor_failure2bb.status, waypoints_completed2bb.status, mission2bb.status, ddlec2bb.status, fls2bb.status, fls_warning2bb.status, hsd_pipe2bb.status, hsd_wp2bb.status, hsd_rth2bb.status, hsd_surface2bb.status, rtreach2bb.status, rtreach_unsafe_value2bb.status, rtreach_index2bb.status, dd_tasks.status, reallocate_check.status, reallocate_check1.status, is_reallocation_requested.status, reallocate_task.status, dd_lec_task.status, mission_server.status, obstacle_avoidance.status, priorities.status, battery_check.status, battery_check1.status, battery_low_fs.status, surface_task.status, sensor_failure_selector.status, sensor_failure_selector1.status, check_sensor_failure.status, surface_task1.status, emergency_stop_check.status, emergency_stop_check1.status, emergency_stop_fs.status, emergency_stop_tasks.status, emergency_stop_task.status, surface_task2.status, home_reached_selector.status, home_reached_selector1.status, check_surface.status, surface_task3.status, obstacle_standoff_check.status, obstacle_standoff_check1.status, obstacle_standoff_fs.status, surface_task4.status, rth_selector.status, rth_selector1.status, check_rth.status, rth_par.status, rth_task.status, home2bb.status, geofence_selector.status, geofence_selector1.status, check_geofence.status, rth_par1.status, rth_task1.status, home2bb1.status, pipe_lost_selector.status, pipe_lost_selector1.status, check_pipe_post.status, loiter_task.status, track_pipe_mission.status, is_track_pipe_mission_requested.status, tracking.status, tracking_task.status, lec2am_speed_cmd.status, lec2am_l_speed_check.status, lec2am_l_speed_check1.status, check_lec2am_ls.status, speed_min_task.status, lec2am_r_speed_check.status, lec2am_r_speed_check1.status, check_lec2am_rs.status, speed_min_task1.status, speed_max_task.status, lec2am_mapping_cmd.status, lec2am_l_mapping_check.status, lec2am_l_mapping_check1.status, check_lec2am_lp.status, pipe_mapping_disable_task.status, lec2am_r_mapping_check.status, lec2am_r_mapping_check1.status, check_lec2am_rp.status, pipe_mapping_disable_task1.status, pipe_mapping_enable_task.status, track_pipe_mission_end.status, evaluate.status, waypoint_mission.status, is_waypoint_requested.status, waypoint_selector.status, waypoints_sif.status, waypoints_sif1.status, check_waypoints_completed.status, waypoint_end.status, next_mission.status, loiter_task1.status, waypoint_task.status, loiter_task2.status];
		resume_from_node_0 := -3;
		resume_from_node_1 := -3;
		resume_from_node_2 := -3;
		resume_from_node_3 := -3;
		resume_from_node_4 := -3;
		resume_from_node_5 := -3;
		resume_from_node_6 := -3;
		resume_from_node_7 := -3;
		resume_from_node_8 := -3;
		resume_from_node_9 := -3;
		resume_from_node_10 := -3;
		resume_from_node_11 := -3;
		resume_from_node_12 := -3;
		resume_from_node_13 := -3;
		resume_from_node_14 := -3;
		resume_from_node_15 := -3;
		resume_from_node_16 := -3;
		resume_from_node_17 := -3;
		resume_from_node_18 := -3;
		resume_from_node_19 := -3;
		resume_from_node_20 := -3;
		resume_from_node_21 := -3;
		resume_from_node_27 := -3;
		resume_from_node_28 := -3;
		resume_from_node_56 := -3;
		resume_from_node_57 := -3;
		resume_from_node_62 := -3;
		resume_from_node_63 := -3;
		resume_from_node_71 := -3;
		resume_from_node_72 := -3;
		resume_from_node_82 := -3;
		trace_running_source_43 := (statuses[43] = running) ? 43 : -2;
		trace_running_source_41 := 
			case
				!(trace_running_source_43 = -2) : trace_running_source_43;
				TRUE : -2;
			esac;
		trace_running_source_39 := 
			case
				!(trace_running_source_41 = -2) : trace_running_source_41;
				TRUE : -2;
			esac;
		trace_running_source_38 := 
			case
				!(trace_running_source_39 = -2) : trace_running_source_39;
				TRUE : -2;
			esac;
		trace_running_source_70 := (statuses[70] = running) ? 70 : -2;
		trace_running_source_93 := (statuses[93] = running) ? 93 : -2;
		trace_running_source_92 := 
			case
				!(trace_running_source_93 = -2) : trace_running_source_93;
				TRUE : -2;
			esac;
		trace_running_source_68 := 
			case
				!(trace_running_source_70 = -2) : trace_running_source_70;
				!(trace_running_source_92 = -2) : trace_running_source_92;
				TRUE : -2;
			esac;
		trace_running_source_102 := (statuses[102] = running) ? 102 : -2;
		trace_running_source_100 := 
			case
				!(trace_running_source_102 = -2) : trace_running_source_102;
				TRUE : -2;
			esac;
		trace_running_source_98 := 
			case
				!(trace_running_source_100 = -2) : trace_running_source_100;
				TRUE : -2;
			esac;
		trace_running_source_97 := 
			case
				!(trace_running_source_98 = -2) : trace_running_source_98;
				TRUE : -2;
			esac;
		trace_running_source_96 := 
			case
				!(trace_running_source_97 = -2) : trace_running_source_97;
				(statuses[96] = running) : 96;
				TRUE : -2;
			esac;
		trace_running_source_94 := 
			case
				!(trace_running_source_96 = -2) : trace_running_source_96;
				TRUE : -2;
			esac;
		trace_running_source_29 := 
			case
				!(trace_running_source_38 = -2) : trace_running_source_38;
				!(trace_running_source_68 = -2) : trace_running_source_68;
				!(trace_running_source_94 = -2) : trace_running_source_94;
				TRUE : -2;
			esac;
		resume_point_41 := 
			case
				(resume_from_node_29 in {43}) : 1;
				TRUE : -2;
			esac;
		resume_point_68 := 
			case
				(resume_from_node_29 in {70}) : 1;
				(resume_from_node_29 in {93}) : 2;
				TRUE : -2;
			esac;
		resume_point_94 := 
			case
				(resume_from_node_29 in {96, 102}) : 1;
				TRUE : -2;
			esac;
		resume_point_100 := 
			case
				(resume_from_node_29 in {102}) : 1;
				TRUE : -2;
			esac;
		BlueROV.active := TRUE;
	VAR
		node_names : define_nodes;
		blackboard : blackboard_module(node_names, statuses);
		resume_from_node_29 : {29, 43, 70, 93, 96, 102};
		BlueROV : composite_parallel_unsynchronized_success_on_all_5(topics2bb, dd_tasks, mission_server, obstacle_avoidance, priorities);
		topics2bb : composite_parallel_unsynchronized_success_on_all_19(battery2bb, rth2bb, geofence2bb, lec2_am_r_2bb, lec2_am_l_2bb, pipe_lost2bb, sensor_failure2bb, waypoints_completed2bb, mission2bb, ddlec2bb, fls2bb, fls_warning2bb, hsd_pipe2bb, hsd_wp2bb, hsd_rth2bb, hsd_surface2bb, rtreach2bb, rtreach_unsafe_value2bb, rtreach_index2bb);
		battery2bb : leaf_set_blackboard_variables(battery2bb_STATUS);
		rth2bb : leaf_set_blackboard_variables(rth2bb_STATUS);
		geofence2bb : leaf_set_blackboard_variables(geofence2bb_STATUS);
		lec2_am_r_2bb : leaf_set_blackboard_variables(lec2_am_r_2bb_STATUS);
		lec2_am_l_2bb : leaf_set_blackboard_variables(lec2_am_l_2bb_STATUS);
		pipe_lost2bb : leaf_set_blackboard_variables(pipe_lost2bb_STATUS);
		sensor_failure2bb : leaf_set_blackboard_variables(sensor_failure2bb_STATUS);
		waypoints_completed2bb : leaf_set_blackboard_variables(waypoints_completed2bb_STATUS);
		mission2bb : leaf_set_blackboard_variables(mission2bb_STATUS);
		ddlec2bb : leaf_set_blackboard_variables(ddlec2bb_STATUS);
		fls2bb : leaf_set_blackboard_variables(fls2bb_STATUS);
		fls_warning2bb : leaf_set_blackboard_variables(fls_warning2bb_STATUS);
		hsd_pipe2bb : leaf_set_blackboard_variables(hsd_pipe2bb_STATUS);
		hsd_wp2bb : leaf_set_blackboard_variables(hsd_wp2bb_STATUS);
		hsd_rth2bb : leaf_set_blackboard_variables(hsd_rth2bb_STATUS);
		hsd_surface2bb : leaf_set_blackboard_variables(hsd_surface2bb_STATUS);
		rtreach2bb : leaf_set_blackboard_variables(rtreach2bb_STATUS);
		rtreach_unsafe_value2bb : leaf_set_blackboard_variables(rtreach_unsafe_value2bb_STATUS);
		rtreach_index2bb : leaf_set_blackboard_variables(rtreach_index2bb_STATUS);
		dd_tasks : composite_selector_without_memory_2(reallocate_check, dd_lec_task);
		reallocate_check : decorator_X_is_Y(reallocate_check1, success, failure);
		reallocate_check1 : composite_selector_without_memory_2(is_reallocation_requested, reallocate_task);
		is_reallocation_requested : leaf_check_blackboard_variable_value(is_reallocation_requested_CHECK_dd_xy_axis_degradation);
		reallocate_task : leaf_set_blackboard_variables(reallocate_task_STATUS);
		dd_lec_task : leaf_set_blackboard_variables(dd_lec_task_STATUS);
		mission_server : leaf_set_blackboard_variables(mission_server_STATUS);
		obstacle_avoidance : leaf_set_blackboard_variables(obstacle_avoidance_STATUS);
		priorities : composite_selector_without_memory_11(battery_check, sensor_failure_selector, emergency_stop_check, home_reached_selector, obstacle_standoff_check, rth_selector, geofence_selector, pipe_lost_selector, track_pipe_mission, waypoint_mission, loiter_task2);
		battery_check : decorator_X_is_Y(battery_check1, success, failure);
		battery_check1 : composite_selector_without_memory_2(battery_low_fs, surface_task);
		battery_low_fs : leaf_check_blackboard_variable_value(battery_low_fs_CHECK_battery_low_warning);
		surface_task : leaf_set_blackboard_variables(surface_task_STATUS);
		sensor_failure_selector : decorator_X_is_Y(sensor_failure_selector1, success, failure);
		sensor_failure_selector1 : composite_selector_without_memory_2(check_sensor_failure, surface_task1);
		check_sensor_failure : leaf_check_blackboard_variable_value(check_sensor_failure_CHECK_bb_sensor_failure_warning);
		surface_task1 : leaf_set_blackboard_variables(surface_task1_STATUS);
		emergency_stop_check : decorator_X_is_Y(emergency_stop_check1, success, failure);
		emergency_stop_check1 : composite_selector_without_memory_2(emergency_stop_fs, emergency_stop_tasks);
		emergency_stop_fs : leaf_check_blackboard_variable_value(emergency_stop_fs_CHECK_emergency_stop_warning);
		emergency_stop_tasks : composite_sequence_with_memory_2(emergency_stop_task, surface_task2, resume_point_41);
		emergency_stop_task : leaf_set_blackboard_variables(emergency_stop_task_STATUS);
		surface_task2 : leaf_set_blackboard_variables(surface_task2_STATUS);
		home_reached_selector : decorator_X_is_Y(home_reached_selector1, success, failure);
		home_reached_selector1 : composite_selector_without_memory_2(check_surface, surface_task3);
		check_surface : leaf_check_blackboard_variable_value(check_surface_CHECK_bb_home_reached);
		surface_task3 : leaf_set_blackboard_variables(surface_task3_STATUS);
		obstacle_standoff_check : decorator_X_is_Y(obstacle_standoff_check1, success, failure);
		obstacle_standoff_check1 : composite_selector_without_memory_2(obstacle_standoff_fs, surface_task4);
		obstacle_standoff_fs : leaf_check_blackboard_variable_value(obstacle_standoff_fs_CHECK_obstacle_standoff_warning);
		surface_task4 : leaf_set_blackboard_variables(surface_task4_STATUS);
		rth_selector : decorator_X_is_Y(rth_selector1, success, failure);
		rth_selector1 : composite_selector_without_memory_2(check_rth, rth_par);
		check_rth : leaf_check_blackboard_variable_value(check_rth_CHECK_bb_rth_warning);
		rth_par : composite_parallel_unsynchronized_success_on_all_2(rth_task, home2bb);
		rth_task : leaf_set_blackboard_variables(rth_task_STATUS);
		home2bb : leaf_set_blackboard_variables(home2bb_STATUS);
		geofence_selector : decorator_X_is_Y(geofence_selector1, success, failure);
		geofence_selector1 : composite_selector_without_memory_2(check_geofence, rth_par1);
		check_geofence : leaf_check_blackboard_variable_value(check_geofence_CHECK_bb_geofence_warning);
		rth_par1 : composite_parallel_unsynchronized_success_on_all_2(rth_task1, home2bb1);
		rth_task1 : leaf_set_blackboard_variables(rth_task1_STATUS);
		home2bb1 : leaf_set_blackboard_variables(home2bb1_STATUS);
		pipe_lost_selector : decorator_X_is_Y(pipe_lost_selector1, success, failure);
		pipe_lost_selector1 : composite_selector_without_memory_2(check_pipe_post, loiter_task);
		check_pipe_post : leaf_check_blackboard_variable_value(check_pipe_post_CHECK_bb_pipe_lost_warning);
		loiter_task : leaf_set_blackboard_variables(loiter_task_STATUS);
		track_pipe_mission : composite_sequence_with_memory_3(is_track_pipe_mission_requested, tracking, track_pipe_mission_end, resume_point_68);
		is_track_pipe_mission_requested : leaf_check_blackboard_variable_value(is_track_pipe_mission_requested_CHECK_bb_mission);
		tracking : composite_parallel_unsynchronized_success_on_all_3(tracking_task, lec2am_speed_cmd, lec2am_mapping_cmd);
		tracking_task : leaf_set_blackboard_variables(tracking_task_STATUS);
		lec2am_speed_cmd : composite_selector_without_memory_3(lec2am_l_speed_check, lec2am_r_speed_check, speed_max_task);
		lec2am_l_speed_check : decorator_X_is_Y(lec2am_l_speed_check1, success, failure);
		lec2am_l_speed_check1 : composite_selector_without_memory_2(check_lec2am_ls, speed_min_task);
		check_lec2am_ls : leaf_check_blackboard_variable_value(check_lec2am_ls_CHECK_lec2_am_l_speed_warning);
		speed_min_task : leaf_set_blackboard_variables(speed_min_task_STATUS);
		lec2am_r_speed_check : decorator_X_is_Y(lec2am_r_speed_check1, success, failure);
		lec2am_r_speed_check1 : composite_selector_without_memory_2(check_lec2am_rs, speed_min_task1);
		check_lec2am_rs : leaf_check_blackboard_variable_value(check_lec2am_rs_CHECK_lec2_am_r_speed_warning);
		speed_min_task1 : leaf_set_blackboard_variables(speed_min_task1_STATUS);
		speed_max_task : leaf_set_blackboard_variables(speed_max_task_STATUS);
		lec2am_mapping_cmd : composite_selector_without_memory_3(lec2am_l_mapping_check, lec2am_r_mapping_check, pipe_mapping_enable_task);
		lec2am_l_mapping_check : decorator_X_is_Y(lec2am_l_mapping_check1, success, failure);
		lec2am_l_mapping_check1 : composite_selector_without_memory_2(check_lec2am_lp, pipe_mapping_disable_task);
		check_lec2am_lp : leaf_check_blackboard_variable_value(check_lec2am_lp_CHECK_lec2_am_l_pipe_warning);
		pipe_mapping_disable_task : leaf_set_blackboard_variables(pipe_mapping_disable_task_STATUS);
		lec2am_r_mapping_check : decorator_X_is_Y(lec2am_r_mapping_check1, success, failure);
		lec2am_r_mapping_check1 : composite_selector_without_memory_2(check_lec2am_rp, pipe_mapping_disable_task1);
		check_lec2am_rp : leaf_check_blackboard_variable_value(check_lec2am_rp_CHECK_lec2_am_r_pipe_warning);
		pipe_mapping_disable_task1 : leaf_set_blackboard_variables(pipe_mapping_disable_task1_STATUS);
		pipe_mapping_enable_task : leaf_set_blackboard_variables(pipe_mapping_enable_task_STATUS);
		track_pipe_mission_end : composite_sequence_with_memory_1(evaluate, -2);
		evaluate : leaf_timer();
		waypoint_mission : composite_sequence_with_memory_2(is_waypoint_requested, waypoint_selector, resume_point_94);
		is_waypoint_requested : leaf_check_blackboard_variable_value(is_waypoint_requested_CHECK_bb_mission);
		waypoint_selector : composite_selector_without_memory_2(waypoints_sif, waypoint_task);
		waypoints_sif : decorator_X_is_Y(waypoints_sif1, success, failure);
		waypoints_sif1 : composite_selector_without_memory_2(check_waypoints_completed, waypoint_end);
		check_waypoints_completed : leaf_check_blackboard_variable_value(check_waypoints_completed_CHECK_bb_waypoints_completed);
		waypoint_end : composite_sequence_with_memory_2(next_mission, loiter_task1, resume_point_100);
		next_mission : leaf_set_blackboard_variables(next_mission_STATUS);
		loiter_task1 : leaf_set_blackboard_variables(loiter_task1_STATUS);
		waypoint_task : leaf_set_blackboard_variables(waypoint_task_STATUS);
		loiter_task2 : leaf_set_blackboard_variables(loiter_task2_STATUS);
		battery2bb_STATUS : battery2bb_STATUS_module(blackboard, node_names);
		rth2bb_STATUS : rth2bb_STATUS_module(blackboard, node_names);
		geofence2bb_STATUS : geofence2bb_STATUS_module(blackboard, node_names);
		lec2_am_r_2bb_STATUS : lec2_am_r_2bb_STATUS_module(blackboard, node_names);
		lec2_am_l_2bb_STATUS : lec2_am_l_2bb_STATUS_module(blackboard, node_names);
		pipe_lost2bb_STATUS : pipe_lost2bb_STATUS_module(blackboard, node_names);
		sensor_failure2bb_STATUS : sensor_failure2bb_STATUS_module(blackboard, node_names);
		waypoints_completed2bb_STATUS : waypoints_completed2bb_STATUS_module(blackboard, node_names);
		mission2bb_STATUS : mission2bb_STATUS_module(blackboard, node_names);
		ddlec2bb_STATUS : ddlec2bb_STATUS_module(blackboard, node_names);
		fls2bb_STATUS : fls2bb_STATUS_module(blackboard, node_names);
		fls_warning2bb_STATUS : fls_warning2bb_STATUS_module(blackboard, node_names);
		hsd_pipe2bb_STATUS : hsd_pipe2bb_STATUS_module(blackboard, node_names);
		hsd_wp2bb_STATUS : hsd_wp2bb_STATUS_module(blackboard, node_names);
		hsd_rth2bb_STATUS : hsd_rth2bb_STATUS_module(blackboard, node_names);
		hsd_surface2bb_STATUS : hsd_surface2bb_STATUS_module(blackboard, node_names);
		rtreach2bb_STATUS : rtreach2bb_STATUS_module(blackboard, node_names);
		rtreach_unsafe_value2bb_STATUS : rtreach_unsafe_value2bb_STATUS_module(blackboard, node_names);
		rtreach_index2bb_STATUS : rtreach_index2bb_STATUS_module(blackboard, node_names);
		is_reallocation_requested_CHECK_dd_xy_axis_degradation : is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(blackboard, node_names);
		reallocate_task_STATUS : reallocate_task_STATUS_module(blackboard, node_names);
		dd_lec_task_STATUS : dd_lec_task_STATUS_module(blackboard, node_names);
		mission_server_STATUS : mission_server_STATUS_module(blackboard, node_names);
		obstacle_avoidance_STATUS : obstacle_avoidance_STATUS_module(blackboard, node_names);
		battery_low_fs_CHECK_battery_low_warning : battery_low_fs_CHECK_battery_low_warning_module(blackboard, node_names);
		surface_task_STATUS : surface_task_STATUS_module(blackboard, node_names);
		check_sensor_failure_CHECK_bb_sensor_failure_warning : check_sensor_failure_CHECK_bb_sensor_failure_warning_module(blackboard, node_names);
		surface_task1_STATUS : surface_task1_STATUS_module(blackboard, node_names);
		emergency_stop_fs_CHECK_emergency_stop_warning : emergency_stop_fs_CHECK_emergency_stop_warning_module(blackboard, node_names);
		emergency_stop_task_STATUS : emergency_stop_task_STATUS_module(blackboard, node_names);
		surface_task2_STATUS : surface_task2_STATUS_module(blackboard, node_names);
		check_surface_CHECK_bb_home_reached : check_surface_CHECK_bb_home_reached_module(blackboard, node_names);
		surface_task3_STATUS : surface_task3_STATUS_module(blackboard, node_names);
		obstacle_standoff_fs_CHECK_obstacle_standoff_warning : obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(blackboard, node_names);
		surface_task4_STATUS : surface_task4_STATUS_module(blackboard, node_names);
		check_rth_CHECK_bb_rth_warning : check_rth_CHECK_bb_rth_warning_module(blackboard, node_names);
		rth_task_STATUS : rth_task_STATUS_module(blackboard, node_names);
		home2bb_STATUS : home2bb_STATUS_module(blackboard, node_names);
		check_geofence_CHECK_bb_geofence_warning : check_geofence_CHECK_bb_geofence_warning_module(blackboard, node_names);
		rth_task1_STATUS : rth_task1_STATUS_module(blackboard, node_names);
		home2bb1_STATUS : home2bb1_STATUS_module(blackboard, node_names);
		check_pipe_post_CHECK_bb_pipe_lost_warning : check_pipe_post_CHECK_bb_pipe_lost_warning_module(blackboard, node_names);
		loiter_task_STATUS : loiter_task_STATUS_module(blackboard, node_names);
		is_track_pipe_mission_requested_CHECK_bb_mission : is_track_pipe_mission_requested_CHECK_bb_mission_module(blackboard, node_names);
		tracking_task_STATUS : tracking_task_STATUS_module(blackboard, node_names);
		check_lec2am_ls_CHECK_lec2_am_l_speed_warning : check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(blackboard, node_names);
		speed_min_task_STATUS : speed_min_task_STATUS_module(blackboard, node_names);
		check_lec2am_rs_CHECK_lec2_am_r_speed_warning : check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(blackboard, node_names);
		speed_min_task1_STATUS : speed_min_task1_STATUS_module(blackboard, node_names);
		speed_max_task_STATUS : speed_max_task_STATUS_module(blackboard, node_names);
		check_lec2am_lp_CHECK_lec2_am_l_pipe_warning : check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(blackboard, node_names);
		pipe_mapping_disable_task_STATUS : pipe_mapping_disable_task_STATUS_module(blackboard, node_names);
		check_lec2am_rp_CHECK_lec2_am_r_pipe_warning : check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(blackboard, node_names);
		pipe_mapping_disable_task1_STATUS : pipe_mapping_disable_task1_STATUS_module(blackboard, node_names);
		pipe_mapping_enable_task_STATUS : pipe_mapping_enable_task_STATUS_module(blackboard, node_names);
		is_waypoint_requested_CHECK_bb_mission : is_waypoint_requested_CHECK_bb_mission_module(blackboard, node_names);
		check_waypoints_completed_CHECK_bb_waypoints_completed : check_waypoints_completed_CHECK_bb_waypoints_completed_module(blackboard, node_names);
		next_mission_STATUS : next_mission_STATUS_module(blackboard, node_names);
		loiter_task1_STATUS : loiter_task1_STATUS_module(blackboard, node_names);
		waypoint_task_STATUS : waypoint_task_STATUS_module(blackboard, node_names);
		loiter_task2_STATUS : loiter_task2_STATUS_module(blackboard, node_names);
	ASSIGN
		init(resume_from_node_29) := 29;
		next(resume_from_node_29) := 
			case
				(statuses[0] in {success, failure}) : 29;
				(statuses[29] in {success, failure}) : 29;
				TRUE : max(trace_running_source_29, 29);
			esac;
MODULE composite_parallel_unsynchronized_success_on_all_5(child_0, child_1, child_2, child_3, child_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				(child_3.internal_status = failure) : failure;
				(child_4.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				!(child_3.internal_status = success) : child_3.internal_status;
				!(child_4.internal_status = success) : child_4.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
		child_4.active := active;
MODULE composite_parallel_unsynchronized_success_on_all_19(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10, child_11, child_12, child_13, child_14, child_15, child_16, child_17, child_18)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				(child_3.internal_status = failure) : failure;
				(child_4.internal_status = failure) : failure;
				(child_5.internal_status = failure) : failure;
				(child_6.internal_status = failure) : failure;
				(child_7.internal_status = failure) : failure;
				(child_8.internal_status = failure) : failure;
				(child_9.internal_status = failure) : failure;
				(child_10.internal_status = failure) : failure;
				(child_11.internal_status = failure) : failure;
				(child_12.internal_status = failure) : failure;
				(child_13.internal_status = failure) : failure;
				(child_14.internal_status = failure) : failure;
				(child_15.internal_status = failure) : failure;
				(child_16.internal_status = failure) : failure;
				(child_17.internal_status = failure) : failure;
				(child_18.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				!(child_3.internal_status = success) : child_3.internal_status;
				!(child_4.internal_status = success) : child_4.internal_status;
				!(child_5.internal_status = success) : child_5.internal_status;
				!(child_6.internal_status = success) : child_6.internal_status;
				!(child_7.internal_status = success) : child_7.internal_status;
				!(child_8.internal_status = success) : child_8.internal_status;
				!(child_9.internal_status = success) : child_9.internal_status;
				!(child_10.internal_status = success) : child_10.internal_status;
				!(child_11.internal_status = success) : child_11.internal_status;
				!(child_12.internal_status = success) : child_12.internal_status;
				!(child_13.internal_status = success) : child_13.internal_status;
				!(child_14.internal_status = success) : child_14.internal_status;
				!(child_15.internal_status = success) : child_15.internal_status;
				!(child_16.internal_status = success) : child_16.internal_status;
				!(child_17.internal_status = success) : child_17.internal_status;
				!(child_18.internal_status = success) : child_18.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
		child_4.active := active;
		child_5.active := active;
		child_6.active := active;
		child_7.active := active;
		child_8.active := active;
		child_9.active := active;
		child_10.active := active;
		child_11.active := active;
		child_12.active := active;
		child_13.active := active;
		child_14.active := active;
		child_15.active := active;
		child_16.active := active;
		child_17.active := active;
		child_18.active := active;
MODULE leaf_set_blackboard_variables(status_module)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := status_module.status;
MODULE composite_selector_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child_0.status = incoming_status : outgoing_status;
				TRUE : child_0.status;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				TRUE : TRUE;
			esac;
MODULE leaf_check_blackboard_variable_value(check)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (check.result) ? success : failure;
MODULE composite_selector_without_memory_11(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				!(child_2.internal_status = failure) : child_2.internal_status;
				!(child_3.internal_status = failure) : child_3.internal_status;
				!(child_4.internal_status = failure) : child_4.internal_status;
				!(child_5.internal_status = failure) : child_5.internal_status;
				!(child_6.internal_status = failure) : child_6.internal_status;
				!(child_7.internal_status = failure) : child_7.internal_status;
				!(child_8.internal_status = failure) : child_8.internal_status;
				!(child_9.internal_status = failure) : child_9.internal_status;
				!(child_10.internal_status = failure) : child_10.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
		child_2.active := child_1.status = failure;
		child_3.active := child_2.status = failure;
		child_4.active := child_3.status = failure;
		child_5.active := child_4.status = failure;
		child_6.active := child_5.status = failure;
		child_7.active := child_6.status = failure;
		child_8.active := child_7.status = failure;
		child_9.active := child_8.status = failure;
		child_10.active := child_9.status = failure;
MODULE composite_sequence_with_memory_2(child_0, child_1, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
MODULE composite_parallel_unsynchronized_success_on_all_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
MODULE composite_sequence_with_memory_3(child_0, child_1, child_2, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
				(2 >= resume_point) & !(child_2.internal_status = success) : child_2.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
		child_2.active := (2 >= resume_point) & ((2 = resume_point) | (child_1.status = success));
MODULE composite_parallel_unsynchronized_success_on_all_3(child_0, child_1, child_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
MODULE composite_selector_without_memory_3(child_0, child_1, child_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				!(child_2.internal_status = failure) : child_2.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
		child_2.active := child_1.status = failure;
MODULE composite_sequence_with_memory_1(child_0, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
MODULE leaf_timer()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := input_status;
	VAR
		input_status : {success, running};
MODULE define_nodes
	DEFINE
		BlueROV := 0;
		topics2bb := 1;
		battery2bb := 2;
		rth2bb := 3;
		geofence2bb := 4;
		lec2_am_r_2bb := 5;
		lec2_am_l_2bb := 6;
		pipe_lost2bb := 7;
		sensor_failure2bb := 8;
		waypoints_completed2bb := 9;
		mission2bb := 10;
		ddlec2bb := 11;
		fls2bb := 12;
		fls_warning2bb := 13;
		hsd_pipe2bb := 14;
		hsd_wp2bb := 15;
		hsd_rth2bb := 16;
		hsd_surface2bb := 17;
		rtreach2bb := 18;
		rtreach_unsafe_value2bb := 19;
		rtreach_index2bb := 20;
		dd_tasks := 21;
		reallocate_check := 22;
		reallocate_check1 := 23;
		is_reallocation_requested := 24;
		reallocate_task := 25;
		dd_lec_task := 26;
		mission_server := 27;
		obstacle_avoidance := 28;
		priorities := 29;
		battery_check := 30;
		battery_check1 := 31;
		battery_low_fs := 32;
		surface_task := 33;
		sensor_failure_selector := 34;
		sensor_failure_selector1 := 35;
		check_sensor_failure := 36;
		surface_task1 := 37;
		emergency_stop_check := 38;
		emergency_stop_check1 := 39;
		emergency_stop_fs := 40;
		emergency_stop_tasks := 41;
		emergency_stop_task := 42;
		surface_task2 := 43;
		home_reached_selector := 44;
		home_reached_selector1 := 45;
		check_surface := 46;
		surface_task3 := 47;
		obstacle_standoff_check := 48;
		obstacle_standoff_check1 := 49;
		obstacle_standoff_fs := 50;
		surface_task4 := 51;
		rth_selector := 52;
		rth_selector1 := 53;
		check_rth := 54;
		rth_par := 55;
		rth_task := 56;
		home2bb := 57;
		geofence_selector := 58;
		geofence_selector1 := 59;
		check_geofence := 60;
		rth_par1 := 61;
		rth_task1 := 62;
		home2bb1 := 63;
		pipe_lost_selector := 64;
		pipe_lost_selector1 := 65;
		check_pipe_post := 66;
		loiter_task := 67;
		track_pipe_mission := 68;
		is_track_pipe_mission_requested := 69;
		tracking := 70;
		tracking_task := 71;
		lec2am_speed_cmd := 72;
		lec2am_l_speed_check := 73;
		lec2am_l_speed_check1 := 74;
		check_lec2am_ls := 75;
		speed_min_task := 76;
		lec2am_r_speed_check := 77;
		lec2am_r_speed_check1 := 78;
		check_lec2am_rs := 79;
		speed_min_task1 := 80;
		speed_max_task := 81;
		lec2am_mapping_cmd := 82;
		lec2am_l_mapping_check := 83;
		lec2am_l_mapping_check1 := 84;
		check_lec2am_lp := 85;
		pipe_mapping_disable_task := 86;
		lec2am_r_mapping_check := 87;
		lec2am_r_mapping_check1 := 88;
		check_lec2am_rp := 89;
		pipe_mapping_disable_task1 := 90;
		pipe_mapping_enable_task := 91;
		track_pipe_mission_end := 92;
		evaluate := 93;
		waypoint_mission := 94;
		is_waypoint_requested := 95;
		waypoint_selector := 96;
		waypoints_sif := 97;
		waypoints_sif1 := 98;
		check_waypoints_completed := 99;
		waypoint_end := 100;
		next_mission := 101;
		loiter_task1 := 102;
		waypoint_task := 103;
		loiter_task2 := 104;

--battery_dot_batt_charge_remaining : 0
----battery2bb
--battery_dot_batt_charge_remaining_stage_1 : 33
----battery2bb
--battery_low_warning : 1
----battery2bb
--battery_low_warning_stage_1 : 34
----battery2bb
--bb_fls_warning : 2
----fls_warning2bb
--bb_fls_warning_stage_1 : 35
----fls_warning2bb
--bb_geofence : 3
----geofence2bb
--bb_geofence_stage_1 : 36
----geofence2bb
--bb_geofence_warning : 4
----geofence2bb
--bb_geofence_warning_stage_1 : 37
----geofence2bb
--bb_home_reached : 5
----check_surface
--bb_home_reached_stage_1 : 38
----home2bb
----check_surface
--bb_home_reached_stage_2 : 39
----home2bb
----home2bb1
--bb_home_reached_stage_3 : 40
----home2bb1
--bb_mission : 6
----pipe_lost2bb
--bb_mission_stage_1 : 41
----mission2bb
----pipe_lost2bb
--bb_mission_stage_2 : 42
----mission_server
----mission2bb
--bb_mission_stage_3 : 43
----mission_server
--bb_obstacle_warning : 7
----obstacle_avoidance
--bb_obstacle_warning_stage_1 : 44
----obstacle_avoidance
--bb_pipe_lost_warning : 8
----pipe_lost2bb
--bb_pipe_lost_warning_stage_1 : 45
----pipe_lost2bb
--bb_pipelost : 9
----pipe_lost2bb
--bb_pipelost_stage_1 : 46
----pipe_lost2bb
--bb_rth : 10
----rth2bb
--bb_rth_stage_1 : 47
----rth2bb
--bb_rth_warning : 11
----rth2bb
--bb_rth_warning_stage_1 : 48
----mission_server
----rth2bb
--bb_rth_warning_stage_2 : 49
----mission_server
--bb_sensor_failure : 12
----sensor_failure2bb
--bb_sensor_failure_stage_1 : 50
----sensor_failure2bb
--bb_sensor_failure_warning : 13
----sensor_failure2bb
--bb_sensor_failure_warning_stage_1 : 51
----sensor_failure2bb
--bb_waypoints_completed : 14
----waypoints_completed2bb
--bb_waypoints_completed_stage_1 : 52
----waypoints_completed2bb
--dd_output : 15
----ddlec2bb
--dd_output_stage_1 : 53
----ddlec2bb
----reallocate_task
--dd_output_stage_2 : 54
----reallocate_task
--dd_xy_axis_degradation : 16
----ddlec2bb
--dd_xy_axis_degradation_stage_1 : 55
----ddlec2bb
----reallocate_task
--dd_xy_axis_degradation_stage_2 : 56
----reallocate_task
--dd_z_axis_warning : 17
----ddlec2bb
--dd_z_axis_warning_stage_1 : 57
----ddlec2bb
--emergency_stop_warning : 18
----fls_warning2bb
--emergency_stop_warning_stage_1 : 58
----fls_warning2bb
----rtreach2bb
--emergency_stop_warning_stage_2 : 59
----mission_server
----rtreach2bb
--emergency_stop_warning_stage_3 : 60
----mission_server
--fls_range_dot_range : 19
----fls2bb
--fls_range_dot_range_stage_1 : 61
----fls2bb
--home_reached_threshold : 82
--lec2_am_l_dot_confs : 20
----lec2_am_l_2bb
--lec2_am_l_dot_confs_stage_1 : 62
----lec2_am_l_2bb
--lec2_am_l_pipe_warning : 21
----lec2_am_l_2bb
--lec2_am_l_pipe_warning_stage_1 : 63
----lec2_am_l_2bb
--lec2_am_l_speed_warning : 22
----lec2_am_l_2bb
--lec2_am_l_speed_warning_stage_1 : 64
----lec2_am_l_2bb
--lec2_am_r_dot_confs : 23
----lec2_am_r_2bb
--lec2_am_r_dot_confs_stage_1 : 65
----lec2_am_r_2bb
--lec2_am_r_pipe_warning : 24
----lec2_am_r_2bb
--lec2_am_r_pipe_warning_stage_1 : 66
----lec2_am_r_2bb
--lec2_am_r_speed_warning : 25
----lec2_am_r_2bb
--lec2_am_r_speed_warning_stage_1 : 67
----lec2_am_r_2bb
--mission_distance_0 : 86
--mission_distance_1 : 87
--mission_distance_2 : 88
--mission_type_0 : 83
--mission_type_1 : 84
--mission_type_2 : 85
--next_mission : 26
----mission_server
--next_mission_stage_1 : 68
----mission_server
----next_mission
--next_mission_stage_2 : 69
----next_mission
--obstacle_in_view_dot_stamp : 27
----fls_warning2bb
--obstacle_in_view_dot_stamp_stage_1 : 70
----fls_warning2bb
--obstacle_min_standoff : 28
----fls2bb
--obstacle_min_standoff_stage_1 : 71
----mission_server
----fls2bb
--obstacle_min_standoff_stage_2 : 72
----mission_server
--obstacle_standoff_warning : 29
----fls2bb
--obstacle_standoff_warning_stage_1 : 73
----fls2bb
--pipe_mapping_enable : 30
----pipe_mapping_disable_task
--pipe_mapping_enable_stage_1 : 74
----pipe_mapping_disable_task
----pipe_mapping_disable_task1
--pipe_mapping_enable_stage_2 : 75
----pipe_mapping_disable_task1
----pipe_mapping_enable_task
--pipe_mapping_enable_stage_3 : 76
----pipe_mapping_enable_task
--rtreach_out : 31
----rtreach2bb
--rtreach_out_stage_1 : 77
----rtreach2bb
--task_mission_server_mission_distance_list : -1
--task_mission_server_mission_idx : 89
--task_mission_server_mission_idx_stage_1 : 90
--task_mission_server_mission_len : 80
--task_mission_server_mission_type_list : -1
--total_degradation : 32
----ddlec2bb
--total_degradation_stage_1 : 78
----ddlec2bb
----reallocate_task
--total_degradation_stage_2 : 79
----reallocate_task
--total_degradation_threshold : 81
MODULE blackboard_module(node_names, statuses)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		battery_dot_batt_charge_remaining_exists := TRUE;
		battery_dot_batt_charge_remaining_stage_1_exists := TRUE;
		battery_low_warning := 
			case
				battery_dot_batt_charge_remaining = 0 : 1;
				TRUE : 0;
			esac;
		battery_low_warning_exists := TRUE;
		battery_low_warning_stage_1 := 
			case
				battery_dot_batt_charge_remaining_stage_1 = 0 : 1;
				TRUE : 0;
			esac;
		battery_low_warning_stage_1_exists := TRUE;
		bb_fls_warning_exists := TRUE;
		bb_fls_warning_stage_1_exists := TRUE;
		bb_geofence_exists := TRUE;
		bb_geofence_stage_1_exists := TRUE;
		bb_geofence_warning_exists := TRUE;
		bb_geofence_warning_stage_1_exists := TRUE;
		bb_home_reached_exists := TRUE;
		bb_home_reached_stage_1_exists := TRUE;
		bb_home_reached_stage_2_exists := TRUE;
		bb_home_reached_stage_3_exists := TRUE;
		bb_mission_exists := TRUE;
		bb_mission_stage_1_exists := TRUE;
		bb_mission_stage_2_exists := TRUE;
		bb_mission_stage_3_exists := TRUE;
		bb_obstacle_warning_exists := TRUE;
		bb_obstacle_warning_stage_1_exists := TRUE;
		bb_pipe_lost_warning_exists := TRUE;
		bb_pipe_lost_warning_stage_1_exists := TRUE;
		bb_pipelost_exists := TRUE;
		bb_pipelost_stage_1_exists := TRUE;
		bb_rth_exists := TRUE;
		bb_rth_stage_1_exists := TRUE;
		bb_rth_warning_exists := TRUE;
		bb_rth_warning_stage_1_exists := TRUE;
		bb_rth_warning_stage_2_exists := TRUE;
		bb_sensor_failure_exists := TRUE;
		bb_sensor_failure_stage_1_exists := TRUE;
		bb_sensor_failure_warning_exists := TRUE;
		bb_sensor_failure_warning_stage_1_exists := TRUE;
		bb_waypoints_completed_exists := TRUE;
		bb_waypoints_completed_stage_1_exists := TRUE;
		dd_output_exists := TRUE;
		dd_output_stage_1_exists := TRUE;
		dd_output_stage_2_exists := TRUE;
		dd_xy_axis_degradation_exists := TRUE;
		dd_xy_axis_degradation_stage_1_exists := TRUE;
		dd_xy_axis_degradation_stage_2_exists := TRUE;
		dd_z_axis_warning_exists := TRUE;
		dd_z_axis_warning_stage_1_exists := TRUE;
		emergency_stop_warning_exists := TRUE;
		emergency_stop_warning_stage_1_exists := TRUE;
		emergency_stop_warning_stage_2_exists := TRUE;
		emergency_stop_warning_stage_3_exists := TRUE;
		fls_range_dot_range_exists := TRUE;
		fls_range_dot_range_stage_1_exists := TRUE;
		home_reached_threshold := 0;
		home_reached_threshold_exists := TRUE;
		lec2_am_l_dot_confs_exists := TRUE;
		lec2_am_l_dot_confs_stage_1_exists := TRUE;
		lec2_am_l_pipe_warning := 
			case
				(lec2_am_l_dot_confs = 2) | (lec2_am_l_dot_confs = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_l_pipe_warning_exists := TRUE;
		lec2_am_l_pipe_warning_stage_1 := 
			case
				(lec2_am_l_dot_confs_stage_1 = 2) | (lec2_am_l_dot_confs_stage_1 = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_l_pipe_warning_stage_1_exists := TRUE;
		lec2_am_l_speed_warning := 
			case
				(lec2_am_l_dot_confs = 1) | (lec2_am_l_dot_confs = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_l_speed_warning_exists := TRUE;
		lec2_am_l_speed_warning_stage_1 := 
			case
				(lec2_am_l_dot_confs_stage_1 = 1) | (lec2_am_l_dot_confs_stage_1 = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_l_speed_warning_stage_1_exists := TRUE;
		lec2_am_r_dot_confs_exists := TRUE;
		lec2_am_r_dot_confs_stage_1_exists := TRUE;
		lec2_am_r_pipe_warning := 
			case
				(lec2_am_r_dot_confs = 2) | (lec2_am_r_dot_confs = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_r_pipe_warning_exists := TRUE;
		lec2_am_r_pipe_warning_stage_1 := 
			case
				(lec2_am_r_dot_confs_stage_1 = 2) | (lec2_am_r_dot_confs_stage_1 = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_r_pipe_warning_stage_1_exists := TRUE;
		lec2_am_r_speed_warning := 
			case
				(lec2_am_r_dot_confs = 1) | (lec2_am_r_dot_confs = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_r_speed_warning_exists := TRUE;
		lec2_am_r_speed_warning_stage_1 := 
			case
				(lec2_am_r_dot_confs_stage_1 = 1) | (lec2_am_r_dot_confs_stage_1 = 3) : 1;
				TRUE : 0;
			esac;
		lec2_am_r_speed_warning_stage_1_exists := TRUE;
		mission_distance_0_exists := TRUE;
		mission_distance_1_exists := TRUE;
		mission_distance_2_exists := TRUE;
		mission_type_0_exists := TRUE;
		mission_type_1_exists := TRUE;
		mission_type_2_exists := TRUE;
		next_mission_exists := TRUE;
		next_mission_stage_1_exists := TRUE;
		next_mission_stage_2_exists := TRUE;
		obstacle_in_view_dot_stamp_exists := TRUE;
		obstacle_in_view_dot_stamp_stage_1_exists := TRUE;
		obstacle_min_standoff_exists := TRUE;
		obstacle_min_standoff_stage_1_exists := TRUE;
		obstacle_min_standoff_stage_2_exists := TRUE;
		obstacle_standoff_warning_exists := TRUE;
		obstacle_standoff_warning_stage_1_exists := TRUE;
		pipe_mapping_enable_exists := TRUE;
		pipe_mapping_enable_stage_1_exists := TRUE;
		pipe_mapping_enable_stage_2_exists := TRUE;
		pipe_mapping_enable_stage_3_exists := TRUE;
		rtreach_out_exists := TRUE;
		rtreach_out_stage_1_exists := TRUE;
		task_mission_server_mission_distance_list := [mission_distance_0, mission_distance_1, mission_distance_2];
		task_mission_server_mission_distance_list_exists := TRUE;
		task_mission_server_mission_idx_exists := TRUE;
		task_mission_server_mission_idx_stage_1_exists := TRUE;
		task_mission_server_mission_len := 3;
		task_mission_server_mission_len_exists := TRUE;
		task_mission_server_mission_type_list := [mission_type_0, mission_type_1, mission_type_2];
		task_mission_server_mission_type_list_exists := TRUE;
		total_degradation_exists := TRUE;
		total_degradation_stage_1_exists := TRUE;
		total_degradation_stage_2_exists := TRUE;
		total_degradation_threshold := 0;
		total_degradation_threshold_exists := TRUE;
	FROZENVAR
		mission_distance_0 : 0..2;
		mission_distance_1 : 0..2;
		mission_distance_2 : 0..2;
		mission_type_0 : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
		mission_type_1 : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
		mission_type_2 : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
	VAR
		battery_dot_batt_charge_remaining : 0..1;
		battery_dot_batt_charge_remaining_stage_1 : 0..1;
		bb_fls_warning : 0..1;
		bb_fls_warning_stage_1 : 0..1;
		bb_geofence : 0..1;
		bb_geofence_stage_1 : 0..1;
		bb_geofence_warning : 0..1;
		bb_geofence_warning_stage_1 : 0..1;
		bb_home_reached : 0..1;
		bb_home_reached_stage_1 : 0..1;
		bb_home_reached_stage_2 : 0..1;
		bb_home_reached_stage_3 : 0..1;
		bb_mission : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
		bb_mission_stage_1 : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
		bb_mission_stage_2 : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
		bb_mission_stage_3 : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
		bb_obstacle_warning : 0..1;
		bb_obstacle_warning_stage_1 : 0..1;
		bb_pipe_lost_warning : 0..1;
		bb_pipe_lost_warning_stage_1 : 0..1;
		bb_pipelost : 0..1;
		bb_pipelost_stage_1 : 0..1;
		bb_rth : 0..1;
		bb_rth_stage_1 : 0..1;
		bb_rth_warning : 0..1;
		bb_rth_warning_stage_1 : 0..1;
		bb_rth_warning_stage_2 : 0..1;
		bb_sensor_failure : 0..1;
		bb_sensor_failure_stage_1 : 0..1;
		bb_sensor_failure_warning : 0..1;
		bb_sensor_failure_warning_stage_1 : 0..1;
		bb_waypoints_completed : 0..1;
		bb_waypoints_completed_stage_1 : 0..1;
		dd_output : 0..2;
		dd_output_stage_1 : 0..2;
		dd_output_stage_2 : 0..2;
		dd_xy_axis_degradation : 0..1;
		dd_xy_axis_degradation_stage_1 : 0..1;
		dd_xy_axis_degradation_stage_2 : 0..1;
		dd_z_axis_warning : 0..1;
		dd_z_axis_warning_stage_1 : 0..1;
		emergency_stop_warning : 0..1;
		emergency_stop_warning_stage_1 : 0..1;
		emergency_stop_warning_stage_2 : 0..1;
		emergency_stop_warning_stage_3 : 0..1;
		fls_range_dot_range : 0..3;
		fls_range_dot_range_stage_1 : 0..3;
		lec2_am_l_dot_confs : 0..3;
		lec2_am_l_dot_confs_stage_1 : 0..3;
		lec2_am_r_dot_confs : 0..3;
		lec2_am_r_dot_confs_stage_1 : 0..3;
		next_mission : 0..1;
		next_mission_stage_1 : 0..1;
		next_mission_stage_2 : 0..1;
		obstacle_in_view_dot_stamp : 0..1;
		obstacle_in_view_dot_stamp_stage_1 : 0..1;
		obstacle_min_standoff : 0..2;
		obstacle_min_standoff_stage_1 : 0..2;
		obstacle_min_standoff_stage_2 : 0..2;
		obstacle_standoff_warning : 0..1;
		obstacle_standoff_warning_stage_1 : 0..1;
		pipe_mapping_enable : 0..1;
		pipe_mapping_enable_stage_1 : 0..1;
		pipe_mapping_enable_stage_2 : 0..1;
		pipe_mapping_enable_stage_3 : 0..1;
		rtreach_out : 0..1;
		rtreach_out_stage_1 : 0..1;
		task_mission_server_mission_idx : 0..task_mission_server_mission_len;
		task_mission_server_mission_idx_stage_1 : 0..task_mission_server_mission_len;
		total_degradation : 0..1;
		total_degradation_stage_1 : 0..1;
		total_degradation_stage_2 : 0..1;
	ASSIGN
		init(battery_dot_batt_charge_remaining) := 1;
		next(battery_dot_batt_charge_remaining) := 
			case
				TRUE : battery_dot_batt_charge_remaining_stage_1;
			esac;
		init(battery_dot_batt_charge_remaining_stage_1) := battery_dot_batt_charge_remaining;
		next(battery_dot_batt_charge_remaining_stage_1) := 
			case
				statuses[node_names.battery2bb] = success : {0, 1};
				TRUE : next(battery_dot_batt_charge_remaining);
			esac;
		init(bb_fls_warning) := 0;
		next(bb_fls_warning) := 
			case
				TRUE : bb_fls_warning_stage_1;
			esac;
		init(bb_fls_warning_stage_1) := bb_fls_warning;
		next(bb_fls_warning_stage_1) := 
			case
				bb_fls_warning = 1 : 1;
				(obstacle_in_view_dot_stamp_stage_1 = 1) & (statuses[node_names.fls_warning2bb] = success) : 1;
				TRUE : next(bb_fls_warning);
			esac;
		init(bb_geofence) := 0;
		next(bb_geofence) := 
			case
				TRUE : bb_geofence_stage_1;
			esac;
		init(bb_geofence_stage_1) := bb_geofence;
		next(bb_geofence_stage_1) := 
			case
				statuses[node_names.geofence2bb] = success : {0, 1};
				TRUE : next(bb_geofence);
			esac;
		init(bb_geofence_warning) := 0;
		next(bb_geofence_warning) := 
			case
				TRUE : bb_geofence_warning_stage_1;
			esac;
		init(bb_geofence_warning_stage_1) := bb_geofence_warning;
		next(bb_geofence_warning_stage_1) := 
			case
				bb_geofence_warning = 1 : 1;
				statuses[node_names.geofence2bb] = success : bb_geofence_stage_1;
				TRUE : next(bb_geofence_warning);
			esac;
		init(bb_home_reached) := 0;
		next(bb_home_reached) := 
			case
				TRUE : bb_home_reached_stage_3;
			esac;
		init(bb_home_reached_stage_1) := bb_home_reached;
		next(bb_home_reached_stage_1) := 
			case
				statuses[node_names.home2bb] = success | statuses[node_names.home2bb1] = success : {0, 1};
				TRUE : next(bb_home_reached);
			esac;
		init(bb_home_reached_stage_2) := bb_home_reached;
		next(bb_home_reached_stage_2) := 
			case
				TRUE : next(bb_home_reached_stage_1);
			esac;
		init(bb_home_reached_stage_3) := bb_home_reached;
		next(bb_home_reached_stage_3) := 
			case
				TRUE : next(bb_home_reached_stage_2);
			esac;
		init(bb_mission) := task_mission_server_mission_type_list[0];
		next(bb_mission) := 
			case
				TRUE : bb_mission_stage_3;
			esac;
		init(bb_mission_stage_1) := bb_mission;
		next(bb_mission_stage_1) := 
			case
				TRUE : next(bb_mission);
			esac;
		init(bb_mission_stage_2) := bb_mission;
		next(bb_mission_stage_2) := 
			case
				statuses[node_names.mission2bb] = success : {mission_type_path_following, mission_type_waypoint_following, mission_type_e_stop, mission_type_pipe_following, mission_type_unknown};
				TRUE : next(bb_mission_stage_1);
			esac;
		init(bb_mission_stage_3) := bb_mission;
		next(bb_mission_stage_3) := 
			case
				!(statuses[node_names.mission_server] in {invalid, failure}) & (next_mission = 1) & (task_mission_server_mission_idx_stage_1 < task_mission_server_mission_len) : task_mission_server_mission_type_list[task_mission_server_mission_idx_stage_1];
				TRUE : next(bb_mission_stage_2);
			esac;
		init(bb_obstacle_warning) := 0;
		next(bb_obstacle_warning) := 
			case
				TRUE : bb_obstacle_warning_stage_1;
			esac;
		init(bb_obstacle_warning_stage_1) := bb_obstacle_warning;
		next(bb_obstacle_warning_stage_1) := 
			case
				statuses[node_names.obstacle_avoidance] = running : {0, 1};
				TRUE : next(bb_obstacle_warning);
			esac;
		init(bb_pipe_lost_warning) := 0;
		next(bb_pipe_lost_warning) := 
			case
				TRUE : bb_pipe_lost_warning_stage_1;
			esac;
		init(bb_pipe_lost_warning_stage_1) := bb_pipe_lost_warning;
		next(bb_pipe_lost_warning_stage_1) := 
			case
				statuses[node_names.pipe_lost2bb] = success & bb_mission = mission_type_pipe_following : bb_pipelost_stage_1;
				TRUE : next(bb_pipe_lost_warning);
			esac;
		init(bb_pipelost) := 0;
		next(bb_pipelost) := 
			case
				TRUE : bb_pipelost_stage_1;
			esac;
		init(bb_pipelost_stage_1) := bb_pipelost;
		next(bb_pipelost_stage_1) := 
			case
				(statuses[node_names.pipe_lost2bb] = success) & (bb_mission = mission_type_pipe_following) : {0, 1};
				TRUE : next(bb_pipelost);
			esac;
		init(bb_rth) := 0;
		next(bb_rth) := 
			case
				TRUE : bb_rth_stage_1;
			esac;
		init(bb_rth_stage_1) := bb_rth;
		next(bb_rth_stage_1) := 
			case
				(statuses[node_names.rth2bb] = success) : {0, 1};
				TRUE : next(bb_rth);
			esac;
		init(bb_rth_warning) := 0;
		next(bb_rth_warning) := 
			case
				TRUE : bb_rth_warning_stage_2;
			esac;
		init(bb_rth_warning_stage_1) := bb_rth_warning;
		next(bb_rth_warning_stage_1) := 
			case
				bb_rth_warning = 1 : 1;
				(statuses[node_names.mission_server] = running) & (next_mission = 1) & (task_mission_server_mission_idx_stage_1 = task_mission_server_mission_len) : 1;
				TRUE : next(bb_rth_warning);
			esac;
		init(bb_rth_warning_stage_2) := bb_rth_warning;
		next(bb_rth_warning_stage_2) := 
			case
				bb_rth_warning = 1 : 1;
				statuses[node_names.rth2bb] = success : {0, 1};
				TRUE : next(bb_rth_warning_stage_1);
			esac;
		init(bb_sensor_failure) := 0;
		next(bb_sensor_failure) := 
			case
				TRUE : bb_sensor_failure_stage_1;
			esac;
		init(bb_sensor_failure_stage_1) := bb_sensor_failure;
		next(bb_sensor_failure_stage_1) := 
			case
				statuses[node_names.sensor_failure2bb] = success : {0, 1};
				TRUE : next(bb_sensor_failure);
			esac;
		init(bb_sensor_failure_warning) := 0;
		next(bb_sensor_failure_warning) := 
			case
				TRUE : bb_sensor_failure_warning_stage_1;
			esac;
		init(bb_sensor_failure_warning_stage_1) := bb_sensor_failure_warning;
		next(bb_sensor_failure_warning_stage_1) := 
			case
				bb_sensor_failure_warning = 1 : 1;
				statuses[node_names.sensor_failure2bb] = success : bb_sensor_failure_stage_1;
				TRUE : next(bb_sensor_failure_warning);
			esac;
		init(bb_waypoints_completed) := 0;
		next(bb_waypoints_completed) := 
			case
				TRUE : bb_waypoints_completed_stage_1;
			esac;
		init(bb_waypoints_completed_stage_1) := bb_waypoints_completed;
		next(bb_waypoints_completed_stage_1) := 
			case
				statuses[node_names.waypoints_completed2bb] = success : {0, 1};
				TRUE : next(bb_waypoints_completed);
			esac;
		init(dd_output) := 0;
		next(dd_output) := 
			case
				TRUE : dd_output_stage_2;
			esac;
		init(dd_output_stage_1) := dd_output;
		next(dd_output_stage_1) := 
			case
				(statuses[node_names.ddlec2bb] = success) : {0, 1, 2};
				TRUE : next(dd_output);
			esac;
		init(dd_output_stage_2) := dd_output;
		next(dd_output_stage_2) := 
			case
				TRUE : next(dd_output_stage_1);
			esac;
		init(dd_xy_axis_degradation) := 0;
		next(dd_xy_axis_degradation) := 
			case
				TRUE : dd_xy_axis_degradation_stage_2;
			esac;
		init(dd_xy_axis_degradation_stage_1) := dd_xy_axis_degradation;
		next(dd_xy_axis_degradation_stage_1) := 
			case
				(total_degradation <= total_degradation_threshold) & (dd_output_stage_1 = 2) & (statuses[node_names.ddlec2bb] = success) : 1;
				(total_degradation > total_degradation_threshold) | (dd_output_stage_1 = 0) & (statuses[node_names.ddlec2bb] = success) : 0;
				TRUE : next(dd_xy_axis_degradation);
			esac;
		init(dd_xy_axis_degradation_stage_2) := dd_xy_axis_degradation;
		next(dd_xy_axis_degradation_stage_2) := 
			case
				TRUE : next(dd_xy_axis_degradation_stage_1);
			esac;
		init(dd_z_axis_warning) := 0;
		next(dd_z_axis_warning) := 
			case
				TRUE : dd_z_axis_warning_stage_1;
			esac;
		init(dd_z_axis_warning_stage_1) := dd_z_axis_warning;
		next(dd_z_axis_warning_stage_1) := 
			case
				(total_degradation <= total_degradation_threshold) & (dd_output_stage_1 = 1) & (statuses[node_names.ddlec2bb] = success) : 1;
				((total_degradation > total_degradation_threshold) | (dd_output_stage_1 = 0)) & (statuses[node_names.ddlec2bb] = success) : 0;
				TRUE : next(dd_z_axis_warning);
			esac;
		init(emergency_stop_warning) := 0;
		next(emergency_stop_warning) := 
			case
				TRUE : emergency_stop_warning_stage_3;
			esac;
		init(emergency_stop_warning_stage_1) := emergency_stop_warning;
		next(emergency_stop_warning_stage_1) := 
			case
				emergency_stop_warning = 1 : 1;
				statuses[node_names.fls_warning2bb] = success & obstacle_in_view_dot_stamp_stage_1 = 1 : 1;
				TRUE : next(emergency_stop_warning);
			esac;
		init(emergency_stop_warning_stage_2) := emergency_stop_warning;
		next(emergency_stop_warning_stage_2) := 
			case
				emergency_stop_warning = 1 : 1;
				statuses[node_names.rtreach2bb] = success & rtreach_out < 1 : 1;
				TRUE : next(emergency_stop_warning_stage_1);
			esac;
		init(emergency_stop_warning_stage_3) := emergency_stop_warning;
		next(emergency_stop_warning_stage_3) := 
			case
				emergency_stop_warning = 1 : 1;
				!(statuses[node_names.mission_server] in {invalid, failure}) & (next_mission = 1) & (task_mission_server_mission_idx_stage_1 < task_mission_server_mission_len) & (task_mission_server_mission_type_list[task_mission_server_mission_idx_stage_1] = mission_type_e_stop) : 1;
				TRUE : next(emergency_stop_warning_stage_2);
			esac;
		init(fls_range_dot_range) := 0;
		next(fls_range_dot_range) := 
			case
				TRUE : fls_range_dot_range_stage_1;
			esac;
		init(fls_range_dot_range_stage_1) := fls_range_dot_range;
		next(fls_range_dot_range_stage_1) := 
			case
				(statuses[node_names.fls2bb] = success) : {0, 1, 2, 3};
				TRUE : next(fls_range_dot_range);
			esac;
		init(lec2_am_l_dot_confs) := 0;
		next(lec2_am_l_dot_confs) := 
			case
				TRUE : lec2_am_l_dot_confs_stage_1;
			esac;
		init(lec2_am_l_dot_confs_stage_1) := lec2_am_l_dot_confs;
		next(lec2_am_l_dot_confs_stage_1) := 
			case
				statuses[node_names.lec2_am_l_2bb] = success : {0, 1, 2, 3};
				TRUE : next(lec2_am_l_dot_confs);
			esac;
		init(lec2_am_r_dot_confs) := 0;
		next(lec2_am_r_dot_confs) := 
			case
				TRUE : lec2_am_r_dot_confs_stage_1;
			esac;
		init(lec2_am_r_dot_confs_stage_1) := lec2_am_r_dot_confs;
		next(lec2_am_r_dot_confs_stage_1) := 
			case
				statuses[node_names.lec2_am_r_2bb] = success : {0, 1, 2, 3};
				TRUE : next(lec2_am_r_dot_confs);
			esac;
		init(next_mission) := 0;
		next(next_mission) := 
			case
				TRUE : next_mission_stage_2;
			esac;
		init(next_mission_stage_1) := next_mission;
		next(next_mission_stage_1) := 
			case
				statuses[node_names.mission_server] = running : 0;
				TRUE : next(next_mission);
			esac;
		init(next_mission_stage_2) := next_mission;
		next(next_mission_stage_2) := 
			case
				statuses[node_names.next_mission] = running : 1;
				TRUE : next(next_mission_stage_1);
			esac;
		init(obstacle_in_view_dot_stamp) := 0;
		next(obstacle_in_view_dot_stamp) := 
			case
				TRUE : obstacle_in_view_dot_stamp_stage_1;
			esac;
		init(obstacle_in_view_dot_stamp_stage_1) := obstacle_in_view_dot_stamp;
		next(obstacle_in_view_dot_stamp_stage_1) := 
			case
				(statuses[node_names.fls_warning2bb] = success) : {0, 1};
				TRUE : next(obstacle_in_view_dot_stamp);
			esac;
		init(obstacle_min_standoff) := 
			case
				(task_mission_server_mission_type_list[0] = mission_type_unknown) : 1;
				TRUE : task_mission_server_mission_distance_list[0];
			esac;
		next(obstacle_min_standoff) := 
			case
				TRUE : obstacle_min_standoff_stage_2;
			esac;
		init(obstacle_min_standoff_stage_1) := obstacle_min_standoff;
		next(obstacle_min_standoff_stage_1) := 
			case
				!(statuses[node_names.mission_server] in {invalid}) & (next_mission = 1) & (task_mission_server_mission_idx_stage_1 < task_mission_server_mission_len) : task_mission_server_mission_distance_list[task_mission_server_mission_idx_stage_1];
				TRUE : next(obstacle_min_standoff);
			esac;
		init(obstacle_min_standoff_stage_2) := obstacle_min_standoff;
		next(obstacle_min_standoff_stage_2) := 
			case
				TRUE : next(obstacle_min_standoff_stage_1);
			esac;
		init(obstacle_standoff_warning) := 0;
		next(obstacle_standoff_warning) := 
			case
				TRUE : obstacle_standoff_warning_stage_1;
			esac;
		init(obstacle_standoff_warning_stage_1) := obstacle_standoff_warning;
		next(obstacle_standoff_warning_stage_1) := 
			case
				(0 < fls_range_dot_range_stage_1) & (fls_range_dot_range_stage_1 <= obstacle_min_standoff) & (statuses[node_names.fls2bb] = success) : 1;
				TRUE : next(obstacle_standoff_warning);
			esac;
		init(pipe_mapping_enable) := 1;
		next(pipe_mapping_enable) := 
			case
				TRUE : pipe_mapping_enable_stage_3;
			esac;
		init(pipe_mapping_enable_stage_1) := pipe_mapping_enable;
		next(pipe_mapping_enable_stage_1) := 
			case
				statuses[node_names.pipe_mapping_disable_task] != invalid : 0;
				TRUE : next(pipe_mapping_enable);
			esac;
		init(pipe_mapping_enable_stage_2) := pipe_mapping_enable;
		next(pipe_mapping_enable_stage_2) := 
			case
				statuses[node_names.pipe_mapping_disable_task1] != invalid : 0;
				TRUE : next(pipe_mapping_enable_stage_1);
			esac;
		init(pipe_mapping_enable_stage_3) := pipe_mapping_enable;
		next(pipe_mapping_enable_stage_3) := 
			case
				statuses[node_names.pipe_mapping_enable_task] != invalid : 1;
				TRUE : next(pipe_mapping_enable_stage_2);
			esac;
		init(rtreach_out) := 1;
		next(rtreach_out) := 
			case
				TRUE : rtreach_out_stage_1;
			esac;
		init(rtreach_out_stage_1) := rtreach_out;
		next(rtreach_out_stage_1) := 
			case
				(statuses[node_names.rtreach2bb] = success) : {0, 1};
				TRUE : next(rtreach_out);
			esac;
		next(task_mission_server_mission_idx) := 
			case
				TRUE : task_mission_server_mission_idx_stage_1;
			esac;
		init(task_mission_server_mission_idx_stage_1) := task_mission_server_mission_idx;
		next(task_mission_server_mission_idx_stage_1) := 
			case
				!(statuses[node_names.mission_server] in {invalid, failure}) & (next_mission = 1) : min(task_mission_server_mission_idx + 1, task_mission_server_mission_len);
				TRUE : next(task_mission_server_mission_idx);
			esac;
		init(total_degradation) := 0;
		next(total_degradation) := 
			case
				TRUE : total_degradation_stage_2;
			esac;
		init(total_degradation_stage_1) := total_degradation;
		next(total_degradation_stage_1) := 
			case
				!(statuses[node_names.reallocate_task] in {invalid}) & (dd_xy_axis_degradation_stage_1 = 1) : 1;
				TRUE : next(total_degradation);
			esac;
		init(total_degradation_stage_2) := total_degradation;
		next(total_degradation_stage_2) := 
			case
				TRUE : next(total_degradation_stage_1);
			esac;

MODULE battery2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE rth2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE geofence2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE lec2_am_r_2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE lec2_am_l_2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE pipe_lost2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE sensor_failure2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE waypoints_completed2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE mission2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE ddlec2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE fls2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE fls_warning2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE hsd_pipe2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE hsd_wp2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE hsd_rth2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE hsd_surface2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE rtreach2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE rtreach_unsafe_value2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE rtreach_index2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE reallocate_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE dd_lec_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE mission_server_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE obstacle_avoidance_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE surface_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE surface_task1_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE emergency_stop_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE surface_task2_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE surface_task3_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE surface_task4_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE rth_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE home2bb_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE rth_task1_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE home2bb1_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE loiter_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE tracking_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE speed_min_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE speed_min_task1_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE speed_max_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE pipe_mapping_disable_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE pipe_mapping_disable_task1_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE pipe_mapping_enable_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE next_mission_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE loiter_task1_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE waypoint_task_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE loiter_task2_STATUS_module(blackboard, node_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {failure, running, success};

MODULE is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(blackboard, node_names)
	DEFINE
		result := blackboard.dd_xy_axis_degradation_stage_2_exists & (blackboard.dd_xy_axis_degradation_stage_2=0);
MODULE battery_low_fs_CHECK_battery_low_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.battery_low_warning_stage_1_exists & (blackboard.battery_low_warning_stage_1=0);
MODULE check_sensor_failure_CHECK_bb_sensor_failure_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_sensor_failure_warning_stage_1_exists & (blackboard.bb_sensor_failure_warning_stage_1=0);
MODULE emergency_stop_fs_CHECK_emergency_stop_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.emergency_stop_warning_stage_3_exists & (blackboard.emergency_stop_warning_stage_3=0);
MODULE check_surface_CHECK_bb_home_reached_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_home_reached_stage_1_exists & (blackboard.bb_home_reached_stage_1=0);
MODULE obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.obstacle_standoff_warning_stage_1_exists & (blackboard.obstacle_standoff_warning_stage_1=0);
MODULE check_rth_CHECK_bb_rth_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_rth_warning_stage_2_exists & (blackboard.bb_rth_warning_stage_2=0);
MODULE check_geofence_CHECK_bb_geofence_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_geofence_warning_stage_1_exists & (blackboard.bb_geofence_warning_stage_1=0);
MODULE check_pipe_post_CHECK_bb_pipe_lost_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_pipe_lost_warning_stage_1_exists & (blackboard.bb_pipe_lost_warning_stage_1=0);
MODULE is_track_pipe_mission_requested_CHECK_bb_mission_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_mission_stage_3_exists & (blackboard.bb_mission_stage_3=mission_type_pipe_following);
MODULE check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.lec2_am_l_speed_warning_stage_1_exists & (blackboard.lec2_am_l_speed_warning_stage_1=0);
MODULE check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.lec2_am_r_speed_warning_stage_1_exists & (blackboard.lec2_am_r_speed_warning_stage_1=0);
MODULE check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.lec2_am_l_pipe_warning_stage_1_exists & (blackboard.lec2_am_l_pipe_warning_stage_1=0);
MODULE check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(blackboard, node_names)
	DEFINE
		result := blackboard.lec2_am_r_pipe_warning_stage_1_exists & (blackboard.lec2_am_r_pipe_warning_stage_1=0);
MODULE is_waypoint_requested_CHECK_bb_mission_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_mission_stage_3_exists & (blackboard.bb_mission_stage_3=mission_type_waypoint_following);
MODULE check_waypoints_completed_CHECK_bb_waypoints_completed_module(blackboard, node_names)
	DEFINE
		result := blackboard.bb_waypoints_completed_stage_1_exists & (blackboard.bb_waypoints_completed_stage_1=0);
