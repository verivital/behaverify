#!/usr/bin/env python
#
# License: BSD
#   https://raw.github.com/stonier/py_trees_ros/license/LICENSE
#
##############################################################################
# Documentation
##############################################################################

"""
{{bb_node.comment}}
"""

##############################################################################
# Imports
##############################################################################

import py_trees
import rospy
import sensor_msgs.msg as sensor_msgs
from {{bb_node.input_topic.type.package}}.msg import {{bb_node.input_topic.type.name}}
from py_trees_ros import subscribers
############<<USER IMPORT CODE BEGINS>>##############################
{{user_code['IMPORT']-}}
############<<USER IMPORT CODE ENDS>>################################

##############################################################################
# Blackboard node
##############################################################################


class ToBlackboard(subscribers.ToBlackboard):
    """
    Subscribes to the battery message and writes battery data to the blackboard.
    Also adds a warning flag to the blackboard if the battery
    is low - note that it does some buffering against ping-pong problems so the warning
    doesn't trigger on/off rapidly when close to the threshold.

    When ticking, updates with :attr:`~py_trees.common.Status.RUNNING` if it got no data,
    :attr:`~py_trees.common.Status.SUCCESS` otherwise.

    Blackboard Variables:
        * {{bb_node.topic_bbvar.name}}: the raw message from topic {{bb_node.input_topic.topic_string}}
{% for var in bb_node.bb_vars %}
        * {{var.name}} (:obj:`{{var.type.name}}`)
{% endfor %}
    Args:
        name (:obj:`str`): name of the behaviour
        topic_name (:obj:`str`) : name of the input topic
{%- for arg in bb_node.args %}        
        {{arg.name}} (:obj:`float`) : parameter
{%- endfor %}        
    """
    def __init__(self, 
                    name, 
                    topic_name="{{bb_node.input_topic.name}}"{{ ", " if bb_node.args else "" }} 
{%- for arg in bb_node.args %}        
                    {{arg.name}}={{arg.default}}{{ ", " if not loop.last else "" }}
{%- endfor %}        
                ):
{%set default_value = get_default(bb_node.topic_bbvar) %}                
        super(ToBlackboard, self).__init__(name=name,
                                           topic_name=topic_name,
                                           topic_type={{bb_node.input_topic.type.name}},
                                           blackboard_variables={"{{bb_node.topic_bbvar.name}}":None},
                                           clearing_policy=py_trees.common.ClearingPolicy.NEVER
                                           )
        self.blackboard = py_trees.blackboard.Blackboard()
{%if is_message(bb_node.input_topic.type)%}        
        self.blackboard.{{bb_node.topic_bbvar.name}} = {{bb_node.input_topic.type.name}}()
{% endif %}        
{% for var in bb_node.bb_vars %}
        self.blackboard.{{var.name}} = {{get_default(var)}}
{% endfor %}        
{%- for arg in bb_node.args %}        
        self.{{arg.name}}={{arg.name}}
{%- endfor %}        
############<<USER INIT CODE BEGINS>>##############################
{{user_code['INIT']-}}
############<<USER INIT CODE ENDS>>################################
    def update(self):
        """
        Call the parent to write the raw data to the blackboard and then check against the
        parameters to update the bb variable
        """
        self.logger.debug("%s.update()" % self.__class__.__name__)
        status = super(ToBlackboard, self).update()
        if status == py_trees.common.Status.RUNNING:
            return status
############<<USER UPDATE CODE BEGINS>>##############################
{{user_code['UPDATE']-}}
############<<USER UPDATE CODE ENDS>>################################
        return status
        
############<<USER CUSTOM CODE BEGINS>>##############################
{{user_code['CUSTOM']-}}
############<<USER CUSTOM CODE ENDS>>################################
