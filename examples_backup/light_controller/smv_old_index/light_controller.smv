MODULE main
    VAR
        system : system_module;
--------------SPECIFICATIONS

INVARSPEC !((system.west_light_stage_1 & system.east_light_stage_1));
INVARSPEC !((system.west_light_stage_1 & (system.tunnel_state_stage_1 = east_to_west)));
INVARSPEC !((system.east_light_stage_1 & (system.tunnel_state_stage_1 = west_to_east)));
CTLSPEC AG((system.west_cars_stage_1 -> AF(system.west_light_stage_1)));
CTLSPEC AG((system.east_cars_stage_1 -> AF(system.east_light_stage_1)));
LTLSPEC G((system.west_cars_stage_1 -> F(system.west_light_stage_1)));
LTLSPEC G((system.east_cars_stage_1 -> F(system.east_light_stage_1)));
CTLSPEC (AG(AF((system.tunnel_state_stage_1 = empty))) -> AG((system.west_cars_stage_1 -> AF(system.west_light_stage_1))));
CTLSPEC (AG(AF((system.tunnel_state_stage_1 = empty))) -> AG((system.east_cars_stage_1 -> AF(system.east_light_stage_1))));
LTLSPEC (G(F((system.tunnel_state_stage_1 = empty))) -> G((system.west_cars_stage_1 -> F(system.west_light_stage_1))));
LTLSPEC (G(F((system.tunnel_state_stage_1 = empty))) -> G((system.east_cars_stage_1 -> F(system.east_light_stage_1))));

--------------END OF SPECIFICATIONS

MODULE system_module
    CONSTANTS
        success, failure, running, invalid, empty, west_to_east, east_to_west;
    DEFINE
        resume_from_here_in_subtree__light_controller := -3;
        light_controller.active := TRUE;
        --START OF BLACKBOARD DEFINITIONS
        fairness_counter_stage_1 := 
            case
                !(swap_direction.active) : fairness_counter_stage_0;
                TRUE : 0;
            esac;
        fairness_counter_stage_2 := 
            case
                !(set_west.active) : fairness_counter_stage_1;
                TRUE : 0;
            esac;
        fairness_counter_stage_3 := 
            case
                !(set_east.active) : fairness_counter_stage_2;
                TRUE : 0;
            esac;
        direction_stage_1 := 
            case
                !(swap_direction.active) : direction_stage_0;
                (direction_stage_0 = west_to_east) : east_to_west;
                TRUE : west_to_east;
            esac;
        direction_stage_2 := 
            case
                !(set_west.active) : direction_stage_1;
                TRUE : west_to_east;
            esac;
        direction_stage_3 := 
            case
                !(set_east.active) : direction_stage_2;
                TRUE : east_to_west;
            esac;
        west_and_east_cars_stage_0 :=
            case
                TRUE : (west_cars_stage_0 & east_cars_stage_0);
            esac;
        west_light_stage_1 := 
            case
                !(send_light_signal.active) : west_light_stage_0;
                (direction_stage_3 = west_to_east) : TRUE;
                TRUE : FALSE;
            esac;
        east_light_stage_1 := 
            case
                !(send_light_signal.active) : east_light_stage_0;
                (direction_stage_3 = east_to_west) : TRUE;
                TRUE : FALSE;
            esac;
        --END OF BLACKBOARD DEFINITIONS
    VAR
        node_names : define_nodes;
        check_west_and_east_cars : check_west_and_east_cars_module(west_and_east_cars_stage_0);
        check_fairness : check_fairness_module(fairness_counter_stage_0);
        swap_direction : success_DEFAULT_module();
        choose_fairly : composite_selector_without_memory_2(check_fairness, swap_direction);
        try_west_and_east : composite_sequence_without_memory_2(check_west_and_east_cars, choose_fairly);
        check_west_cars : check_west_cars_module(west_cars_stage_0);
        set_west : success_DEFAULT_module();
        try_west : composite_sequence_without_memory_2(check_west_cars, set_west);
        check_east_cars : check_east_cars_module(east_cars_stage_0);
        set_east : success_DEFAULT_module();
        try_east : composite_sequence_without_memory_2(check_east_cars, set_east);
        select_direction : composite_selector_without_memory_3(try_west_and_east, try_west, try_east);
        check_safety : check_safety_module(direction_stage_3, tunnel_state_stage_0);
        send_light_signal : success_DEFAULT_module();
        activate_light : composite_sequence_without_memory_2(check_safety, send_light_signal);
        light_controller : composite_sequence_without_memory_2(select_direction, activate_light);
        --START OF BLACKBOARD VARIABLES DECLARATION
        fairness_counter_stage_0 : 0..4;
        direction_stage_0 : {east_to_west, west_to_east};
        tunnel_state_stage_0 : {empty, east_to_west, west_to_east};
        tunnel_state_stage_1 : {empty, east_to_west, west_to_east};
        east_cars_stage_0 : boolean;
        east_cars_stage_1 : boolean;
        west_cars_stage_0 : boolean;
        west_cars_stage_1 : boolean;
        west_light_stage_0 : boolean;
        east_light_stage_0 : boolean;
        --END OF BLACKBOARD VARIABLES DECLARATION
    ASSIGN
        --START OF BLACKBOARD VARIABLES INITIALIZATION
        init(fairness_counter_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(direction_stage_0) := 
            case
                TRUE : east_to_west;
            esac;
        init(tunnel_state_stage_0) := 
            case
                TRUE : empty;
            esac;
        init(east_cars_stage_0) := 
            case
                TRUE : {TRUE, FALSE};
            esac;
        init(west_cars_stage_0) := 
            case
                TRUE : {TRUE, FALSE};
            esac;
        init(west_light_stage_0) := 
            case
                TRUE : FALSE;
            esac;
        init(east_light_stage_0) := 
            case
                TRUE : FALSE;
            esac;
        --END OF BLACKBOARD VARIABLES INITIALIZATION
        --START OF BLACKBOARD VARIABLES TRANSITION
        next(fairness_counter_stage_0) := 
            case
                !(send_light_signal.active) : fairness_counter_stage_3;
                TRUE : min(4, (fairness_counter_stage_3 + 1));
            esac;
        next(direction_stage_0) := direction_stage_3;
        next(tunnel_state_stage_0) := tunnel_state_stage_1;
        tunnel_state_stage_1 := 
            case
                !(light_controller.active) : tunnel_state_stage_0;
                west_light_stage_1 : {empty, west_to_east};
                east_light_stage_1 : {empty, east_to_west};
                TRUE : {empty, tunnel_state_stage_0};
            esac;
        next(east_cars_stage_0) := east_cars_stage_1;
        east_cars_stage_1 := 
            case
                !(light_controller.active) : east_cars_stage_0;
                east_light_stage_1 : {TRUE, FALSE};
                TRUE : {TRUE, east_cars_stage_0};
            esac;
        next(west_cars_stage_0) := west_cars_stage_1;
        west_cars_stage_1 := 
            case
                !(light_controller.active) : west_cars_stage_0;
                west_light_stage_1 : {TRUE, FALSE};
                TRUE : {TRUE, west_cars_stage_0};
            esac;
        next(west_light_stage_0) := west_light_stage_1;
        next(east_light_stage_0) := east_light_stage_1;
        --END OF BLACKBOARD VARIABLES TRANSITION

MODULE define_nodes
    DEFINE
        light_controller := 0;
        select_direction := 1;
        try_west_and_east := 2;
        check_west_and_east_cars := 3;
        choose_fairly := 4;
        check_fairness := 5;
        swap_direction := 6;
        try_west := 7;
        check_west_cars := 8;
        set_west := 9;
        try_east := 10;
        check_east_cars := 11;
        set_east := 12;
        activate_light := 13;
        check_safety := 14;
        send_light_signal := 15;
MODULE composite_selector_without_memory_3(child_0, child_1, child_2)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = failure) : child_0.internal_status;
                !(child_1.internal_status = failure) : child_1.internal_status;
                !(child_2.internal_status = failure) : child_2.internal_status;
                TRUE : failure;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = failure;
        child_2.active := child_1.status = failure;
MODULE composite_selector_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = failure) : child_0.internal_status;
                !(child_1.internal_status = failure) : child_1.internal_status;
                TRUE : failure;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = failure;
MODULE composite_sequence_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = success) : child_0.internal_status;
                !(child_1.internal_status = success) : child_1.internal_status;
                TRUE : success;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = success;
MODULE check_west_and_east_cars_module(west_and_east_cars_stage_0)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (west_and_east_cars_stage_0) ? success : failure;
MODULE check_fairness_module(fairness_counter_stage_0)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((fairness_counter_stage_0 < 4)) ? success : failure;
MODULE check_west_cars_module(west_cars_stage_0)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (west_cars_stage_0) ? success : failure;
MODULE check_east_cars_module(east_cars_stage_0)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (east_cars_stage_0) ? success : failure;
MODULE check_safety_module(direction_stage_3, tunnel_state_stage_0)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (((tunnel_state_stage_0 = empty) | (direction_stage_3 = tunnel_state_stage_0))) ? success : failure;
MODULE success_DEFAULT_module
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := success;
