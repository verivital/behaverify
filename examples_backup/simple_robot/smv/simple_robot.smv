MODULE main
    VAR
        system : system_module;
--------------SPECIFICATIONS

LTLSPEC F((system.remaining_goals_stage_1 = 0));
CTLSPEC AF((system.remaining_goals_stage_1 = 0));

--------------END OF SPECIFICATIONS

MODULE system_module
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        resume_from_here_in_subtree__robot_control := -3;
        robot_control.active := (remaining_goals_stage_0 > 0);
        --START OF BLACKBOARD DEFINITIONS
        x_stage_1 := 
            case
                !(get_position.active) : x_stage_0;
                !(TRUE) : x_stage_0;
                TRUE : x_true_stage_0;
            esac;
        y_stage_1 := 
            case
                !(get_position.active) : y_stage_0;
                !(TRUE) : y_stage_0;
                TRUE : y_true_stage_0;
            esac;
        target_x_stage_1 := 
            case
                !(get_mission.active) : target_x_stage_0;
                !(TRUE) : target_x_stage_0;
                TRUE : x_goal_stage_0;
            esac;
        target_y_stage_1 := 
            case
                !(get_mission.active) : target_y_stage_0;
                !(TRUE) : target_y_stage_0;
                TRUE : y_goal_stage_0;
            esac;
        mission_stage_1 := 
            case
                !(clear_mission.active) : mission_stage_0;
                TRUE : FALSE;
            esac;
        x_true_stage_1 := 
            case
                !(go_right.active) : x_true_stage_0;
                TRUE : min(7, (x_true_stage_0 + 1));
            esac;
        x_true_stage_2 := 
            case
                !(go_left.active) : x_true_stage_1;
                TRUE : max(0, (x_true_stage_1 - 1));
            esac;
        y_true_stage_1 := 
            case
                !(go_up.active) : y_true_stage_0;
                TRUE : min(7, (y_true_stage_0 + 1));
            esac;
        y_true_stage_2 := 
            case
                !(go_down.active) : y_true_stage_1;
                TRUE : max(0, (y_true_stage_1 - 1));
            esac;
        remaining_goals_stage_1 := 
            case
                !(robot_control.active) : remaining_goals_stage_0;
                ((x_goal_stage_0 = x_true_stage_2) & (y_goal_stage_0 = y_true_stage_2)) : max(0, (remaining_goals_stage_0 - 1));
                TRUE : remaining_goals_stage_0;
            esac;
        --END OF BLACKBOARD DEFINITIONS
    VAR
        node_names : define_nodes;
        get_position : success_DEFAULT_module();
        target_reached : target_reached_module(target_x_stage_0, target_y_stage_0, x_stage_1, y_stage_1);
        clear_mission : success_DEFAULT_module();
        reset_completed_mission : composite_sequence_without_memory_2(target_reached, clear_mission);
        reset_completed_mission_FiS : decorator_X_is_Y(reset_completed_mission, failure, success);
        have_mission : have_mission_module(mission_stage_1);
        get_mission : success_DEFAULT_module();
        confirm_mission : composite_selector_without_memory_2(have_mission, get_mission);
        x_too_small : x_too_small_module(target_x_stage_1, x_stage_1);
        go_right : success_DEFAULT_module();
        try_right : composite_sequence_without_memory_2(x_too_small, go_right);
        x_too_big : x_too_big_module(target_x_stage_1, x_stage_1);
        go_left : success_DEFAULT_module();
        try_left : composite_sequence_without_memory_2(x_too_big, go_left);
        y_too_small : y_too_small_module(target_y_stage_1, y_stage_1);
        go_up : success_DEFAULT_module();
        try_up : composite_sequence_without_memory_2(y_too_small, go_up);
        y_too_big : y_too_big_module(target_y_stage_1, y_stage_1);
        go_down : success_DEFAULT_module();
        try_down : composite_sequence_without_memory_2(y_too_big, go_down);
        move_robot : composite_selector_without_memory_4(try_right, try_left, try_up, try_down);
        robot_control : composite_sequence_without_memory_4(get_position, reset_completed_mission_FiS, confirm_mission, move_robot);
        --START OF BLACKBOARD VARIABLES DECLARATION
        x_stage_0 : 0..7;
        y_stage_0 : 0..7;
        target_x_stage_0 : 0..7;
        target_y_stage_0 : 0..7;
        mission_stage_0 : boolean;
        x_goal_stage_0 : 0..7;
        x_goal_stage_1 : 0..7;
        y_goal_stage_0 : 0..7;
        x_true_stage_0 : 0..7;
        y_true_stage_0 : 0..7;
        remaining_goals_stage_0 : 0..3;
        --END OF BLACKBOARD VARIABLES DECLARATION
    ASSIGN
        --START OF BLACKBOARD VARIABLES INITIALIZATION
        init(x_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(y_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(target_x_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(target_y_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(mission_stage_0) := 
            case
                TRUE : FALSE;
            esac;
        init(x_goal_stage_0) := 
            case
                TRUE : {0, 1, 2, 3, 4, 5, 6, 7};
            esac;
        init(y_goal_stage_0) := 
            case
                TRUE : {0, 1, 2, 3, 4, 5, 6, 7};
            esac;
        init(x_true_stage_0) := 
            case
                TRUE : {0, 1, 2, 3, 4, 5, 6, 7};
            esac;
        init(y_true_stage_0) := 
            case
                TRUE : {0, 1, 2, 3, 4, 5, 6, 7};
            esac;
        init(remaining_goals_stage_0) := 
            case
                TRUE : {0, 1, 2, 3};
            esac;
        --END OF BLACKBOARD VARIABLES INITIALIZATION
        --START OF BLACKBOARD VARIABLES TRANSITION
        next(x_stage_0) := x_stage_1;
        next(y_stage_0) := y_stage_1;
        next(target_x_stage_0) := target_x_stage_1;
        next(target_y_stage_0) := target_y_stage_1;
        next(mission_stage_0) := 
            case
                !(get_mission.active) : mission_stage_1;
                TRUE : TRUE;
            esac;
        next(x_goal_stage_0) := x_goal_stage_1;
        x_goal_stage_1 := 
            case
                !(robot_control.active) : x_goal_stage_0;
                (0 = remaining_goals_stage_1) : x_goal_stage_0;
                ((x_goal_stage_0 = x_true_stage_2) & (y_goal_stage_0 = y_true_stage_2)) : {0, 1, 2, 3, 4, 5, 6, 7};
                TRUE : x_goal_stage_0;
            esac;
        next(y_goal_stage_0) := 
            case
                !(robot_control.active) : y_goal_stage_0;
                (0 = remaining_goals_stage_1) : y_goal_stage_0;
                ((x_goal_stage_1 = x_true_stage_2) & (y_goal_stage_0 = y_true_stage_2)) : {0, 1, 2, 3, 4, 5, 6, 7};
                TRUE : y_goal_stage_0;
            esac;
        next(x_true_stage_0) := x_true_stage_2;
        next(y_true_stage_0) := y_true_stage_2;
        next(remaining_goals_stage_0) := remaining_goals_stage_1;
        --END OF BLACKBOARD VARIABLES TRANSITION

MODULE define_nodes
    DEFINE
        robot_control := 0;
        get_position := 1;
        reset_completed_mission_FiS := 2;
        reset_completed_mission := 3;
        target_reached := 4;
        clear_mission := 5;
        confirm_mission := 6;
        have_mission := 7;
        get_mission := 8;
        move_robot := 9;
        try_right := 10;
        x_too_small := 11;
        go_right := 12;
        try_left := 13;
        x_too_big := 14;
        go_left := 15;
        try_up := 16;
        y_too_small := 17;
        go_up := 18;
        try_down := 19;
        y_too_big := 20;
        go_down := 21;
MODULE composite_sequence_without_memory_4(child_0, child_1, child_2, child_3)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = success) : child_0.internal_status;
                !(child_1.internal_status = success) : child_1.internal_status;
                !(child_2.internal_status = success) : child_2.internal_status;
                !(child_3.internal_status = success) : child_3.internal_status;
                TRUE : success;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = success;
        child_2.active := child_1.status = success;
        child_3.active := child_2.status = success;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                child_0.internal_status = incoming_status : outgoing_status;
                TRUE : child_0.internal_status;
            esac;
        child_0.active :=
            case
                !(active) : FALSE;
                TRUE : TRUE;
            esac;
MODULE composite_selector_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = failure) : child_0.internal_status;
                !(child_1.internal_status = failure) : child_1.internal_status;
                TRUE : failure;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = failure;
MODULE composite_selector_without_memory_4(child_0, child_1, child_2, child_3)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = failure) : child_0.internal_status;
                !(child_1.internal_status = failure) : child_1.internal_status;
                !(child_2.internal_status = failure) : child_2.internal_status;
                !(child_3.internal_status = failure) : child_3.internal_status;
                TRUE : failure;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = failure;
        child_2.active := child_1.status = failure;
        child_3.active := child_2.status = failure;
MODULE composite_sequence_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = success) : child_0.internal_status;
                !(child_1.internal_status = success) : child_1.internal_status;
                TRUE : success;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = success;
MODULE target_reached_module(target_x_stage_0, target_y_stage_0, x_stage_1, y_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (((x_stage_1 = target_x_stage_0) & (y_stage_1 = target_y_stage_0))) ? success : failure;
MODULE have_mission_module(mission_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (mission_stage_1) ? success : failure;
MODULE x_too_small_module(target_x_stage_1, x_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((x_stage_1 < target_x_stage_1)) ? success : failure;
MODULE x_too_big_module(target_x_stage_1, x_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((x_stage_1 > target_x_stage_1)) ? success : failure;
MODULE y_too_small_module(target_y_stage_1, y_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((y_stage_1 < target_y_stage_1)) ? success : failure;
MODULE y_too_big_module(target_y_stage_1, y_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((y_stage_1 > target_y_stage_1)) ? success : failure;
MODULE success_DEFAULT_module
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := success;
