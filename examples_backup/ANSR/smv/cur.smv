MODULE main
    VAR
        system : system_module;
--------------SPECIFICATIONS

CTLSPEC AF(system.victory_stage_1);
LTLSPEC F [0, 200] (system.victory_stage_1);

--------------END OF SPECIFICATIONS

MODULE system_module
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        resume_from_here_in_subtree__drone_control := -3;
        drone_control.active := !(victory_stage_0);
        --START OF BLACKBOARD DEFINITIONS
        cur_x_stage_1 := 
            case
                !(move.active) : cur_x_stage_0;
                TRUE : max(0, min(10, (0 + cur_x_stage_0)));
            esac;
        cur_x_stage_2 := 
            case
                !(move_1.active) : cur_x_stage_1;
                TRUE : max(0, min(10, (0 + cur_x_stage_1)));
            esac;
        cur_x_stage_3 := 
            case
                !(move_2.active) : cur_x_stage_2;
                TRUE : max(0, min(10, (-1 + cur_x_stage_2)));
            esac;
        cur_y_stage_1 := 
            case
                !(move.active) : cur_y_stage_0;
                TRUE : max(0, min(10, (1 + cur_y_stage_0)));
            esac;
        cur_y_stage_2 := 
            case
                !(move_1.active) : cur_y_stage_1;
                TRUE : max(0, min(10, (-1 + cur_y_stage_1)));
            esac;
        cur_y_stage_3 := 
            case
                !(move_2.active) : cur_y_stage_2;
                TRUE : max(0, min(10, (0 + cur_y_stage_2)));
            esac;
        dest_x_stage_1 := 
            case
                !(call_xy_net.active) : dest_x_stage_0;
                TRUE : max(0, min(10, floor(x_net_output_stage_0)));
            esac;
        dest_y_stage_1 := 
            case
                !(call_xy_net.active) : dest_y_stage_0;
                TRUE : max(0, min(10, y_net_output_stage_0));
            esac;
        dir_stage_1 := 
            case
                !(update_direction.active) : dir_stage_0;
                (cur_y_stage_0 = 10) : -1;
                (cur_y_stage_0 = 0) : 1;
                TRUE : dir_stage_0;
            esac;
        victory_stage_1 := 
            case
                !(send_victory.active) : victory_stage_0;
                TRUE : TRUE;
            esac;
        tree_x_stage_0_index_0 :=
            case
                TRUE : 2;
            esac;
        tree_x_stage_0_index_1 :=
            case
                TRUE : 5;
            esac;
        tree_y_stage_0_index_0 :=
            case
                TRUE : 2;
            esac;
        tree_y_stage_0_index_1 :=
            case
                TRUE : 5;
            esac;
        x_net_node_0_0_stage_0 :=
            case
                TRUE : dest_x_stage_0;
            esac;
        x_net_node_0_1_stage_0 :=
            case
                TRUE : prev_dest_x_stage_0;
            esac;
        x_net_node_1_0_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * 0.6578918) + (x_net_node_0_1_stage_0 * -0.34521425) + 0.62692827), 0);
            esac;
        x_net_node_1_1_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * 0.8529887) + (x_net_node_0_1_stage_0 * -0.84701735) + -0.010374815), 0);
            esac;
        x_net_node_1_2_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * -0.5847367) + (x_net_node_0_1_stage_0 * 0.26248214) + 0.5592191), 0);
            esac;
        x_net_node_1_3_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * 0.46987224) + (x_net_node_0_1_stage_0 * 0.1913096) + 1.2794331), 0);
            esac;
        x_net_node_1_4_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * -0.40401614) + (x_net_node_0_1_stage_0 * -0.061261952) + 0.0), 0);
            esac;
        x_net_node_1_5_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * -0.1762076) + (x_net_node_0_1_stage_0 * 0.40228945) + 0.7960203), 0);
            esac;
        x_net_node_1_6_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * -0.68756187) + (x_net_node_0_1_stage_0 * 0.6861109) + 0.006324993), 0);
            esac;
        x_net_node_1_7_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * 0.9007066) + (x_net_node_0_1_stage_0 * 0.6200078) + -0.7310154), 0);
            esac;
        x_net_node_1_8_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * 0.17452484) + (x_net_node_0_1_stage_0 * -0.6996262) + -0.19942215), 0);
            esac;
        x_net_node_1_9_stage_0 :=
            case
                TRUE : max(((x_net_node_0_0_stage_0 * 0.6491264) + (x_net_node_0_1_stage_0 * -0.59584916) + 0.54945916), 0);
            esac;
        x_net_node_2_0_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * -0.45446032) + (x_net_node_1_1_stage_0 * -0.5127789) + (x_net_node_1_2_stage_0 * 0.3085168) + (x_net_node_1_3_stage_0 * -0.3518694) + (x_net_node_1_4_stage_0 * 0.2062329) + (x_net_node_1_5_stage_0 * -0.102909535) + (x_net_node_1_6_stage_0 * -0.088344485) + (x_net_node_1_7_stage_0 * -0.31102866) + (x_net_node_1_8_stage_0 * -0.38162816) + (x_net_node_1_9_stage_0 * -0.25255156) + 0.0), 0);
            esac;
        x_net_node_2_1_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * 0.4261802) + (x_net_node_1_1_stage_0 * -0.8262145) + (x_net_node_1_2_stage_0 * -0.3278613) + (x_net_node_1_3_stage_0 * 0.17596045) + (x_net_node_1_4_stage_0 * 0.45528078) + (x_net_node_1_5_stage_0 * -0.12026746) + (x_net_node_1_6_stage_0 * -0.53016776) + (x_net_node_1_7_stage_0 * 0.67134506) + (x_net_node_1_8_stage_0 * 0.25712654) + (x_net_node_1_9_stage_0 * -0.12462206) + -0.8061583), 0);
            esac;
        x_net_node_2_2_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * 0.5684861) + (x_net_node_1_1_stage_0 * 0.92106175) + (x_net_node_1_2_stage_0 * 0.1897123) + (x_net_node_1_3_stage_0 * 0.56560737) + (x_net_node_1_4_stage_0 * -0.19900358) + (x_net_node_1_5_stage_0 * 0.37021562) + (x_net_node_1_6_stage_0 * 0.18067262) + (x_net_node_1_7_stage_0 * 0.48941767) + (x_net_node_1_8_stage_0 * -0.009980795) + (x_net_node_1_9_stage_0 * -0.08049972) + -0.07401787), 0);
            esac;
        x_net_node_2_3_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * -0.73334455) + (x_net_node_1_1_stage_0 * -0.4658336) + (x_net_node_1_2_stage_0 * 0.710656) + (x_net_node_1_3_stage_0 * 0.035908703) + (x_net_node_1_4_stage_0 * 0.10230255) + (x_net_node_1_5_stage_0 * 0.34499472) + (x_net_node_1_6_stage_0 * 1.0368726) + (x_net_node_1_7_stage_0 * 0.12952912) + (x_net_node_1_8_stage_0 * -0.6590092) + (x_net_node_1_9_stage_0 * -0.9241341) + 0.51785547), 0);
            esac;
        x_net_node_2_4_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * -0.16444819) + (x_net_node_1_1_stage_0 * 0.6430495) + (x_net_node_1_2_stage_0 * -0.019573467) + (x_net_node_1_3_stage_0 * 0.42095882) + (x_net_node_1_4_stage_0 * 0.26029682) + (x_net_node_1_5_stage_0 * 0.42904234) + (x_net_node_1_6_stage_0 * -0.5548977) + (x_net_node_1_7_stage_0 * 0.19420777) + (x_net_node_1_8_stage_0 * -0.38791284) + (x_net_node_1_9_stage_0 * 0.078287184) + -1.0678436), 0);
            esac;
        x_net_node_2_5_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * -0.0074855345) + (x_net_node_1_1_stage_0 * 0.67464495) + (x_net_node_1_2_stage_0 * -0.82194966) + (x_net_node_1_3_stage_0 * 0.2229102) + (x_net_node_1_4_stage_0 * -0.23541313) + (x_net_node_1_5_stage_0 * -0.54472774) + (x_net_node_1_6_stage_0 * 0.25475127) + (x_net_node_1_7_stage_0 * 0.6252586) + (x_net_node_1_8_stage_0 * 0.09433515) + (x_net_node_1_9_stage_0 * -0.28811833) + -0.20758276), 0);
            esac;
        x_net_node_2_6_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * 0.23126407) + (x_net_node_1_1_stage_0 * 0.5748177) + (x_net_node_1_2_stage_0 * -0.8684098) + (x_net_node_1_3_stage_0 * 0.5373492) + (x_net_node_1_4_stage_0 * 0.04947245) + (x_net_node_1_5_stage_0 * 0.032245904) + (x_net_node_1_6_stage_0 * 0.73802894) + (x_net_node_1_7_stage_0 * 0.6333589) + (x_net_node_1_8_stage_0 * -0.26042286) + (x_net_node_1_9_stage_0 * 0.107220076) + 0.62527555), 0);
            esac;
        x_net_node_2_7_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * 0.44068417) + (x_net_node_1_1_stage_0 * -0.46611997) + (x_net_node_1_2_stage_0 * -0.6296728) + (x_net_node_1_3_stage_0 * 0.5665917) + (x_net_node_1_4_stage_0 * -0.4139767) + (x_net_node_1_5_stage_0 * 0.4791759) + (x_net_node_1_6_stage_0 * -0.31671292) + (x_net_node_1_7_stage_0 * 0.004291155) + (x_net_node_1_8_stage_0 * 0.2434273) + (x_net_node_1_9_stage_0 * -0.14721403) + 0.93998086), 0);
            esac;
        x_net_node_2_8_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * -0.5386742) + (x_net_node_1_1_stage_0 * -0.46888655) + (x_net_node_1_2_stage_0 * -0.41358232) + (x_net_node_1_3_stage_0 * -0.3895629) + (x_net_node_1_4_stage_0 * -0.27676046) + (x_net_node_1_5_stage_0 * -0.42837343) + (x_net_node_1_6_stage_0 * -0.1248405) + (x_net_node_1_7_stage_0 * -0.53614604) + (x_net_node_1_8_stage_0 * 0.11560547) + (x_net_node_1_9_stage_0 * 0.28032917) + 0.0), 0);
            esac;
        x_net_node_2_9_stage_0 :=
            case
                TRUE : max(((x_net_node_1_0_stage_0 * 0.247372) + (x_net_node_1_1_stage_0 * -0.32293057) + (x_net_node_1_2_stage_0 * 0.8891721) + (x_net_node_1_3_stage_0 * 0.39651027) + (x_net_node_1_4_stage_0 * 0.28709042) + (x_net_node_1_5_stage_0 * 0.9086439) + (x_net_node_1_6_stage_0 * -0.14988151) + (x_net_node_1_7_stage_0 * -0.5362614) + (x_net_node_1_8_stage_0 * -0.5218079) + (x_net_node_1_9_stage_0 * 0.40836212) + 1.14314), 0);
            esac;
        x_net_node_3_0_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * 0.25632548) + (x_net_node_2_1_stage_0 * -0.34842002) + (x_net_node_2_2_stage_0 * 0.5442342) + (x_net_node_2_3_stage_0 * 0.08418185) + (x_net_node_2_4_stage_0 * 0.57597506) + (x_net_node_2_5_stage_0 * 0.5408019) + (x_net_node_2_6_stage_0 * 0.476291) + (x_net_node_2_7_stage_0 * 0.39190826) + (x_net_node_2_8_stage_0 * -0.28151736) + (x_net_node_2_9_stage_0 * -0.8935945) + -0.012210114), 0);
            esac;
        x_net_node_3_1_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * -0.30568475) + (x_net_node_2_1_stage_0 * 0.5772115) + (x_net_node_2_2_stage_0 * -0.10509909) + (x_net_node_2_3_stage_0 * -0.6164364) + (x_net_node_2_4_stage_0 * -0.035120808) + (x_net_node_2_5_stage_0 * -0.5461031) + (x_net_node_2_6_stage_0 * -0.21386093) + (x_net_node_2_7_stage_0 * 0.610046) + (x_net_node_2_8_stage_0 * -0.15124679) + (x_net_node_2_9_stage_0 * 0.15310085) + 0.054143887), 0);
            esac;
        x_net_node_3_2_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * 0.34155577) + (x_net_node_2_1_stage_0 * -0.29456782) + (x_net_node_2_2_stage_0 * 0.5404558) + (x_net_node_2_3_stage_0 * 0.67999434) + (x_net_node_2_4_stage_0 * 0.46925664) + (x_net_node_2_5_stage_0 * -0.37445587) + (x_net_node_2_6_stage_0 * 0.17125846) + (x_net_node_2_7_stage_0 * -0.6826509) + (x_net_node_2_8_stage_0 * 0.14337802) + (x_net_node_2_9_stage_0 * -1.3319025) + -0.6237479), 0);
            esac;
        x_net_node_3_3_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * -0.17656243) + (x_net_node_2_1_stage_0 * -0.5275061) + (x_net_node_2_2_stage_0 * 0.13784909) + (x_net_node_2_3_stage_0 * 1.0255786) + (x_net_node_2_4_stage_0 * -0.37048534) + (x_net_node_2_5_stage_0 * 0.10294922) + (x_net_node_2_6_stage_0 * 0.33683172) + (x_net_node_2_7_stage_0 * -0.08491543) + (x_net_node_2_8_stage_0 * -0.47050962) + (x_net_node_2_9_stage_0 * 1.1785905) + 0.69905365), 0);
            esac;
        x_net_node_3_4_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * -0.31340325) + (x_net_node_2_1_stage_0 * 0.19162326) + (x_net_node_2_2_stage_0 * 0.5652973) + (x_net_node_2_3_stage_0 * 0.55904424) + (x_net_node_2_4_stage_0 * 0.25824603) + (x_net_node_2_5_stage_0 * -0.20816316) + (x_net_node_2_6_stage_0 * 0.5529932) + (x_net_node_2_7_stage_0 * -0.043479983) + (x_net_node_2_8_stage_0 * -0.1641044) + (x_net_node_2_9_stage_0 * 0.22366369) + -0.1363118), 0);
            esac;
        x_net_node_3_5_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * 0.46426296) + (x_net_node_2_1_stage_0 * -0.5962185) + (x_net_node_2_2_stage_0 * 0.09187339) + (x_net_node_2_3_stage_0 * -0.0900835) + (x_net_node_2_4_stage_0 * 0.1357085) + (x_net_node_2_5_stage_0 * -0.23304395) + (x_net_node_2_6_stage_0 * 0.23151378) + (x_net_node_2_7_stage_0 * 0.03313212) + (x_net_node_2_8_stage_0 * 0.13105237) + (x_net_node_2_9_stage_0 * 0.83817077) + 0.24527398), 0);
            esac;
        x_net_node_3_6_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * 0.055047214) + (x_net_node_2_1_stage_0 * -0.20535076) + (x_net_node_2_2_stage_0 * 0.13841423) + (x_net_node_2_3_stage_0 * -0.3683805) + (x_net_node_2_4_stage_0 * -0.6582219) + (x_net_node_2_5_stage_0 * -0.007941588) + (x_net_node_2_6_stage_0 * 0.40362126) + (x_net_node_2_7_stage_0 * 0.59345585) + (x_net_node_2_8_stage_0 * -0.44943768) + (x_net_node_2_9_stage_0 * 0.6532475) + 0.9571257), 0);
            esac;
        x_net_node_3_7_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * -0.4876616) + (x_net_node_2_1_stage_0 * 0.8459803) + (x_net_node_2_2_stage_0 * 0.28258446) + (x_net_node_2_3_stage_0 * -0.42647386) + (x_net_node_2_4_stage_0 * 0.045814876) + (x_net_node_2_5_stage_0 * 0.4733608) + (x_net_node_2_6_stage_0 * 0.39911208) + (x_net_node_2_7_stage_0 * 0.19830261) + (x_net_node_2_8_stage_0 * -0.47626784) + (x_net_node_2_9_stage_0 * -1.2938958) + -0.694926), 0);
            esac;
        x_net_node_3_8_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * 0.051755905) + (x_net_node_2_1_stage_0 * -0.10134454) + (x_net_node_2_2_stage_0 * 0.4350025) + (x_net_node_2_3_stage_0 * -0.13507938) + (x_net_node_2_4_stage_0 * 0.53845817) + (x_net_node_2_5_stage_0 * 0.6814349) + (x_net_node_2_6_stage_0 * 0.49123347) + (x_net_node_2_7_stage_0 * -0.13090117) + (x_net_node_2_8_stage_0 * 0.06822699) + (x_net_node_2_9_stage_0 * -0.5916978) + -0.052036457), 0);
            esac;
        x_net_node_3_9_stage_0 :=
            case
                TRUE : max(((x_net_node_2_0_stage_0 * 0.4746902) + (x_net_node_2_1_stage_0 * -0.4137665) + (x_net_node_2_2_stage_0 * 0.033852074) + (x_net_node_2_3_stage_0 * 0.18469349) + (x_net_node_2_4_stage_0 * -0.046702392) + (x_net_node_2_5_stage_0 * -0.446577) + (x_net_node_2_6_stage_0 * 0.080930285) + (x_net_node_2_7_stage_0 * 0.7629226) + (x_net_node_2_8_stage_0 * 0.2566641) + (x_net_node_2_9_stage_0 * 1.7440622) + 1.0828716), 0);
            esac;
        x_net_node_4_0_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * -0.19467722) + (x_net_node_3_1_stage_0 * 0.40793672) + (x_net_node_3_2_stage_0 * 0.122778304) + (x_net_node_3_3_stage_0 * -0.057672553) + (x_net_node_3_4_stage_0 * -0.83772546) + (x_net_node_3_5_stage_0 * 0.9035741) + (x_net_node_3_6_stage_0 * 0.048432663) + (x_net_node_3_7_stage_0 * 0.020432072) + (x_net_node_3_8_stage_0 * -0.57087934) + (x_net_node_3_9_stage_0 * -0.043687664) + 0.30983707), 0);
            esac;
        x_net_node_4_1_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * -0.92566) + (x_net_node_3_1_stage_0 * 0.38605922) + (x_net_node_3_2_stage_0 * 1.0872107) + (x_net_node_3_3_stage_0 * 0.13729773) + (x_net_node_3_4_stage_0 * 0.017937912) + (x_net_node_3_5_stage_0 * -0.0022234484) + (x_net_node_3_6_stage_0 * -0.32604125) + (x_net_node_3_7_stage_0 * -0.24493665) + (x_net_node_3_8_stage_0 * -0.94176626) + (x_net_node_3_9_stage_0 * 0.33598623) + -0.3145799), 0);
            esac;
        x_net_node_4_2_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * -0.6657563) + (x_net_node_3_1_stage_0 * -0.6244184) + (x_net_node_3_2_stage_0 * 0.13610318) + (x_net_node_3_3_stage_0 * 0.40130594) + (x_net_node_3_4_stage_0 * 0.17120011) + (x_net_node_3_5_stage_0 * 0.5713197) + (x_net_node_3_6_stage_0 * -0.9962843) + (x_net_node_3_7_stage_0 * -0.6841635) + (x_net_node_3_8_stage_0 * -1.0983154) + (x_net_node_3_9_stage_0 * 0.5649377) + -0.16005765), 0);
            esac;
        x_net_node_4_3_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * 0.46584308) + (x_net_node_3_1_stage_0 * -0.6199587) + (x_net_node_3_2_stage_0 * -0.4689315) + (x_net_node_3_3_stage_0 * 0.47682714) + (x_net_node_3_4_stage_0 * 0.15332681) + (x_net_node_3_5_stage_0 * 0.6669245) + (x_net_node_3_6_stage_0 * 0.5171713) + (x_net_node_3_7_stage_0 * -0.44086787) + (x_net_node_3_8_stage_0 * -0.5378542) + (x_net_node_3_9_stage_0 * 0.7995868) + 0.4544438), 0);
            esac;
        x_net_node_4_4_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * 0.118964165) + (x_net_node_3_1_stage_0 * -1.2421874) + (x_net_node_3_2_stage_0 * -0.45160443) + (x_net_node_3_3_stage_0 * 0.9559088) + (x_net_node_3_4_stage_0 * -0.19911584) + (x_net_node_3_5_stage_0 * 0.2575759) + (x_net_node_3_6_stage_0 * 0.3066648) + (x_net_node_3_7_stage_0 * -0.41503567) + (x_net_node_3_8_stage_0 * 0.50555736) + (x_net_node_3_9_stage_0 * 0.22294265) + 0.28924486), 0);
            esac;
        x_net_node_4_5_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * 0.27699694) + (x_net_node_3_1_stage_0 * -0.042792294) + (x_net_node_3_2_stage_0 * -0.4333604) + (x_net_node_3_3_stage_0 * 0.9010626) + (x_net_node_3_4_stage_0 * 0.3571099) + (x_net_node_3_5_stage_0 * -0.52463853) + (x_net_node_3_6_stage_0 * 0.013062659) + (x_net_node_3_7_stage_0 * -0.28122506) + (x_net_node_3_8_stage_0 * -0.33874458) + (x_net_node_3_9_stage_0 * -0.34370515) + 0.088217944), 0);
            esac;
        x_net_node_4_6_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * 0.28939617) + (x_net_node_3_1_stage_0 * 0.23473154) + (x_net_node_3_2_stage_0 * 0.08912965) + (x_net_node_3_3_stage_0 * 0.098404124) + (x_net_node_3_4_stage_0 * 0.5521363) + (x_net_node_3_5_stage_0 * -0.379048) + (x_net_node_3_6_stage_0 * -0.3135137) + (x_net_node_3_7_stage_0 * 0.8472047) + (x_net_node_3_8_stage_0 * 0.86447483) + (x_net_node_3_9_stage_0 * -0.7267187) + -0.20924056), 0);
            esac;
        x_net_node_4_7_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * -0.5534719) + (x_net_node_3_1_stage_0 * 0.010642629) + (x_net_node_3_2_stage_0 * -0.5285834) + (x_net_node_3_3_stage_0 * 0.68279934) + (x_net_node_3_4_stage_0 * 0.58134073) + (x_net_node_3_5_stage_0 * 0.37546545) + (x_net_node_3_6_stage_0 * -0.10929999) + (x_net_node_3_7_stage_0 * -0.7349441) + (x_net_node_3_8_stage_0 * -0.9634974) + (x_net_node_3_9_stage_0 * 0.97659194) + 0.45760307), 0);
            esac;
        x_net_node_4_8_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * -0.4672217) + (x_net_node_3_1_stage_0 * 0.88222927) + (x_net_node_3_2_stage_0 * -0.07146389) + (x_net_node_3_3_stage_0 * 0.51555336) + (x_net_node_3_4_stage_0 * 0.40317503) + (x_net_node_3_5_stage_0 * 0.25538558) + (x_net_node_3_6_stage_0 * 0.7692571) + (x_net_node_3_7_stage_0 * -0.65653896) + (x_net_node_3_8_stage_0 * -0.28143004) + (x_net_node_3_9_stage_0 * 1.0936881) + 0.80670106), 0);
            esac;
        x_net_node_4_9_stage_0 :=
            case
                TRUE : max(((x_net_node_3_0_stage_0 * 0.5524395) + (x_net_node_3_1_stage_0 * -0.57853645) + (x_net_node_3_2_stage_0 * 0.3308479) + (x_net_node_3_3_stage_0 * -0.75924677) + (x_net_node_3_4_stage_0 * 0.39868546) + (x_net_node_3_5_stage_0 * -0.09133613) + (x_net_node_3_6_stage_0 * -0.29797876) + (x_net_node_3_7_stage_0 * 0.18242157) + (x_net_node_3_8_stage_0 * -0.044061664) + (x_net_node_3_9_stage_0 * -2.2423615) + -0.5277866), 0);
            esac;
        x_net_node_5_0_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -1.3796039) + (x_net_node_4_1_stage_0 * 1.02454) + (x_net_node_4_2_stage_0 * 1.2778034) + (x_net_node_4_3_stage_0 * -0.18044287) + (x_net_node_4_4_stage_0 * -1.6778098) + (x_net_node_4_5_stage_0 * -0.686441) + (x_net_node_4_6_stage_0 * 0.4519448) + (x_net_node_4_7_stage_0 * 0.54467225) + (x_net_node_4_8_stage_0 * -0.2634469) + (x_net_node_4_9_stage_0 * -0.2523777) + 0.48332343);
            esac;
        x_net_node_5_1_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.3327285) + (x_net_node_4_1_stage_0 * -1.6682022) + (x_net_node_4_2_stage_0 * -0.00046225643) + (x_net_node_4_3_stage_0 * -0.39040333) + (x_net_node_4_4_stage_0 * -0.80062896) + (x_net_node_4_5_stage_0 * -0.46412033) + (x_net_node_4_6_stage_0 * -0.9348359) + (x_net_node_4_7_stage_0 * 0.32865334) + (x_net_node_4_8_stage_0 * 0.08802765) + (x_net_node_4_9_stage_0 * -0.45154965) + -0.325769);
            esac;
        x_net_node_5_2_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -1.0804669) + (x_net_node_4_1_stage_0 * -0.3546788) + (x_net_node_4_2_stage_0 * -2.434249) + (x_net_node_4_3_stage_0 * 0.19160642) + (x_net_node_4_4_stage_0 * 0.027422808) + (x_net_node_4_5_stage_0 * 0.39738002) + (x_net_node_4_6_stage_0 * -1.6245612) + (x_net_node_4_7_stage_0 * -0.65205234) + (x_net_node_4_8_stage_0 * -0.2635732) + (x_net_node_4_9_stage_0 * 0.25215027) + -0.3773863);
            esac;
        x_net_node_5_3_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.9941014) + (x_net_node_4_1_stage_0 * -0.67816204) + (x_net_node_4_2_stage_0 * -0.61665815) + (x_net_node_4_3_stage_0 * 0.19234447) + (x_net_node_4_4_stage_0 * 0.5241399) + (x_net_node_4_5_stage_0 * 0.55340767) + (x_net_node_4_6_stage_0 * -1.0754316) + (x_net_node_4_7_stage_0 * -2.044824) + (x_net_node_4_8_stage_0 * -0.1507512) + (x_net_node_4_9_stage_0 * -0.46507406) + 0.14446492);
            esac;
        x_net_node_5_4_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.88398945) + (x_net_node_4_1_stage_0 * 0.023455264) + (x_net_node_4_2_stage_0 * -0.079598196) + (x_net_node_4_3_stage_0 * 0.3605269) + (x_net_node_4_4_stage_0 * 0.50827307) + (x_net_node_4_5_stage_0 * 0.48525113) + (x_net_node_4_6_stage_0 * -0.4578694) + (x_net_node_4_7_stage_0 * -2.9304798) + (x_net_node_4_8_stage_0 * -0.8216985) + (x_net_node_4_9_stage_0 * -0.5142444) + 0.31125653);
            esac;
        x_net_node_5_5_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.44688562) + (x_net_node_4_1_stage_0 * 0.0013793855) + (x_net_node_4_2_stage_0 * -0.32735914) + (x_net_node_4_3_stage_0 * 0.10025095) + (x_net_node_4_4_stage_0 * 0.64033365) + (x_net_node_4_5_stage_0 * 0.1568767) + (x_net_node_4_6_stage_0 * -0.05939035) + (x_net_node_4_7_stage_0 * -1.5097171) + (x_net_node_4_8_stage_0 * -1.6732112) + (x_net_node_4_9_stage_0 * -1.1187071) + 0.4152626);
            esac;
        x_net_node_5_6_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.5153855) + (x_net_node_4_1_stage_0 * 0.050389912) + (x_net_node_4_2_stage_0 * -0.33020976) + (x_net_node_4_3_stage_0 * 0.5090036) + (x_net_node_4_4_stage_0 * 0.122307755) + (x_net_node_4_5_stage_0 * -0.11485123) + (x_net_node_4_6_stage_0 * 0.20889969) + (x_net_node_4_7_stage_0 * -0.28201896) + (x_net_node_4_8_stage_0 * -3.5260305) + (x_net_node_4_9_stage_0 * -1.2556318) + -0.21642554);
            esac;
        x_net_node_5_7_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.7110275) + (x_net_node_4_1_stage_0 * -0.499079) + (x_net_node_4_2_stage_0 * -0.28160614) + (x_net_node_4_3_stage_0 * -0.49405518) + (x_net_node_4_4_stage_0 * 0.2722215) + (x_net_node_4_5_stage_0 * -0.36990067) + (x_net_node_4_6_stage_0 * 0.29430273) + (x_net_node_4_7_stage_0 * -0.3558497) + (x_net_node_4_8_stage_0 * -2.923169) + (x_net_node_4_9_stage_0 * -0.51597416) + -0.26811266);
            esac;
        x_net_node_5_8_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.7857417) + (x_net_node_4_1_stage_0 * -0.360165) + (x_net_node_4_2_stage_0 * 0.009877577) + (x_net_node_4_3_stage_0 * -1.059741) + (x_net_node_4_4_stage_0 * 0.14644064) + (x_net_node_4_5_stage_0 * -0.5032481) + (x_net_node_4_6_stage_0 * 0.26055533) + (x_net_node_4_7_stage_0 * -1.0731986) + (x_net_node_4_8_stage_0 * -1.8256899) + (x_net_node_4_9_stage_0 * 0.02474799) + 0.09673021);
            esac;
        x_net_node_5_9_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * -0.42586115) + (x_net_node_4_1_stage_0 * -0.464692) + (x_net_node_4_2_stage_0 * -0.7492679) + (x_net_node_4_3_stage_0 * -2.0356097) + (x_net_node_4_4_stage_0 * 0.11819903) + (x_net_node_4_5_stage_0 * -1.3361889) + (x_net_node_4_6_stage_0 * 0.26619953) + (x_net_node_4_7_stage_0 * -0.21554354) + (x_net_node_4_8_stage_0 * -1.3268502) + (x_net_node_4_9_stage_0 * 0.18827869) + -0.26352704);
            esac;
        x_net_node_5_10_stage_0 :=
            case
                TRUE : ((x_net_node_4_0_stage_0 * 1.1315677) + (x_net_node_4_1_stage_0 * 0.5222022) + (x_net_node_4_2_stage_0 * 0.0034351319) + (x_net_node_4_3_stage_0 * -0.73985714) + (x_net_node_4_4_stage_0 * -0.43678373) + (x_net_node_4_5_stage_0 * -2.0955372) + (x_net_node_4_6_stage_0 * 0.07225124) + (x_net_node_4_7_stage_0 * -0.17639945) + (x_net_node_4_8_stage_0 * 0.6207444) + (x_net_node_4_9_stage_0 * 1.0538602) + -0.19319512);
            esac;
        x_net_output_max_stage_0 :=
            case
                TRUE : max(x_net_node_5_0_stage_0, max(x_net_node_5_1_stage_0, max(x_net_node_5_2_stage_0, max(x_net_node_5_3_stage_0, max(x_net_node_5_4_stage_0, max(x_net_node_5_5_stage_0, max(x_net_node_5_6_stage_0, max(x_net_node_5_7_stage_0, max(x_net_node_5_8_stage_0, max(x_net_node_5_9_stage_0, x_net_node_5_10_stage_0))))))))));
            esac;
        x_net_output_stage_0 :=
            case
                (x_net_output_max_stage_0 = x_net_node_5_0_stage_0) : 0;
                (x_net_output_max_stage_0 = x_net_node_5_1_stage_0) : 1;
                (x_net_output_max_stage_0 = x_net_node_5_2_stage_0) : 2;
                (x_net_output_max_stage_0 = x_net_node_5_3_stage_0) : 3;
                (x_net_output_max_stage_0 = x_net_node_5_4_stage_0) : 4;
                (x_net_output_max_stage_0 = x_net_node_5_5_stage_0) : 5;
                (x_net_output_max_stage_0 = x_net_node_5_6_stage_0) : 6;
                (x_net_output_max_stage_0 = x_net_node_5_7_stage_0) : 7;
                (x_net_output_max_stage_0 = x_net_node_5_8_stage_0) : 8;
                (x_net_output_max_stage_0 = x_net_node_5_9_stage_0) : 9;
                (x_net_output_max_stage_0 = x_net_node_5_10_stage_0) : 10;
                TRUE : -1;
            esac;
        y_net_1_1_stage_0 :=
            case
                TRUE : max(dest_y_stage_0, 0);
            esac;
        y_net_1_2_stage_0 :=
            case
                TRUE : max((dest_y_stage_0 - prev_dest_y_stage_0), 0);
            esac;
        y_net_1_3_stage_0 :=
            case
                TRUE : max((prev_dest_y_stage_0 - dest_y_stage_0), 0);
            esac;
        y_net_1_4_stage_0 :=
            case
                TRUE : max(dir_stage_1, 0);
            esac;
        y_net_1_5_stage_0 :=
            case
                TRUE : max(-(dir_stage_1), 0);
            esac;
        y_net_2_1_stage_0 :=
            case
                TRUE : max(y_net_1_1_stage_0, 0);
            esac;
        y_net_2_2_stage_0 :=
            case
                TRUE : max((-(y_net_1_2_stage_0) + -(y_net_1_3_stage_0) + 1), 0);
            esac;
        y_net_2_3_stage_0 :=
            case
                TRUE : max(y_net_1_4_stage_0, 0);
            esac;
        y_net_2_4_stage_0 :=
            case
                TRUE : max(y_net_1_5_stage_0, 0);
            esac;
        y_net_3_1_stage_0 :=
            case
                TRUE : max(y_net_2_1_stage_0, 0);
            esac;
        y_net_3_2_stage_0 :=
            case
                TRUE : max((y_net_2_2_stage_0 + y_net_2_3_stage_0 + -1), 0);
            esac;
        y_net_3_3_stage_0 :=
            case
                TRUE : max((y_net_2_2_stage_0 + y_net_2_4_stage_0 + -1), 0);
            esac;
        y_net_output_stage_0 :=
            case
                TRUE : max((y_net_3_1_stage_0 + (2 * y_net_3_2_stage_0) + (-1 * 2 * y_net_3_3_stage_0)), 0);
            esac;
        --END OF BLACKBOARD DEFINITIONS
    VAR
        node_names : define_nodes;
        target_in_sight : target_in_sight_module(cur_x_stage_0, cur_y_stage_0, tar_x_stage_0, tar_y_stage_0, tree_x_stage_0_index_0, tree_x_stage_0_index_1, tree_y_stage_0_index_0, tree_y_stage_0_index_1);
        send_victory : success_DEFAULT_module();
        vision : composite_sequence_without_memory_2(target_in_sight, send_victory);
        not_at_destination : not_at_destination_module(cur_x_stage_0, cur_y_stage_0, dest_x_stage_0, dest_y_stage_0);
        update_direction : success_DEFAULT_module();
        call_xy_net : success_DEFAULT_module();
        update_previous_destination : success_DEFAULT_module();
        new_destination : composite_sequence_without_memory_3(update_direction, call_xy_net, update_previous_destination);
        destination : composite_selector_without_memory_2(not_at_destination, new_destination);
        y_too_small : y_too_small_module(cur_y_stage_0, dest_y_stage_1);
        move : success_DEFAULT_module();
        try_up : composite_sequence_without_memory_2(y_too_small, move);
        y_too_big : y_too_big_module(cur_y_stage_1, dest_y_stage_1);
        move_1 : success_DEFAULT_module();
        try_down : composite_sequence_without_memory_2(y_too_big, move_1);
        x_too_big : x_too_big_module(cur_x_stage_2, dest_x_stage_1);
        move_2 : success_DEFAULT_module();
        try_left : composite_sequence_without_memory_2(x_too_big, move_2);
        x_too_small : x_too_small_module(cur_x_stage_3, dest_x_stage_1);
        move_3 : success_DEFAULT_module();
        try_right : composite_sequence_without_memory_2(x_too_small, move_3);
        movement : composite_selector_without_memory_4(try_up, try_down, try_left, try_right);
        destination_and_movement : composite_sequence_without_memory_2(destination, movement);
        drone_control : composite_selector_without_memory_2(vision, destination_and_movement);
        --START OF BLACKBOARD VARIABLES DECLARATION
        prev_dest_x_stage_0 : 0..10;
        prev_dest_y_stage_0 : 0..10;
        cur_x_stage_0 : 0..10;
        cur_y_stage_0 : 0..10;
        dest_x_stage_0 : 0..10;
        dest_y_stage_0 : 0..10;
        dir_stage_0 : {-1, 1};
        victory_stage_0 : boolean;
        tar_x_stage_0 : 0..10;
        tar_y_stage_0 : 0..10;
        timer_stage_0 : 0..10;
        --END OF BLACKBOARD VARIABLES DECLARATION
    ASSIGN
        --START OF BLACKBOARD VARIABLES INITIALIZATION
        init(prev_dest_x_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(prev_dest_y_stage_0) := 
            case
                TRUE : (0 + 1);
            esac;
        init(cur_x_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(cur_y_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(dest_x_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(dest_y_stage_0) := 
            case
                TRUE : 0;
            esac;
        init(dir_stage_0) := 
            case
                TRUE : 1;
            esac;
        init(victory_stage_0) := 
            case
                TRUE : FALSE;
            esac;
        init(tar_x_stage_0) := 
            case
                TRUE : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
            esac;
        init(tar_y_stage_0) := 
            case
                TRUE : {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
            esac;
        init(timer_stage_0) := 
            case
                TRUE : 10;
            esac;
        --END OF BLACKBOARD VARIABLES INITIALIZATION
        --START OF BLACKBOARD VARIABLES TRANSITION
        next(prev_dest_x_stage_0) := 
            case
                !(update_previous_destination.active) : prev_dest_x_stage_0;
                TRUE : cur_x_stage_0;
            esac;
        next(prev_dest_y_stage_0) := 
            case
                !(update_previous_destination.active) : prev_dest_y_stage_0;
                TRUE : cur_y_stage_0;
            esac;
        next(cur_x_stage_0) := 
            case
                !(move_3.active) : cur_x_stage_3;
                TRUE : max(0, min(10, (1 + cur_x_stage_3)));
            esac;
        next(cur_y_stage_0) := 
            case
                !(move_3.active) : cur_y_stage_3;
                TRUE : max(0, min(10, (0 + cur_y_stage_3)));
            esac;
        next(dest_x_stage_0) := dest_x_stage_1;
        next(dest_y_stage_0) := dest_y_stage_1;
        next(dir_stage_0) := dir_stage_1;
        next(victory_stage_0) := victory_stage_1;
        next(tar_x_stage_0) := 
            case
                !(drone_control.active) : tar_x_stage_0;
                (timer_stage_0 = 0) : {tar_x_stage_0, min(10, (tar_x_stage_0 + 1)), max(0, (tar_x_stage_0 - 1))};
                TRUE : tar_x_stage_0;
            esac;
        next(tar_y_stage_0) := 
            case
                !(drone_control.active) : tar_y_stage_0;
                (timer_stage_0 = 0) : {tar_y_stage_0, min(10, (tar_y_stage_0 + 1)), max(0, (tar_y_stage_0 - 1))};
                TRUE : tar_y_stage_0;
            esac;
        next(timer_stage_0) := 
            case
                !(drone_control.active) : timer_stage_0;
                (timer_stage_0 = 0) : 10;
                TRUE : max(0, (timer_stage_0 - 1));
            esac;
        --END OF BLACKBOARD VARIABLES TRANSITION

MODULE define_nodes
    DEFINE
        drone_control := 0;
        vision := 1;
        target_in_sight := 2;
        send_victory := 3;
        destination_and_movement := 4;
        destination := 5;
        not_at_destination := 6;
        new_destination := 7;
        update_direction := 8;
        call_xy_net := 9;
        update_previous_destination := 10;
        movement := 11;
        try_up := 12;
        y_too_small := 13;
        move := 14;
        try_down := 15;
        y_too_big := 16;
        move_1 := 17;
        try_left := 18;
        x_too_big := 19;
        move_2 := 20;
        try_right := 21;
        x_too_small := 22;
        move_3 := 23;
MODULE composite_selector_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = failure) : child_0.internal_status;
                !(child_1.internal_status = failure) : child_1.internal_status;
                TRUE : failure;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = failure;
MODULE composite_sequence_without_memory_3(child_0, child_1, child_2)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = success) : child_0.internal_status;
                !(child_1.internal_status = success) : child_1.internal_status;
                !(child_2.internal_status = success) : child_2.internal_status;
                TRUE : success;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = success;
        child_2.active := child_1.status = success;
MODULE composite_sequence_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = success) : child_0.internal_status;
                !(child_1.internal_status = success) : child_1.internal_status;
                TRUE : success;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = success;
MODULE composite_selector_without_memory_4(child_0, child_1, child_2, child_3)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = failure) : child_0.internal_status;
                !(child_1.internal_status = failure) : child_1.internal_status;
                !(child_2.internal_status = failure) : child_2.internal_status;
                !(child_3.internal_status = failure) : child_3.internal_status;
                TRUE : failure;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = failure;
        child_2.active := child_1.status = failure;
        child_3.active := child_2.status = failure;
MODULE target_in_sight_module(cur_x_stage_0, cur_y_stage_0, tar_x_stage_0, tar_y_stage_0, tree_x_stage_0_index_0, tree_x_stage_0_index_1, tree_y_stage_0_index_0, tree_y_stage_0_index_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((((abs((cur_x_stage_0 - tar_x_stage_0)) + abs((cur_y_stage_0 - tar_y_stage_0))) <= 4) & (((abs(((case 0 = 0 : tree_x_stage_0_index_0; 1 = 0 : tree_x_stage_0_index_1; esac) - tar_x_stage_0)) + abs(((case 0 = 0 : tree_y_stage_0_index_0; 1 = 0 : tree_y_stage_0_index_1; esac) - tar_y_stage_0))) > 2) | (((case 0 = 0 : tree_x_stage_0_index_0; 1 = 0 : tree_x_stage_0_index_1; esac) = cur_x_stage_0) & ((case 0 = 0 : tree_y_stage_0_index_0; 1 = 0 : tree_y_stage_0_index_1; esac) = cur_y_stage_0)) | (((case 0 = 0 : tree_x_stage_0_index_0; 1 = 0 : tree_x_stage_0_index_1; esac) = tar_x_stage_0) & ((case 0 = 0 : tree_y_stage_0_index_0; 1 = 0 : tree_y_stage_0_index_1; esac) = tar_y_stage_0)) | (((case 0 = 0 : tree_x_stage_0_index_0; 1 = 0 : tree_x_stage_0_index_1; esac) < cur_x_stage_0) & ((case 0 = 0 : tree_x_stage_0_index_0; 1 = 0 : tree_x_stage_0_index_1; esac) < tar_x_stage_0)) | (((case 0 = 0 : tree_y_stage_0_index_0; 1 = 0 : tree_y_stage_0_index_1; esac) < cur_y_stage_0) & ((case 0 = 0 : tree_y_stage_0_index_0; 1 = 0 : tree_y_stage_0_index_1; esac) < tar_y_stage_0)) | (((case 0 = 0 : tree_x_stage_0_index_0; 1 = 0 : tree_x_stage_0_index_1; esac) > cur_x_stage_0) & ((case 0 = 0 : tree_x_stage_0_index_0; 1 = 0 : tree_x_stage_0_index_1; esac) > tar_x_stage_0)) | (((case 0 = 0 : tree_y_stage_0_index_0; 1 = 0 : tree_y_stage_0_index_1; esac) > cur_y_stage_0) & ((case 0 = 0 : tree_y_stage_0_index_0; 1 = 0 : tree_y_stage_0_index_1; esac) > tar_y_stage_0))) & (((abs(((case 0 = 1 : tree_x_stage_0_index_0; 1 = 1 : tree_x_stage_0_index_1; esac) - tar_x_stage_0)) + abs(((case 0 = 1 : tree_y_stage_0_index_0; 1 = 1 : tree_y_stage_0_index_1; esac) - tar_y_stage_0))) > 2) | (((case 0 = 1 : tree_x_stage_0_index_0; 1 = 1 : tree_x_stage_0_index_1; esac) = cur_x_stage_0) & ((case 0 = 1 : tree_y_stage_0_index_0; 1 = 1 : tree_y_stage_0_index_1; esac) = cur_y_stage_0)) | (((case 0 = 1 : tree_x_stage_0_index_0; 1 = 1 : tree_x_stage_0_index_1; esac) = tar_x_stage_0) & ((case 0 = 1 : tree_y_stage_0_index_0; 1 = 1 : tree_y_stage_0_index_1; esac) = tar_y_stage_0)) | (((case 0 = 1 : tree_x_stage_0_index_0; 1 = 1 : tree_x_stage_0_index_1; esac) < cur_x_stage_0) & ((case 0 = 1 : tree_x_stage_0_index_0; 1 = 1 : tree_x_stage_0_index_1; esac) < tar_x_stage_0)) | (((case 0 = 1 : tree_y_stage_0_index_0; 1 = 1 : tree_y_stage_0_index_1; esac) < cur_y_stage_0) & ((case 0 = 1 : tree_y_stage_0_index_0; 1 = 1 : tree_y_stage_0_index_1; esac) < tar_y_stage_0)) | (((case 0 = 1 : tree_x_stage_0_index_0; 1 = 1 : tree_x_stage_0_index_1; esac) > cur_x_stage_0) & ((case 0 = 1 : tree_x_stage_0_index_0; 1 = 1 : tree_x_stage_0_index_1; esac) > tar_x_stage_0)) | (((case 0 = 1 : tree_y_stage_0_index_0; 1 = 1 : tree_y_stage_0_index_1; esac) > cur_y_stage_0) & ((case 0 = 1 : tree_y_stage_0_index_0; 1 = 1 : tree_y_stage_0_index_1; esac) > tar_y_stage_0))))) ? success : failure;
MODULE not_at_destination_module(cur_x_stage_0, cur_y_stage_0, dest_x_stage_0, dest_y_stage_0)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := (!(((cur_x_stage_0 = dest_x_stage_0) & (cur_y_stage_0 = dest_y_stage_0)))) ? success : failure;
MODULE y_too_small_module(cur_y_stage_0, dest_y_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((cur_y_stage_0 < dest_y_stage_1)) ? success : failure;
MODULE y_too_big_module(cur_y_stage_1, dest_y_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((cur_y_stage_1 > dest_y_stage_1)) ? success : failure;
MODULE x_too_big_module(cur_x_stage_2, dest_x_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((cur_x_stage_2 > dest_x_stage_1)) ? success : failure;
MODULE x_too_small_module(cur_x_stage_3, dest_x_stage_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((cur_x_stage_3 < dest_x_stage_1)) ? success : failure;
MODULE success_DEFAULT_module
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := success;
