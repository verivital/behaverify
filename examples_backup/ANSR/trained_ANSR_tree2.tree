configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
    use_reals
}
enumerations {
    #{ here you specify the enumerations used in the model}#
}
constants {
    'x_min' := 0, 'y_min' := 0, 'x_max' := 10, 'y_max' := 10, 'tree_count' := 2, 'vision_range' := 4, 'tree_range' := 2, 'y_change' := 2, 'movement_cooldown' := 10
} end_constants

variables {
    variable {bl prev_dest_x VAR ['x_min', 'x_max'] assign {result {'x_min'}}}
    variable {bl prev_dest_y VAR ['y_min', 'y_max'] assign {result {(add, 'y_min', 1)}}}
    variable {bl cur_x VAR ['x_min', 'x_max'] assign {result {'x_min'}}}
    variable {bl cur_y VAR ['y_min', 'y_max'] assign {result {'y_min'}}}
    variable {bl dest_x VAR ['x_min', 'x_max'] assign {result {'x_min'}}}
    variable {bl dest_y VAR ['y_min', 'y_max'] assign {result {'y_min'}}}
    variable {bl dir VAR {-1, 1} assign {result {1}}}
    variable {bl victory VAR BOOLEAN assign {result {False}}}
    #{variable {env tree_locs array 'tree_count' FROZENVAR [0, 960] range assign {result{range, 0, 960, True}}}}#
    #{
	variable {env tree_x array 'tree_count' FROZENVAR ['x_min', 'x_max'] range assign {result{range, 'x_min', 'x_max', True}}}
	variable {env tree_y array 'tree_count' FROZENVAR ['y_min', 'y_max'] range assign {result{range, 'y_min', 'y_max', True}}}
    }#
    variable {env tree_x array 'tree_count' DEFINE INT per_index assign {result{2}} assign {result{5}}}
    variable {env tree_y array 'tree_count' DEFINE INT per_index assign {result{2}} assign {result{5}}}
    variable {env tar_x VAR ['x_min', 'x_max'] assign {result {range, 'x_min', 'x_max', True}}}
    variable {env tar_y VAR ['y_min', 'y_max'] assign {result {range, 'y_min', 'y_max', True}}}
    variable {env timer VAR [0, 'movement_cooldown'] assign {result{'movement_cooldown'}}}
    #{START OF X_NET}#
    variable {bl x_net_node_0_0 DEFINE REAL assign{result{dest_x}}}
variable {bl x_net_node_0_1 DEFINE REAL assign{result{prev_dest_x}}}
variable {bl x_net_node_1_0 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, 0.6578918),(mult, x_net_node_0_1, -0.34521425),0.62692827), 0)}}}
variable {bl x_net_node_1_1 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, 0.8529887),(mult, x_net_node_0_1, -0.84701735),-0.010374815), 0)}}}
variable {bl x_net_node_1_2 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, -0.5847367),(mult, x_net_node_0_1, 0.26248214),0.5592191), 0)}}}
variable {bl x_net_node_1_3 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, 0.46987224),(mult, x_net_node_0_1, 0.1913096),1.2794331), 0)}}}
variable {bl x_net_node_1_4 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, -0.40401614),(mult, x_net_node_0_1, -0.061261952),0.0), 0)}}}
variable {bl x_net_node_1_5 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, -0.1762076),(mult, x_net_node_0_1, 0.40228945),0.7960203), 0)}}}
variable {bl x_net_node_1_6 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, -0.68756187),(mult, x_net_node_0_1, 0.6861109),0.006324993), 0)}}}
variable {bl x_net_node_1_7 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, 0.9007066),(mult, x_net_node_0_1, 0.6200078),-0.7310154), 0)}}}
variable {bl x_net_node_1_8 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, 0.17452484),(mult, x_net_node_0_1, -0.6996262),-0.19942215), 0)}}}
variable {bl x_net_node_1_9 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_0_0, 0.6491264),(mult, x_net_node_0_1, -0.59584916),0.54945916), 0)}}}
variable {bl x_net_node_2_0 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, -0.45446032),(mult, x_net_node_1_1, -0.5127789),(mult, x_net_node_1_2, 0.3085168),(mult, x_net_node_1_3, -0.3518694),(mult, x_net_node_1_4, 0.2062329),(mult, x_net_node_1_5, -0.102909535),(mult, x_net_node_1_6, -0.088344485),(mult, x_net_node_1_7, -0.31102866),(mult, x_net_node_1_8, -0.38162816),(mult, x_net_node_1_9, -0.25255156),0.0), 0)}}}
variable {bl x_net_node_2_1 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, 0.4261802),(mult, x_net_node_1_1, -0.8262145),(mult, x_net_node_1_2, -0.3278613),(mult, x_net_node_1_3, 0.17596045),(mult, x_net_node_1_4, 0.45528078),(mult, x_net_node_1_5, -0.12026746),(mult, x_net_node_1_6, -0.53016776),(mult, x_net_node_1_7, 0.67134506),(mult, x_net_node_1_8, 0.25712654),(mult, x_net_node_1_9, -0.12462206),-0.8061583), 0)}}}
variable {bl x_net_node_2_2 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, 0.5684861),(mult, x_net_node_1_1, 0.92106175),(mult, x_net_node_1_2, 0.1897123),(mult, x_net_node_1_3, 0.56560737),(mult, x_net_node_1_4, -0.19900358),(mult, x_net_node_1_5, 0.37021562),(mult, x_net_node_1_6, 0.18067262),(mult, x_net_node_1_7, 0.48941767),(mult, x_net_node_1_8, -0.009980795),(mult, x_net_node_1_9, -0.08049972),-0.07401787), 0)}}}
variable {bl x_net_node_2_3 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, -0.73334455),(mult, x_net_node_1_1, -0.4658336),(mult, x_net_node_1_2, 0.710656),(mult, x_net_node_1_3, 0.035908703),(mult, x_net_node_1_4, 0.10230255),(mult, x_net_node_1_5, 0.34499472),(mult, x_net_node_1_6, 1.0368726),(mult, x_net_node_1_7, 0.12952912),(mult, x_net_node_1_8, -0.6590092),(mult, x_net_node_1_9, -0.9241341),0.51785547), 0)}}}
variable {bl x_net_node_2_4 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, -0.16444819),(mult, x_net_node_1_1, 0.6430495),(mult, x_net_node_1_2, -0.019573467),(mult, x_net_node_1_3, 0.42095882),(mult, x_net_node_1_4, 0.26029682),(mult, x_net_node_1_5, 0.42904234),(mult, x_net_node_1_6, -0.5548977),(mult, x_net_node_1_7, 0.19420777),(mult, x_net_node_1_8, -0.38791284),(mult, x_net_node_1_9, 0.078287184),-1.0678436), 0)}}}
variable {bl x_net_node_2_5 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, -0.0074855345),(mult, x_net_node_1_1, 0.67464495),(mult, x_net_node_1_2, -0.82194966),(mult, x_net_node_1_3, 0.2229102),(mult, x_net_node_1_4, -0.23541313),(mult, x_net_node_1_5, -0.54472774),(mult, x_net_node_1_6, 0.25475127),(mult, x_net_node_1_7, 0.6252586),(mult, x_net_node_1_8, 0.09433515),(mult, x_net_node_1_9, -0.28811833),-0.20758276), 0)}}}
variable {bl x_net_node_2_6 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, 0.23126407),(mult, x_net_node_1_1, 0.5748177),(mult, x_net_node_1_2, -0.8684098),(mult, x_net_node_1_3, 0.5373492),(mult, x_net_node_1_4, 0.04947245),(mult, x_net_node_1_5, 0.032245904),(mult, x_net_node_1_6, 0.73802894),(mult, x_net_node_1_7, 0.6333589),(mult, x_net_node_1_8, -0.26042286),(mult, x_net_node_1_9, 0.107220076),0.62527555), 0)}}}
variable {bl x_net_node_2_7 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, 0.44068417),(mult, x_net_node_1_1, -0.46611997),(mult, x_net_node_1_2, -0.6296728),(mult, x_net_node_1_3, 0.5665917),(mult, x_net_node_1_4, -0.4139767),(mult, x_net_node_1_5, 0.4791759),(mult, x_net_node_1_6, -0.31671292),(mult, x_net_node_1_7, 0.004291155),(mult, x_net_node_1_8, 0.2434273),(mult, x_net_node_1_9, -0.14721403),0.93998086), 0)}}}
variable {bl x_net_node_2_8 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, -0.5386742),(mult, x_net_node_1_1, -0.46888655),(mult, x_net_node_1_2, -0.41358232),(mult, x_net_node_1_3, -0.3895629),(mult, x_net_node_1_4, -0.27676046),(mult, x_net_node_1_5, -0.42837343),(mult, x_net_node_1_6, -0.1248405),(mult, x_net_node_1_7, -0.53614604),(mult, x_net_node_1_8, 0.11560547),(mult, x_net_node_1_9, 0.28032917),0.0), 0)}}}
variable {bl x_net_node_2_9 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_1_0, 0.247372),(mult, x_net_node_1_1, -0.32293057),(mult, x_net_node_1_2, 0.8891721),(mult, x_net_node_1_3, 0.39651027),(mult, x_net_node_1_4, 0.28709042),(mult, x_net_node_1_5, 0.9086439),(mult, x_net_node_1_6, -0.14988151),(mult, x_net_node_1_7, -0.5362614),(mult, x_net_node_1_8, -0.5218079),(mult, x_net_node_1_9, 0.40836212),1.14314), 0)}}}
variable {bl x_net_node_3_0 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, 0.25632548),(mult, x_net_node_2_1, -0.34842002),(mult, x_net_node_2_2, 0.5442342),(mult, x_net_node_2_3, 0.08418185),(mult, x_net_node_2_4, 0.57597506),(mult, x_net_node_2_5, 0.5408019),(mult, x_net_node_2_6, 0.476291),(mult, x_net_node_2_7, 0.39190826),(mult, x_net_node_2_8, -0.28151736),(mult, x_net_node_2_9, -0.8935945),-0.012210114), 0)}}}
variable {bl x_net_node_3_1 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, -0.30568475),(mult, x_net_node_2_1, 0.5772115),(mult, x_net_node_2_2, -0.10509909),(mult, x_net_node_2_3, -0.6164364),(mult, x_net_node_2_4, -0.035120808),(mult, x_net_node_2_5, -0.5461031),(mult, x_net_node_2_6, -0.21386093),(mult, x_net_node_2_7, 0.610046),(mult, x_net_node_2_8, -0.15124679),(mult, x_net_node_2_9, 0.15310085),0.054143887), 0)}}}
variable {bl x_net_node_3_2 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, 0.34155577),(mult, x_net_node_2_1, -0.29456782),(mult, x_net_node_2_2, 0.5404558),(mult, x_net_node_2_3, 0.67999434),(mult, x_net_node_2_4, 0.46925664),(mult, x_net_node_2_5, -0.37445587),(mult, x_net_node_2_6, 0.17125846),(mult, x_net_node_2_7, -0.6826509),(mult, x_net_node_2_8, 0.14337802),(mult, x_net_node_2_9, -1.3319025),-0.6237479), 0)}}}
variable {bl x_net_node_3_3 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, -0.17656243),(mult, x_net_node_2_1, -0.5275061),(mult, x_net_node_2_2, 0.13784909),(mult, x_net_node_2_3, 1.0255786),(mult, x_net_node_2_4, -0.37048534),(mult, x_net_node_2_5, 0.10294922),(mult, x_net_node_2_6, 0.33683172),(mult, x_net_node_2_7, -0.08491543),(mult, x_net_node_2_8, -0.47050962),(mult, x_net_node_2_9, 1.1785905),0.69905365), 0)}}}
variable {bl x_net_node_3_4 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, -0.31340325),(mult, x_net_node_2_1, 0.19162326),(mult, x_net_node_2_2, 0.5652973),(mult, x_net_node_2_3, 0.55904424),(mult, x_net_node_2_4, 0.25824603),(mult, x_net_node_2_5, -0.20816316),(mult, x_net_node_2_6, 0.5529932),(mult, x_net_node_2_7, -0.043479983),(mult, x_net_node_2_8, -0.1641044),(mult, x_net_node_2_9, 0.22366369),-0.1363118), 0)}}}
variable {bl x_net_node_3_5 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, 0.46426296),(mult, x_net_node_2_1, -0.5962185),(mult, x_net_node_2_2, 0.09187339),(mult, x_net_node_2_3, -0.0900835),(mult, x_net_node_2_4, 0.1357085),(mult, x_net_node_2_5, -0.23304395),(mult, x_net_node_2_6, 0.23151378),(mult, x_net_node_2_7, 0.03313212),(mult, x_net_node_2_8, 0.13105237),(mult, x_net_node_2_9, 0.83817077),0.24527398), 0)}}}
variable {bl x_net_node_3_6 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, 0.055047214),(mult, x_net_node_2_1, -0.20535076),(mult, x_net_node_2_2, 0.13841423),(mult, x_net_node_2_3, -0.3683805),(mult, x_net_node_2_4, -0.6582219),(mult, x_net_node_2_5, -0.007941588),(mult, x_net_node_2_6, 0.40362126),(mult, x_net_node_2_7, 0.59345585),(mult, x_net_node_2_8, -0.44943768),(mult, x_net_node_2_9, 0.6532475),0.9571257), 0)}}}
variable {bl x_net_node_3_7 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, -0.4876616),(mult, x_net_node_2_1, 0.8459803),(mult, x_net_node_2_2, 0.28258446),(mult, x_net_node_2_3, -0.42647386),(mult, x_net_node_2_4, 0.045814876),(mult, x_net_node_2_5, 0.4733608),(mult, x_net_node_2_6, 0.39911208),(mult, x_net_node_2_7, 0.19830261),(mult, x_net_node_2_8, -0.47626784),(mult, x_net_node_2_9, -1.2938958),-0.694926), 0)}}}
variable {bl x_net_node_3_8 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, 0.051755905),(mult, x_net_node_2_1, -0.10134454),(mult, x_net_node_2_2, 0.4350025),(mult, x_net_node_2_3, -0.13507938),(mult, x_net_node_2_4, 0.53845817),(mult, x_net_node_2_5, 0.6814349),(mult, x_net_node_2_6, 0.49123347),(mult, x_net_node_2_7, -0.13090117),(mult, x_net_node_2_8, 0.06822699),(mult, x_net_node_2_9, -0.5916978),-0.052036457), 0)}}}
variable {bl x_net_node_3_9 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_2_0, 0.4746902),(mult, x_net_node_2_1, -0.4137665),(mult, x_net_node_2_2, 0.033852074),(mult, x_net_node_2_3, 0.18469349),(mult, x_net_node_2_4, -0.046702392),(mult, x_net_node_2_5, -0.446577),(mult, x_net_node_2_6, 0.080930285),(mult, x_net_node_2_7, 0.7629226),(mult, x_net_node_2_8, 0.2566641),(mult, x_net_node_2_9, 1.7440622),1.0828716), 0)}}}
variable {bl x_net_node_4_0 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, -0.19467722),(mult, x_net_node_3_1, 0.40793672),(mult, x_net_node_3_2, 0.122778304),(mult, x_net_node_3_3, -0.057672553),(mult, x_net_node_3_4, -0.83772546),(mult, x_net_node_3_5, 0.9035741),(mult, x_net_node_3_6, 0.048432663),(mult, x_net_node_3_7, 0.020432072),(mult, x_net_node_3_8, -0.57087934),(mult, x_net_node_3_9, -0.043687664),0.30983707), 0)}}}
variable {bl x_net_node_4_1 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, -0.92566),(mult, x_net_node_3_1, 0.38605922),(mult, x_net_node_3_2, 1.0872107),(mult, x_net_node_3_3, 0.13729773),(mult, x_net_node_3_4, 0.017937912),(mult, x_net_node_3_5, -0.0022234484),(mult, x_net_node_3_6, -0.32604125),(mult, x_net_node_3_7, -0.24493665),(mult, x_net_node_3_8, -0.94176626),(mult, x_net_node_3_9, 0.33598623),-0.3145799), 0)}}}
variable {bl x_net_node_4_2 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, -0.6657563),(mult, x_net_node_3_1, -0.6244184),(mult, x_net_node_3_2, 0.13610318),(mult, x_net_node_3_3, 0.40130594),(mult, x_net_node_3_4, 0.17120011),(mult, x_net_node_3_5, 0.5713197),(mult, x_net_node_3_6, -0.9962843),(mult, x_net_node_3_7, -0.6841635),(mult, x_net_node_3_8, -1.0983154),(mult, x_net_node_3_9, 0.5649377),-0.16005765), 0)}}}
variable {bl x_net_node_4_3 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, 0.46584308),(mult, x_net_node_3_1, -0.6199587),(mult, x_net_node_3_2, -0.4689315),(mult, x_net_node_3_3, 0.47682714),(mult, x_net_node_3_4, 0.15332681),(mult, x_net_node_3_5, 0.6669245),(mult, x_net_node_3_6, 0.5171713),(mult, x_net_node_3_7, -0.44086787),(mult, x_net_node_3_8, -0.5378542),(mult, x_net_node_3_9, 0.7995868),0.4544438), 0)}}}
variable {bl x_net_node_4_4 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, 0.118964165),(mult, x_net_node_3_1, -1.2421874),(mult, x_net_node_3_2, -0.45160443),(mult, x_net_node_3_3, 0.9559088),(mult, x_net_node_3_4, -0.19911584),(mult, x_net_node_3_5, 0.2575759),(mult, x_net_node_3_6, 0.3066648),(mult, x_net_node_3_7, -0.41503567),(mult, x_net_node_3_8, 0.50555736),(mult, x_net_node_3_9, 0.22294265),0.28924486), 0)}}}
variable {bl x_net_node_4_5 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, 0.27699694),(mult, x_net_node_3_1, -0.042792294),(mult, x_net_node_3_2, -0.4333604),(mult, x_net_node_3_3, 0.9010626),(mult, x_net_node_3_4, 0.3571099),(mult, x_net_node_3_5, -0.52463853),(mult, x_net_node_3_6, 0.013062659),(mult, x_net_node_3_7, -0.28122506),(mult, x_net_node_3_8, -0.33874458),(mult, x_net_node_3_9, -0.34370515),0.088217944), 0)}}}
variable {bl x_net_node_4_6 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, 0.28939617),(mult, x_net_node_3_1, 0.23473154),(mult, x_net_node_3_2, 0.08912965),(mult, x_net_node_3_3, 0.098404124),(mult, x_net_node_3_4, 0.5521363),(mult, x_net_node_3_5, -0.379048),(mult, x_net_node_3_6, -0.3135137),(mult, x_net_node_3_7, 0.8472047),(mult, x_net_node_3_8, 0.86447483),(mult, x_net_node_3_9, -0.7267187),-0.20924056), 0)}}}
variable {bl x_net_node_4_7 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, -0.5534719),(mult, x_net_node_3_1, 0.010642629),(mult, x_net_node_3_2, -0.5285834),(mult, x_net_node_3_3, 0.68279934),(mult, x_net_node_3_4, 0.58134073),(mult, x_net_node_3_5, 0.37546545),(mult, x_net_node_3_6, -0.10929999),(mult, x_net_node_3_7, -0.7349441),(mult, x_net_node_3_8, -0.9634974),(mult, x_net_node_3_9, 0.97659194),0.45760307), 0)}}}
variable {bl x_net_node_4_8 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, -0.4672217),(mult, x_net_node_3_1, 0.88222927),(mult, x_net_node_3_2, -0.07146389),(mult, x_net_node_3_3, 0.51555336),(mult, x_net_node_3_4, 0.40317503),(mult, x_net_node_3_5, 0.25538558),(mult, x_net_node_3_6, 0.7692571),(mult, x_net_node_3_7, -0.65653896),(mult, x_net_node_3_8, -0.28143004),(mult, x_net_node_3_9, 1.0936881),0.80670106), 0)}}}
variable {bl x_net_node_4_9 DEFINE REAL assign{result{(max, (add, (mult, x_net_node_3_0, 0.5524395),(mult, x_net_node_3_1, -0.57853645),(mult, x_net_node_3_2, 0.3308479),(mult, x_net_node_3_3, -0.75924677),(mult, x_net_node_3_4, 0.39868546),(mult, x_net_node_3_5, -0.09133613),(mult, x_net_node_3_6, -0.29797876),(mult, x_net_node_3_7, 0.18242157),(mult, x_net_node_3_8, -0.044061664),(mult, x_net_node_3_9, -2.2423615),-0.5277866), 0)}}}
variable {bl x_net_node_5_0 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -1.3796039),(mult, x_net_node_4_1, 1.02454),(mult, x_net_node_4_2, 1.2778034),(mult, x_net_node_4_3, -0.18044287),(mult, x_net_node_4_4, -1.6778098),(mult, x_net_node_4_5, -0.686441),(mult, x_net_node_4_6, 0.4519448),(mult, x_net_node_4_7, 0.54467225),(mult, x_net_node_4_8, -0.2634469),(mult, x_net_node_4_9, -0.2523777),0.48332343)}}}
variable {bl x_net_node_5_1 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.3327285),(mult, x_net_node_4_1, -1.6682022),(mult, x_net_node_4_2, -0.00046225643),(mult, x_net_node_4_3, -0.39040333),(mult, x_net_node_4_4, -0.80062896),(mult, x_net_node_4_5, -0.46412033),(mult, x_net_node_4_6, -0.9348359),(mult, x_net_node_4_7, 0.32865334),(mult, x_net_node_4_8, 0.08802765),(mult, x_net_node_4_9, -0.45154965),-0.325769)}}}
variable {bl x_net_node_5_2 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -1.0804669),(mult, x_net_node_4_1, -0.3546788),(mult, x_net_node_4_2, -2.434249),(mult, x_net_node_4_3, 0.19160642),(mult, x_net_node_4_4, 0.027422808),(mult, x_net_node_4_5, 0.39738002),(mult, x_net_node_4_6, -1.6245612),(mult, x_net_node_4_7, -0.65205234),(mult, x_net_node_4_8, -0.2635732),(mult, x_net_node_4_9, 0.25215027),-0.3773863)}}}
variable {bl x_net_node_5_3 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.9941014),(mult, x_net_node_4_1, -0.67816204),(mult, x_net_node_4_2, -0.61665815),(mult, x_net_node_4_3, 0.19234447),(mult, x_net_node_4_4, 0.5241399),(mult, x_net_node_4_5, 0.55340767),(mult, x_net_node_4_6, -1.0754316),(mult, x_net_node_4_7, -2.044824),(mult, x_net_node_4_8, -0.1507512),(mult, x_net_node_4_9, -0.46507406),0.14446492)}}}
variable {bl x_net_node_5_4 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.88398945),(mult, x_net_node_4_1, 0.023455264),(mult, x_net_node_4_2, -0.079598196),(mult, x_net_node_4_3, 0.3605269),(mult, x_net_node_4_4, 0.50827307),(mult, x_net_node_4_5, 0.48525113),(mult, x_net_node_4_6, -0.4578694),(mult, x_net_node_4_7, -2.9304798),(mult, x_net_node_4_8, -0.8216985),(mult, x_net_node_4_9, -0.5142444),0.31125653)}}}
variable {bl x_net_node_5_5 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.44688562),(mult, x_net_node_4_1, 0.0013793855),(mult, x_net_node_4_2, -0.32735914),(mult, x_net_node_4_3, 0.10025095),(mult, x_net_node_4_4, 0.64033365),(mult, x_net_node_4_5, 0.1568767),(mult, x_net_node_4_6, -0.05939035),(mult, x_net_node_4_7, -1.5097171),(mult, x_net_node_4_8, -1.6732112),(mult, x_net_node_4_9, -1.1187071),0.4152626)}}}
variable {bl x_net_node_5_6 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.5153855),(mult, x_net_node_4_1, 0.050389912),(mult, x_net_node_4_2, -0.33020976),(mult, x_net_node_4_3, 0.5090036),(mult, x_net_node_4_4, 0.122307755),(mult, x_net_node_4_5, -0.11485123),(mult, x_net_node_4_6, 0.20889969),(mult, x_net_node_4_7, -0.28201896),(mult, x_net_node_4_8, -3.5260305),(mult, x_net_node_4_9, -1.2556318),-0.21642554)}}}
variable {bl x_net_node_5_7 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.7110275),(mult, x_net_node_4_1, -0.499079),(mult, x_net_node_4_2, -0.28160614),(mult, x_net_node_4_3, -0.49405518),(mult, x_net_node_4_4, 0.2722215),(mult, x_net_node_4_5, -0.36990067),(mult, x_net_node_4_6, 0.29430273),(mult, x_net_node_4_7, -0.3558497),(mult, x_net_node_4_8, -2.923169),(mult, x_net_node_4_9, -0.51597416),-0.26811266)}}}
variable {bl x_net_node_5_8 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.7857417),(mult, x_net_node_4_1, -0.360165),(mult, x_net_node_4_2, 0.009877577),(mult, x_net_node_4_3, -1.059741),(mult, x_net_node_4_4, 0.14644064),(mult, x_net_node_4_5, -0.5032481),(mult, x_net_node_4_6, 0.26055533),(mult, x_net_node_4_7, -1.0731986),(mult, x_net_node_4_8, -1.8256899),(mult, x_net_node_4_9, 0.02474799),0.09673021)}}}
variable {bl x_net_node_5_9 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, -0.42586115),(mult, x_net_node_4_1, -0.464692),(mult, x_net_node_4_2, -0.7492679),(mult, x_net_node_4_3, -2.0356097),(mult, x_net_node_4_4, 0.11819903),(mult, x_net_node_4_5, -1.3361889),(mult, x_net_node_4_6, 0.26619953),(mult, x_net_node_4_7, -0.21554354),(mult, x_net_node_4_8, -1.3268502),(mult, x_net_node_4_9, 0.18827869),-0.26352704)}}}
variable {bl x_net_node_5_10 DEFINE REAL assign{result{(add, (mult, x_net_node_4_0, 1.1315677),(mult, x_net_node_4_1, 0.5222022),(mult, x_net_node_4_2, 0.0034351319),(mult, x_net_node_4_3, -0.73985714),(mult, x_net_node_4_4, -0.43678373),(mult, x_net_node_4_5, -2.0955372),(mult, x_net_node_4_6, 0.07225124),(mult, x_net_node_4_7, -0.17639945),(mult, x_net_node_4_8, 0.6207444),(mult, x_net_node_4_9, 1.0538602),-0.19319512)}}}
variable {bl x_net_output_max DEFINE REAL assign{result{(max, x_net_node_5_0, x_net_node_5_1, x_net_node_5_2, x_net_node_5_3, x_net_node_5_4, x_net_node_5_5, x_net_node_5_6, x_net_node_5_7, x_net_node_5_8, x_net_node_5_9, x_net_node_5_10)}}}
variable {bl x_net_output DEFINE REAL assign{case{(eq, x_net_output_max, x_net_node_5_0)}result{0}case{(eq, x_net_output_max, x_net_node_5_1)}result{1}case{(eq, x_net_output_max, x_net_node_5_2)}result{2}case{(eq, x_net_output_max, x_net_node_5_3)}result{3}case{(eq, x_net_output_max, x_net_node_5_4)}result{4}case{(eq, x_net_output_max, x_net_node_5_5)}result{5}case{(eq, x_net_output_max, x_net_node_5_6)}result{6}case{(eq, x_net_output_max, x_net_node_5_7)}result{7}case{(eq, x_net_output_max, x_net_node_5_8)}result{8}case{(eq, x_net_output_max, x_net_node_5_9)}result{9}case{(eq, x_net_output_max, x_net_node_5_10)}result{10}result{-1}}}

    
    #{START OF Y_NET}#
    variable {bl y_net_1_1 DEFINE INT assign {result{ (max, dest_y, 0)}}}
    variable {bl y_net_1_2 DEFINE INT assign {result{ (max, (sub, dest_y, prev_dest_y), 0)}}}
    variable {bl y_net_1_3 DEFINE INT assign {result{ (max, (sub, prev_dest_y, dest_y), 0)}}}
    variable {bl y_net_1_4 DEFINE INT assign {result{ (max, dir, 0)}}}
    variable {bl y_net_1_5 DEFINE INT assign {result{ (max, (neg, dir), 0)}}}
    
    variable {bl y_net_2_1 DEFINE INT assign {result{ (max, y_net_1_1, 0)}}}
    variable {bl y_net_2_2 DEFINE INT assign {result{ (max, (add, (neg, y_net_1_2), (neg, y_net_1_3), 1), 0)}}}
    variable {bl y_net_2_3 DEFINE INT assign {result{ (max, y_net_1_4, 0)}}}
    variable {bl y_net_2_4 DEFINE INT assign {result{ (max, y_net_1_5, 0)}}}
    
    variable {bl y_net_3_1 DEFINE INT assign {result{ (max, y_net_2_1, 0)}}}
    variable {bl y_net_3_2 DEFINE INT assign {result{ (max, (add, y_net_2_2, y_net_2_3, -1), 0)}}}
    variable {bl y_net_3_3 DEFINE INT assign {result{ (max, (add, y_net_2_2, y_net_2_4, -1), 0)}}}
    
    variable {bl y_net_output DEFINE INT assign {result{ (max, (add, y_net_3_1, (mult, 'y_change', y_net_3_2), (mult, -1, 'y_change', y_net_3_3)), 0)}}}
} end_variables

environment_update {
    #{}#
    variable_statement {
	tar_x
	assign {
	    case { (eq, timer, 0) } end_case result {tar_x, (min, 'x_max', (add, tar_x, 1)), (max, 'x_min', (sub, tar_x, 1))} end_result
	    result { tar_x } end_result
	} end_assign
    } end_variable_statement
    variable_statement {
	tar_y
	assign {
	    case { (eq, timer, 0) } end_case result {tar_y, (min, 'x_max', (add, tar_y, 1)), (max, 'x_min', (sub, tar_y, 1))} end_result
	    result { tar_y } end_result
	} end_assign
    } end_variable_statement
    variable_statement {
	timer
	assign {
	    case {(eq, timer, 0) } result {'movement_cooldown'}
	    result {(max, 0, (sub, timer, 1))}
	}
    }
    #{}#
} end_environment_update

checks {
    check {
	not_at_destination
	arguments {}
	read_variables {cur_x, cur_y, dest_x, dest_y}
	condition { (not, (and, (eq, cur_x, dest_x), (eq, cur_y, dest_y)))}
    }
    check {
	y_too_small
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (lt, cur_y, dest_y)}
    }
    check {
	y_too_big
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (gt, cur_y, dest_y)}
    }
    check {
	x_too_small
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (lt, cur_x, dest_x)}
    }
    check {
	x_too_big
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (gt, cur_x, dest_x)}
    }
} end_checks

environment_checks {
    #{This currently only checks one tree}#
    environment_check {
	target_in_sight
	arguments{}
	read_variables {cur_x, cur_y} end_read_variables
	condition {
	    (and,
		(lte, (add, (abs, (sub, cur_x, tar_x)), (abs, (sub, cur_y, tar_y))), 'vision_range'),
		(or,
		    (gt, (add, (abs, (sub, (index, tree_x, 0), tar_x)), (abs, (sub, (index, tree_y, 0), tar_y))), 'tree_range'),
		    (and, (eq, (index, tree_x, 0), cur_x), (eq, (index, tree_y, 0), cur_y)),
		    (and, (eq, (index, tree_x, 0), tar_x), (eq, (index, tree_y, 0), tar_y)),
		    (and, (lt, (index, tree_x, 0), cur_x), (lt, (index, tree_x, 0), tar_x)),
		    (and, (lt, (index, tree_y, 0), cur_y), (lt, (index, tree_y, 0), tar_y)),
		    (and, (gt, (index, tree_x, 0), cur_x), (gt, (index, tree_x, 0), tar_x)),
		    (and, (gt, (index, tree_y, 0), cur_y), (gt, (index, tree_y, 0), tar_y))
		),
		(or,
		    (gt, (add, (abs, (sub, (index, tree_x, 1), tar_x)), (abs, (sub, (index, tree_y, 1), tar_y))), 'tree_range'),
		    (and, (eq, (index, tree_x, 1), cur_x), (eq, (index, tree_y, 1), cur_y)),
		    (and, (eq, (index, tree_x, 1), tar_x), (eq, (index, tree_y, 1), tar_y)),
		    (and, (lt, (index, tree_x, 1), cur_x), (lt, (index, tree_x, 1), tar_x)),
		    (and, (lt, (index, tree_y, 1), cur_y), (lt, (index, tree_y, 1), tar_y)),
		    (and, (gt, (index, tree_x, 1), cur_x), (gt, (index, tree_x, 1), tar_x)),
		    (and, (gt, (index, tree_y, 1), cur_y), (gt, (index, tree_y, 1), tar_y))
		)
	    )
	} end_condition
    } end_environment_check
    
} end_environment_checks

actions {
    #{ action nodes are defined here }#
    action {
	call_xy_net
	arguments{}
	local_variables {} end_local_variables
	read_variables {x_net_output, y_net_output} end_read_variables
	write_variables {dest_x, dest_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		dest_x
		assign {
		    result {(max, 'x_min', (min, 'x_max', (floor, x_net_output)))}
		}
	    }
	    variable_statement {
		dest_y
		assign {
		    result {(max, 'y_min', (min, 'y_max', y_net_output))}
		}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	move
	arguments{'delta_x' := INT, 'delta_y' := INT}
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {cur_x, cur_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		cur_x assign {result {(max, 'x_min', (min, 'x_max', (add, 'delta_x', cur_x)))}}
	    }
	    variable_statement {
		cur_y assign {result {(max, 'y_min', (min, 'y_max', (add, 'delta_y', cur_y)))}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	send_victory
	arguments{}
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {victory} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		victory assign {result {True}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	update_direction
	arguments{}
	local_variables { } end_local_variables
	read_variables {cur_y} end_read_variables
	write_variables {dir} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		dir
		assign {
		    case { (eq, cur_y, 'y_max')}
		    result {-1}
		    case { (eq, cur_y, 'y_min')}
		    result {1}
		    result {dir}
		}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    }
    action {
	update_previous_destination
	arguments{}
	local_variables { } end_local_variables
	read_variables {cur_x, cur_y} end_read_variables
	write_variables {prev_dest_x, prev_dest_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		prev_dest_x assign {result {cur_x}}
	    }
	    variable_statement {
		prev_dest_y assign {result {cur_y}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
} end_actions

sub_trees {
    sub_tree {
	DESTINATION_SUBTREE
	composite {
	    destination selector
	    children {
		not_at_destination {} #{Checks destination}#
		composite {
		    new_destination sequence
		    children {
			update_direction {} #{Updates the direction we're going in.}#
			call_xy_net {} #{Calls the neural networks}#
			update_previous_destination {} #{sets the current location to the previous destination.}#
		    }
		}
	    }
	}
    }
    sub_tree {
	MOVEMENT_SUBTREE
	composite {
	    destination_and_movement sequence
	    children {
		insert {DESTINATION_SUBTREE}
		composite {
		    movement selector
		    children {
			composite {
			    try_up sequence
			    children {
				y_too_small {}
				move {0, 1}
			    }
			}
			composite {
			    try_down sequence
			    children {
				y_too_big {}
				move {0, -1}
			    }
			}
			composite {
			    try_left sequence
			    children {
				x_too_big {}
				move {-1, 0}
			    }
			}
			composite {
			    try_right sequence
			    children {
				x_too_small {}
				move {1, 0}
			    }
			}
		    }
		}
	    }
	}
    }
} end_sub_trees

tree {
    composite {
	drone_control selector
	children {
	    composite {
		vision sequence
		children {
		    target_in_sight {}
		    send_victory {}
		    
		}
	    }
	    insert {MOVEMENT_SUBTREE}
	}
    }
} end_tree




tick_prerequisite { (not, victory) } end_tick_prerequisite
#{tick_prerequisite { True } end_tick_prerequisite}#
#{ if the condition is True, the tree ticks.
    If it is false, everything is done }#

specifications { #{ INVAR, LTL, and CTL specs go here }#
    CTLSPEC {(always_finally, victory -1)}
    LTLSPEC {(finally_bounded, [0, 200], victory -1)}
    #{CTLSPEC {(imply, (and, (eq, (index, tree_x 0, 0), 2), (eq, (index, tree_x 0, 1), 5), (eq, (index, tree_y 0, 0), 2), (eq, (index, tree_y 0, 1), 5)), (always_finally, victory -1))}}#
} end_specifications