MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__p_all0 := -3;
		resume_from_here_in_subtree__c1 := -3;
		resume_from_here_in_subtree__a3 := -3;
		resume_from_here_in_subtree__a1 := -3;
		resume_from_here_in_subtree__c1_1 := -3;
		p_all0.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		var1_stage_1 := 
			case
				!(a3.active) : var1_stage_0;
				TRUE : min(15, max(2, var1_stage_0));
			esac;
		var2_stage_1 := 
			case
				!(a3.active) : var2_stage_0;
				(TRUE <-> (var4_stage_0 < var3_stage_1)) : min(15, max(2, (min(15, max(2, 4)) + min(15, max(2, 7)) + min(15, max(2, var5_stage_0)) + min(15, max(2, 9)))));
				((TRUE != TRUE) -> (TRUE = TRUE)) : min(15, max(2, (min(15, max(2, (min(15, max(2, var7_stage_0)) + min(15, max(2, var4_stage_0)) + min(15, max(2, 8)) + min(15, max(2, 10)) + min(15, max(2, 6))))) / min(15, max(2, abs(min(15, max(2, var1_stage_0))))))));
				TRUE : min(15, max(2, min(min(15, max(2, (min(15, max(2, (min(15, max(2, var4_stage_0))    mod    min(15, max(2, 3)))))    mod    min(15, max(2, var6_stage_0))))), min(15, max(2, (min(15, max(2, 7)) - min(15, max(2, var5_stage_0))))))));
			esac;
		var2_stage_2 := 
			case
				!(a3.active) : var2_stage_1;
				(2 > (min(15, max(2, var3_stage_2)) + min(15, max(2, 4)) + min(15, max(2, 7)) + min(15, max(2, 4)) + min(15, max(2, 8)))) : min(15, max(2, (min(15, max(2, var5_stage_1)) + min(15, max(2, 5)) + min(15, max(2, var6_stage_1)) + min(15, max(2, var6_stage_1)))));
				FALSE : min(15, max(2, 6));
				(FALSE xor TRUE) : min(15, max(2, 3));
				(-(min(15, max(2, var6_stage_1))) > (min(15, max(2, var2_stage_1))    mod    min(15, max(2, var2_stage_1)))) : min(15, max(2, (min(15, max(2, 15)) - min(15, max(2, min(min(15, max(2, var5_stage_1)), min(15, max(2, 5))))))));
				TRUE : min(15, max(2, count((((var1_stage_0 = 8) xnor (FALSE xor FALSE)) = (var5_stage_1 = (min(15, max(2, (min(15, max(2, var7_stage_1)) * min(15, max(2, 5)) * min(15, max(2, var5_stage_1)) * min(15, max(2, var2_stage_1))))) - min(15, max(2, (min(15, max(2, 3))    mod    min(15, max(2, var4_stage_1)))))))), (((var6_stage_1 <= var7_stage_1) -> FALSE) xor (7 > 11)), (max(min(15, max(2, count((7 = 11), (TRUE -> FALSE), ((var6_stage_1 <= var6_stage_1) <-> FALSE), ((3 >= 3) = (FALSE xor FALSE))))), min(15, max(2, var1_stage_0))) >= -(min(15, max(2, 7)))), (((min(15, max(2, var6_stage_1))    mod    min(15, max(2, var3_stage_2))) <= count((FALSE != FALSE), (TRUE & TRUE), (12 <= 13), (8 != 11))) != ((min(15, max(2, var3_stage_2)) / min(15, max(2, 5))) <= 13)), ((abs(min(15, max(2, 11))) > (min(15, max(2, (min(15, max(2, 7)) - min(15, max(2, 2)))))    mod    min(15, max(2, (min(15, max(2, var6_stage_1)) / min(15, max(2, 14))))))) xnor ((TRUE = FALSE) & ((FALSE -> TRUE) = (var6_stage_1 <= var3_stage_2)))))));
			esac;
		var3_stage_1 := 
			case
				!(a3.active) : var3_stage_0;
				FALSE : min(15, max(2, (min(15, max(2, (min(15, max(2, 4)) * min(15, max(2, var3_stage_0)) * min(15, max(2, 8)) * min(15, max(2, var3_stage_0)) * min(15, max(2, 8))))) / min(15, max(2, (min(15, max(2, 14)) + min(15, max(2, 5))))))));
				(((TRUE xor FALSE) -> FALSE) != FALSE) : min(15, max(2, var3_stage_0));
				(FALSE xor FALSE) : min(15, max(2, var4_stage_0));
				TRUE : min(15, max(2, min(min(15, max(2, 15)), min(15, max(2, (min(15, max(2, 8)) * min(15, max(2, 10)) * min(15, max(2, 12))))))));
			esac;
		var3_stage_2 := 
			case
				!(a3.active) : var3_stage_1;
				(FALSE != TRUE) : min(15, max(2, max(min(15, max(2, abs(min(15, max(2, 6))))), min(15, max(2, -(min(15, max(2, var1_stage_0))))))));
				FALSE : min(15, max(2, abs(min(15, max(2, (min(15, max(2, var3_stage_1))    mod    min(15, max(2, var7_stage_1))))))));
				(FALSE xor TRUE) : min(15, max(2, (min(15, max(2, (min(15, max(2, var7_stage_1)) * min(15, max(2, var4_stage_1))))) / min(15, max(2, 3)))));
				(FALSE xor (5 >= 7)) : min(15, max(2, abs(min(15, max(2, var7_stage_1)))));
				(((FALSE -> TRUE) xor TRUE) = (11 < (min(15, max(2, (min(15, max(2, 5)) + min(15, max(2, 7)) + min(15, max(2, var5_stage_1)) + min(15, max(2, 13))))) / min(15, max(2, min(min(15, max(2, 9)), min(15, max(2, var3_stage_1)))))))) : min(15, max(2, min(min(15, max(2, (min(15, max(2, (min(15, max(2, 8))    mod    min(15, max(2, var1_stage_0))))) * min(15, max(2, (min(15, max(2, 5)) / min(15, max(2, var1_stage_0))))) * min(15, max(2, var4_stage_1))))), min(15, max(2, 4)))));
				TRUE : min(15, max(2, var3_stage_1));
			esac;
		var4_stage_1 := 
			case
				!(a3.active) : var4_stage_0;
				(((TRUE xor TRUE) xnor FALSE) = (FALSE xnor TRUE)) : min(15, max(2, (min(15, max(2, abs(min(15, max(2, 4))))) - min(15, max(2, var2_stage_1)))));
				TRUE : min(15, max(2, -(min(15, max(2, var5_stage_1)))));
			esac;
		var5_stage_1 := 
			case
				!(a3.active) : var5_stage_0;
				--((abs(min(15, max(2, 7))) <= var2_stage_1) -> TRUE) : min(15, max(2, (min(15, max(2, (min(15, max(2, 7))    mod    min(15, max(2, (min(15, max(2, max(min(15, max(2, 4)), min(15, max(2, var2_stage_1))))) / min(15, max(2, (min(15, max(2, 1)) / min(15, max(2, 1)))))))))))    *    min(15, max(2, 1)))));
				--((abs(min(15, max(2, 7))) <= var2_stage_1) -> TRUE) : min(15, max(2, (min(15, max(2, (min(15, max(2, 7))    mod    min(15, max(2, (min(15, max(2, max(min(15, max(2, 4)), min(15, max(2, 15))))) / min(15, max(2, (min(15, max(2, 1)) / min(15, max(2, 1)))))))))))    *    min(15, max(2, 1)))));
				(((TRUE = TRUE) & FALSE) xnor (FALSE & TRUE)) : min(15, max(2, (min(15, max(2, (min(15, max(2, var5_stage_0)) * min(15, max(2, var5_stage_0)) * min(15, max(2, 13)) * min(15, max(2, 2))))) - min(15, max(2, 9)))));
				TRUE : min(15, max(2, min(min(15, max(2, (min(15, max(2, 11)) / min(15, max(2, 12))))), min(15, max(2, (min(15, max(2, 11)) * min(15, max(2, var4_stage_0)) * min(15, max(2, var5_stage_0)) * min(15, max(2, var7_stage_1))))))));
			esac;
		var6_stage_1 := 
			case
				!(a3.active) : var6_stage_0;
				(TRUE xor FALSE) : min(15, max(2, (min(15, max(2, var4_stage_1))    *    min(15, max(2, 6)))));
				(-(min(15, max(2, var5_stage_1))) > 3) : min(15, max(2, (min(15, max(2, (min(15, max(2, var3_stage_2)) - min(15, max(2, 3))))) - min(15, max(2, (min(15, max(2, 2)) * min(15, max(2, -(min(15, max(2, var7_stage_1))))) * min(15, max(2, (min(15, max(2, 10)) / min(15, max(2, var5_stage_1)))))))))));
				TRUE : min(15, max(2, max(min(15, max(2, (min(15, max(2, var7_stage_1)) + min(15, max(2, 10))))), min(15, max(2, 2)))));
				TRUE : min(15, max(2, (min(15, max(2, min(min(15, max(2, var5_stage_1)), min(15, max(2, var5_stage_1))))) - min(15, max(2, abs(min(15, max(2, 2))))))));
			esac;
		var6_stage_2 := 
			case
				!(a1.active) : var6_stage_1;
				(TRUE & ((FALSE xnor TRUE) xnor (FALSE -> TRUE))) : min(15, max(2, -(min(15, max(2, (min(15, max(2, var1_stage_1))    *    min(15, max(2, var5_stage_1))))))));
				TRUE : min(15, max(2, (min(15, max(2, 9))    *    min(15, max(2, var6_stage_1)))));
			esac;
		var7_stage_1 := 
			case
				!(a3.active) : var7_stage_0;
				(var7_stage_0 > var2_stage_1) : min(15, max(2, -(min(15, max(2, (min(15, max(2, count((FALSE | TRUE), (TRUE & TRUE)))) / min(15, max(2, min(min(15, max(2, 7)), min(15, max(2, var3_stage_1)))))))))));
				TRUE : min(15, max(2, -(min(15, max(2, (min(15, max(2, (min(15, max(2, var4_stage_0)) / min(15, max(2, var5_stage_0))))) - min(15, max(2, var2_stage_1))))))));
				(FALSE | (11 = var3_stage_1)) : min(15, max(2, (min(15, max(2, (min(15, max(2, var2_stage_1))    *    min(15, max(2, var1_stage_0))))) + min(15, max(2, 9)))));
				((min(15, max(2, 13)) / min(15, max(2, (min(15, max(2, 8))    *    min(15, max(2, 11)))))) = var5_stage_0) : min(15, max(2, min(min(15, max(2, var7_stage_0)), min(15, max(2, var4_stage_0)))));
				TRUE : min(15, max(2, 5));
			esac;
		var7_stage_2 := 
			case
				!(a1.active) : var7_stage_1;
				(max(min(15, max(2, 7)), min(15, max(2, 9))) <= (min(15, max(2, var5_stage_1)) + min(15, max(2, 6)))) : min(15, max(2, (min(15, max(2, -(min(15, max(2, 7))))) * min(15, max(2, 14)))));
				(FALSE != FALSE) : min(15, max(2, max(min(15, max(2, (min(15, max(2, var4_stage_1)) + min(15, max(2, 9)) + min(15, max(2, 9)) + min(15, max(2, var3_stage_2))))), min(15, max(2, (min(15, max(2, 5)) + min(15, max(2, var1_stage_1)) + min(15, max(2, (min(15, max(2, var7_stage_1)) * min(15, max(2, 11)) * min(15, max(2, var4_stage_1)) * min(15, max(2, var1_stage_1)))))))))));
				FALSE : min(15, max(2, abs(min(15, max(2, (min(15, max(2, 5))    *    min(15, max(2, 9))))))));
				(var4_stage_1 > (min(15, max(2, var2_stage_2))    *    min(15, max(2, var1_stage_1)))) : min(15, max(2, (min(15, max(2, var3_stage_2)) / min(15, max(2, abs(min(15, max(2, min(min(15, max(2, 8)), min(15, max(2, var2_stage_2)))))))))));
				FALSE : min(15, max(2, (min(15, max(2, abs(min(15, max(2, (min(15, max(2, 7))    *    min(15, max(2, 14)))))))) + min(15, max(2, var5_stage_1)) + min(15, max(2, count((((min(15, max(2, 6)) * min(15, max(2, 14)) * min(15, max(2, var3_stage_2))) <= -(min(15, max(2, var6_stage_2)))) | (FALSE xor TRUE)), (min(min(15, max(2, var3_stage_2)), min(15, max(2, 13))) >= (min(15, max(2, var7_stage_1)) / min(15, max(2, (min(15, max(2, var4_stage_1)) / min(15, max(2, 3))))))), (TRUE != ((FALSE != TRUE) & FALSE)), (abs(min(15, max(2, var5_stage_1))) < 4), ((min(15, max(2, 14))    *    min(15, max(2, 13))) <= (min(15, max(2, var1_stage_1)) / min(15, max(2, var5_stage_1))))))) + min(15, max(2, (min(15, max(2, 12)) * min(15, max(2, 11)) * min(15, max(2, 7))))))));
				TRUE : min(15, max(2, (min(15, max(2, abs(min(15, max(2, -(min(15, max(2, (min(15, max(2, 10))    *    min(15, max(2, var1_stage_1))))))))))) * min(15, max(2, var6_stage_2)) * min(15, max(2, (min(15, max(2, var5_stage_1)) / min(15, max(2, var2_stage_2))))) * min(15, max(2, max(min(15, max(2, (min(15, max(2, 3)) + min(15, max(2, var2_stage_2)) + min(15, max(2, var2_stage_2))))), min(15, max(2, (min(15, max(2, 12))    *    min(15, max(2, var4_stage_1)))))))))));
			esac;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		c1 : c1_module();
		a3 : running_DEFAULT_module();
		a1 : a1_module(var1_stage_1, var2_stage_2, var7_stage_1);
		c1_1 : c1_1_module();
		p_all0 : composite_parallel_success_on_all_without_memory_4(c1, a3, a1, c1_1);
		--START OF BLACKBOARD VARIABLES DECLARATION
		var1_stage_0 : 2..15;
		var2_stage_0 : 2..15;
		var3_stage_0 : 2..15;
		var4_stage_0 : 2..15;
		var5_stage_0 : 2..15;
		var6_stage_0 : 2..15;
		var7_stage_0 : 2..15;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(var1_stage_0) := 
			case
				TRUE : 4;
			esac;
		init(var2_stage_0) := 
			case
				TRUE : 15;
			esac;
		init(var3_stage_0) := 
			case
				TRUE : 15;
			esac;
		init(var4_stage_0) := 
			case
				TRUE : 5;
			esac;
		init(var5_stage_0) := 
			case
				TRUE : 11;
			esac;
		init(var6_stage_0) := 
			case
				TRUE : 8;
			esac;
		init(var7_stage_0) := 
			case
				TRUE : 6;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(var1_stage_0) := var1_stage_1;
		next(var2_stage_0) := var2_stage_2;
		next(var3_stage_0) := var3_stage_2;
		next(var4_stage_0) := var4_stage_1;
		next(var5_stage_0) := var5_stage_1;
		next(var6_stage_0) := var6_stage_2;
		next(var7_stage_0) := var7_stage_2;
		--END OF BLACKBOARD VARIABLES TRANSITION


MODULE define_nodes
	DEFINE
		p_all0 := 0;
		c1 := 1;
		a3 := 2;
		a1 := 3;
		c1_1 := 4;
MODULE composite_parallel_success_on_all_without_memory_4(child_0, child_1, child_2, child_3)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				(child_3.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				!(child_3.internal_status = success) : child_3.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
MODULE c1_module()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (TRUE) ? success : failure;
MODULE a1_module(var1_stage_1, var2_stage_2, var7_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := 
			case
				(TRUE xor FALSE) : success;
				(abs(min(15, max(2, count((TRUE -> TRUE), (TRUE xnor FALSE), (var1_stage_1 >= var7_stage_1), (TRUE xnor TRUE))))) >= max(min(15, max(2, 11)), min(15, max(2, var1_stage_1)))) : success;
				(((min(15, max(2, 4)) / min(15, max(2, var2_stage_2))) >= 9) <-> (max(min(15, max(2, 2)), min(15, max(2, 13))) = 4)) : success;
				TRUE : failure;
				TRUE : failure;
			esac;
MODULE c1_1_module()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (TRUE) ? success : failure;
MODULE running_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := running;
