MODULE main
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		statuses := [linkSeq8.status, linkSeq6.status, linkSeq2.status, sel4.status, safety_check4.status, backup4.status, sel5.status, safety_check5.status, backup5.status, linkSeq3.status, sel6.status, safety_check6.status, backup6.status, sel7.status, safety_check7.status, backup7.status, linkSeq7.status, linkSeq4.status, sel8.status, safety_check8.status, backup8.status, sel9.status, safety_check9.status, backup9.status, linkSeq5.status, linkSeq0.status, sel0.status, safety_check0.status, backup0.status, sel1.status, safety_check1.status, backup1.status, linkSeq1.status, sel2.status, safety_check2.status, backup2.status, sel3.status, safety_check3.status, backup3.status];
		trace_running_source_6 := (statuses[6] = running) ? 6 : -2;
		trace_running_source_2 := 
			case
				!(trace_running_source_6 = -2) : trace_running_source_6;
				TRUE : -2;
			esac;
		trace_running_source_10 := (statuses[10] = running) ? 10 : -2;
		trace_running_source_13 := (statuses[13] = running) ? 13 : -2;
		trace_running_source_9 := 
			case
				!(trace_running_source_10 = -2) : trace_running_source_10;
				!(trace_running_source_13 = -2) : trace_running_source_13;
				TRUE : -2;
			esac;
		trace_running_source_1 := 
			case
				!(trace_running_source_2 = -2) : trace_running_source_2;
				!(trace_running_source_9 = -2) : trace_running_source_9;
				TRUE : -2;
			esac;
		trace_running_source_18 := (statuses[18] = running) ? 18 : -2;
		trace_running_source_21 := (statuses[21] = running) ? 21 : -2;
		trace_running_source_17 := 
			case
				!(trace_running_source_18 = -2) : trace_running_source_18;
				!(trace_running_source_21 = -2) : trace_running_source_21;
				TRUE : -2;
			esac;
		trace_running_source_26 := (statuses[26] = running) ? 26 : -2;
		trace_running_source_29 := (statuses[29] = running) ? 29 : -2;
		trace_running_source_25 := 
			case
				!(trace_running_source_26 = -2) : trace_running_source_26;
				!(trace_running_source_29 = -2) : trace_running_source_29;
				TRUE : -2;
			esac;
		trace_running_source_33 := (statuses[33] = running) ? 33 : -2;
		trace_running_source_36 := (statuses[36] = running) ? 36 : -2;
		trace_running_source_32 := 
			case
				!(trace_running_source_33 = -2) : trace_running_source_33;
				!(trace_running_source_36 = -2) : trace_running_source_36;
				TRUE : -2;
			esac;
		trace_running_source_24 := 
			case
				!(trace_running_source_25 = -2) : trace_running_source_25;
				!(trace_running_source_32 = -2) : trace_running_source_32;
				TRUE : -2;
			esac;
		trace_running_source_16 := 
			case
				!(trace_running_source_17 = -2) : trace_running_source_17;
				!(trace_running_source_24 = -2) : trace_running_source_24;
				TRUE : -2;
			esac;
		trace_running_source_0 := 
			case
				!(trace_running_source_1 = -2) : trace_running_source_1;
				!(trace_running_source_16 = -2) : trace_running_source_16;
				TRUE : -2;
			esac;
		resume_point_0 := 
			case
				TRUE : -2;
			esac;
		resume_point_1 := 
			case
				TRUE : -2;
			esac;
		resume_point_2 := 
			case
				TRUE : -2;
			esac;
		resume_point_32 := 
			case
				TRUE : -2;
			esac;
		resume_point_9 := 
			case
				TRUE : -2;
			esac;
		resume_point_16 := 
			case
				TRUE : -2;
			esac;
		resume_point_17 := 
			case
				TRUE : -2;
			esac;
		resume_point_24 := 
			case
				TRUE : -2;
			esac;
		resume_point_25 := 
			case
				TRUE : -2;
			esac;
		linkSeq8.active := TRUE;
	VAR
		node_names : define_nodes;
		resume_from_node_0 : {0, 6, 10, 13, 18, 21, 26, 29, 33, 36};
		linkSeq8 : node_sequence(1, linkSeq6, linkSeq7, resume_point_0);
		linkSeq6 : node_sequence(1, linkSeq2, linkSeq3, resume_point_1);
		linkSeq2 : node_sequence(1, sel4, sel5, resume_point_2);
		sel4 : node_selector(1, safety_check4, backup4);
		safety_check4 : node_non_blocking();
		backup4 : node_success();
		sel5 : node_selector(1, safety_check5, backup5);
		safety_check5 : node_non_blocking();
		backup5 : node_success();
		linkSeq3 : node_sequence(1, sel6, sel7, resume_point_9);
		sel6 : node_selector(1, safety_check6, backup6);
		safety_check6 : node_non_blocking();
		backup6 : node_success();
		sel7 : node_selector(1, safety_check7, backup7);
		safety_check7 : node_non_blocking();
		backup7 : node_success();
		linkSeq7 : node_sequence(1, linkSeq4, linkSeq5, resume_point_16);
		linkSeq4 : node_sequence(1, sel8, sel9, resume_point_17);
		sel8 : node_selector(1, safety_check8, backup8);
		safety_check8 : node_non_blocking();
		backup8 : node_success();
		sel9 : node_selector(1, safety_check9, backup9);
		safety_check9 : node_non_blocking();
		backup9 : node_success();
		linkSeq5 : node_sequence(1, linkSeq0, linkSeq1, resume_point_24);
		linkSeq0 : node_sequence(1, sel0, sel1, resume_point_25);
		sel0 : node_selector(1, safety_check0, backup0);
		safety_check0 : node_non_blocking();
		backup0 : node_success();
		sel1 : node_selector(1, safety_check1, backup1);
		safety_check1 : node_non_blocking();
		backup1 : node_success();
		linkSeq1 : node_sequence(1, sel2, sel3, resume_point_32);
		sel2 : node_selector(1, safety_check2, backup2);
		safety_check2 : node_non_blocking();
		backup2 : node_success();
		sel3 : node_selector(1, safety_check3, backup3);
		safety_check3 : node_non_blocking();
		backup3 : node_success();
	ASSIGN
		init(resume_from_node_0) := 0;
		next(resume_from_node_0) := 
			case
				(statuses[0] in {success, failure}) : 0;
				TRUE : max(trace_running_source_0, 0);
			esac;
LTLSPEC G (safety_check0.status = failure -> backup0.status = success);
LTLSPEC G (safety_check0.status = failure -> !(backup0.status = success));
LTLSPEC G (safety_check1.status = failure -> backup1.status = success);
LTLSPEC G (safety_check1.status = failure -> !(backup1.status = success));
LTLSPEC G (safety_check2.status = failure -> backup2.status = success);
LTLSPEC G (safety_check2.status = failure -> !(backup2.status = success));
LTLSPEC G (safety_check3.status = failure -> backup3.status = success);
LTLSPEC G (safety_check3.status = failure -> !(backup3.status = success));
LTLSPEC G (safety_check4.status = failure -> backup4.status = success);
LTLSPEC G (safety_check4.status = failure -> !(backup4.status = success));
LTLSPEC G (safety_check5.status = failure -> backup5.status = success);
LTLSPEC G (safety_check5.status = failure -> !(backup5.status = success));
LTLSPEC G (safety_check6.status = failure -> backup6.status = success);
LTLSPEC G (safety_check6.status = failure -> !(backup6.status = success));
LTLSPEC G (safety_check7.status = failure -> backup7.status = success);
LTLSPEC G (safety_check7.status = failure -> !(backup7.status = success));
LTLSPEC G (safety_check8.status = failure -> backup8.status = success);
LTLSPEC G (safety_check8.status = failure -> !(backup8.status = success));
LTLSPEC G (safety_check9.status = failure -> backup9.status = success);
LTLSPEC G (safety_check9.status = failure -> !(backup9.status = success));


MODULE fake_node()
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := error;
MODULE node_success()
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status :=
			case
				!(active) : invalid;
				TRUE : success;
			esac;
MODULE node_sequence(last_child, child_0, child_1, resume_point)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status :=
			case
				!(active) : invalid;
				(last_child < 0) : success;
				(0 <= last_child) & (child_0.status = error) : error;
				(1 <= last_child) & (child_1.status = error) : error;
				(0 >= resume_point) & (0 <= last_child) & (child_0.status = failure) : failure;
				(0 >= resume_point) & (0 <= last_child) & (child_0.status = running) : running;
				(0 >= resume_point) & (0 <= last_child) & (child_0.status = invalid) : error;
				(1 >= resume_point) & (1 <= last_child) & (child_1.status = failure) : failure;
				(1 >= resume_point) & (1 <= last_child) & (child_1.status = running) : running;
				(1 >= resume_point) & (1 <= last_child) & (child_1.status = invalid) : error;
				TRUE : success;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				(0 > last_child) : FALSE;
				(0 < resume_point) : FALSE;
				(0 = resume_point) : TRUE;
				TRUE : TRUE;
				esac;
		child_1.active :=
			case
				!(active) : FALSE;
				(1 > last_child) : FALSE;
				(1 < resume_point) : FALSE;
				(1 = resume_point) : TRUE;
				!(child_0.active) : FALSE;
				!(child_0.status = success) : FALSE;
				TRUE: TRUE;
			esac;
MODULE node_selector(last_child, child_0, child_1)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status :=
			case
				!(active) : invalid;
				(last_child < 0) : failure;
				(0 <= last_child) & (child_0.status = error) : error;
				(1 <= last_child) & (child_1.status = error) : error;
				(0 <= last_child) & (child_0.status = success) : success;
				(0 <= last_child) & (child_0.status = running) : running;
				(0 <= last_child) & (child_0.status = invalid) : error;
				(1 <= last_child) & (child_1.status = success) : success;
				(1 <= last_child) & (child_1.status = running) : running;
				(1 <= last_child) & (child_1.status = invalid) : error;
				TRUE : failure;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				(0 > last_child) : FALSE;
				TRUE : TRUE;
				esac;
		child_1.active :=
			case
				!(active) : FALSE;
				(1 > last_child) : FALSE;
				!(child_0.active) : FALSE;
				!(child_0.status = failure) : FALSE;
				TRUE: TRUE;
			esac;
MODULE node_non_blocking()
	CONSTANTS
		success, failure, running, invalid, error;
	VAR
		input_status : {success, failure};
	DEFINE
		status := active ? input_status : invalid;
MODULE define_nodes
	DEFINE
		linkSeq8 := 0;
		linkSeq6 := 1;
		linkSeq2 := 2;
		sel4 := 3;
		safety_check4 := 4;
		backup4 := 5;
		sel5 := 6;
		safety_check5 := 7;
		backup5 := 8;
		linkSeq3 := 9;
		sel6 := 10;
		safety_check6 := 11;
		backup6 := 12;
		sel7 := 13;
		safety_check7 := 14;
		backup7 := 15;
		linkSeq7 := 16;
		linkSeq4 := 17;
		sel8 := 18;
		safety_check8 := 19;
		backup8 := 20;
		sel9 := 21;
		safety_check9 := 22;
		backup9 := 23;
		linkSeq5 := 24;
		linkSeq0 := 25;
		sel0 := 26;
		safety_check0 := 27;
		backup0 := 28;
		sel1 := 29;
		safety_check1 := 30;
		backup1 := 31;
		linkSeq1 := 32;
		sel2 := 33;
		safety_check2 := 34;
		backup2 := 35;
		sel3 := 36;
		safety_check3 := 37;
		backup3 := 38;
