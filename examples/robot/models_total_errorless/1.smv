MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [sel0.status, safety_check0.status, backup0.status];
		resume_from_node_0 := -3;
		sel0.active := TRUE;
	VAR
		node_names : define_nodes;
		sel0 : node_selector(1, safety_check0, backup0);
		safety_check0 : node_non_blocking();
		backup0 : node_success();
	ASSIGN
LTLSPEC G (safety_check0.status = failure -> backup0.status = success);
LTLSPEC G (safety_check0.status = failure -> !(backup0.status = success));


MODULE fake_node()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := invalid;
MODULE node_success()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				TRUE : success;
			esac;
MODULE node_non_blocking()
	CONSTANTS
		success, failure, running, invalid;
	IVAR
		input_status : {success, failure};
	DEFINE
		status := active ? input_status : invalid;
MODULE node_selector(last_child, child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status :=
			case
				!(active) : invalid;
				(last_child < 0) : failure;
				(0 <= last_child) & (child_0.status = success) : success;
				(0 <= last_child) & (child_0.status = running) : running;
				(1 <= last_child) & (child_1.status = success) : success;
				(1 <= last_child) & (child_1.status = running) : running;
				TRUE : failure;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				(0 > last_child) : FALSE;
				TRUE : TRUE;
				esac;
		child_1.active :=
			case
				!(active) : FALSE;
				(1 > last_child) : FALSE;
				!(child_0.active) : FALSE;
				!(child_0.status = failure) : FALSE;
				TRUE: TRUE;
			esac;
MODULE define_nodes
	DEFINE
		sel0 := 0;
		safety_check0 := 1;
		backup0 := 2;
