*** This is nuXmv 2.0.0 (compiled on Mon Oct 14 17:48:12 2019)
*** Copyright (c) 2014-2019, Fondazione Bruno Kessler
*** For more information on nuXmv see https://nuxmv.fbk.eu
*** or email to <nuxmv@list.fbk.eu>.
*** Please report bugs at https://nuxmv.fbk.eu/bugs
*** (click on "Login Anonymously" to access)
*** Alternatively write to <nuxmv@list.fbk.eu>.

*** This version of nuXmv is linked to NuSMV 2.6.0.
*** For more information on NuSMV see <http://nusmv.fbk.eu>
*** or email to <nusmv-users@list.fbk.eu>.
*** Copyright (C) 2010-2019, Fondazione Bruno Kessler

*** This version of nuXmv is linked to the CUDD library version 2.4.1
*** Copyright (c) 1995-2004, Regents of the University of Colorado

*** This version of nuXmv is linked to the MiniSat SAT solver. 
*** See http://minisat.se/MiniSat.html
*** Copyright (c) 2003-2006, Niklas Een, Niklas Sorensson
*** Copyright (c) 2007-2010, Niklas Sorensson

*** This version of nuXmv is linked to MathSAT
*** Copyright (C) 2009-2019 by Fondazione Bruno Kessler
*** Copyright (C) 2009-2019 by University of Trento and others
*** See http://mathsat.fbk.eu

-- specification  G (safety_check0.status = failure -> backup0.status = success)  is true
-- specification  G (safety_check0.status = failure -> !(backup0.status = success))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 1.1 <-
    safety_check0.input_status = success
    safety_check1.input_status = success
    linkSeq0.active = TRUE
    resume_point_0 = -2
    resume_from_node_0 = -3
    statuses[0] = success
    statuses[1] = success
    statuses[2] = success
    statuses[3] = invalid
    statuses[4] = success
    statuses[5] = success
    statuses[6] = invalid
    node_names.backup1 = 6
    node_names.safety_check1 = 5
    node_names.sel1 = 4
    node_names.backup0 = 3
    node_names.safety_check0 = 2
    node_names.sel0 = 1
    node_names.linkSeq0 = 0
    sel1.active = TRUE
    sel0.active = TRUE
    linkSeq0.internal_status = success
    linkSeq0.status = success
    backup0.active = FALSE
    safety_check0.active = TRUE
    sel0.internal_status = success
    sel0.status = success
    safety_check0.internal_status = success
    safety_check0.status = success
    backup0.internal_status = success
    backup0.status = invalid
    backup1.active = FALSE
    safety_check1.active = TRUE
    sel1.internal_status = success
    sel1.status = success
    safety_check1.internal_status = success
    safety_check1.status = success
    backup1.internal_status = success
    backup1.status = invalid
  -> State: 1.2 <-
    safety_check0.input_status = failure
    statuses[2] = failure
    statuses[3] = success
    backup0.active = TRUE
    safety_check0.internal_status = failure
    safety_check0.status = failure
    backup0.status = success
  -- Loop starts here
  -> State: 1.3 <-
    safety_check0.input_status = success
    statuses[2] = success
    statuses[3] = invalid
    backup0.active = FALSE
    safety_check0.internal_status = success
    safety_check0.status = success
    backup0.status = invalid
  -> State: 1.4 <-
-- specification  G (safety_check1.status = failure -> backup1.status = success)  is true
-- specification  G (safety_check1.status = failure -> !(backup1.status = success))  is false
-- as demonstrated by the following execution sequence
Trace Description: LTL Counterexample 
Trace Type: Counterexample 
  -> State: 2.1 <-
    safety_check0.input_status = success
    safety_check1.input_status = success
    linkSeq0.active = TRUE
    resume_point_0 = -2
    resume_from_node_0 = -3
    statuses[0] = success
    statuses[1] = success
    statuses[2] = success
    statuses[3] = invalid
    statuses[4] = success
    statuses[5] = success
    statuses[6] = invalid
    node_names.backup1 = 6
    node_names.safety_check1 = 5
    node_names.sel1 = 4
    node_names.backup0 = 3
    node_names.safety_check0 = 2
    node_names.sel0 = 1
    node_names.linkSeq0 = 0
    sel1.active = TRUE
    sel0.active = TRUE
    linkSeq0.internal_status = success
    linkSeq0.status = success
    backup0.active = FALSE
    safety_check0.active = TRUE
    sel0.internal_status = success
    sel0.status = success
    safety_check0.internal_status = success
    safety_check0.status = success
    backup0.internal_status = success
    backup0.status = invalid
    backup1.active = FALSE
    safety_check1.active = TRUE
    sel1.internal_status = success
    sel1.status = success
    safety_check1.internal_status = success
    safety_check1.status = success
    backup1.internal_status = success
    backup1.status = invalid
  -> State: 2.2 <-
    safety_check1.input_status = failure
    statuses[5] = failure
    statuses[6] = success
    backup1.active = TRUE
    safety_check1.internal_status = failure
    safety_check1.status = failure
    backup1.status = success
  -- Loop starts here
  -> State: 2.3 <-
    safety_check1.input_status = success
    statuses[5] = success
    statuses[6] = invalid
    backup1.active = FALSE
    safety_check1.internal_status = success
    safety_check1.status = success
    backup1.status = invalid
  -> State: 2.4 <-
