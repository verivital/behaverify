#{
    comments are anyhting inside the hashtag curly bracket set.
    Any time you see end_X, that is optional. It is there for readability, but can be removed.
    Note that there are many places where this is ommitted, for brevity, but basically any {} can be ended with an end_X
    run
    python3 ../../src/dsl_to_nuxmv.py ../../metamodel/behaverify.tx ./ANSR_ONNX.tree ./smv/ANSR_ONNX.smv
    then use nuXmv
    nuXmv -int ANSR_ONNX.smv
}#
configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
    neural #{neural means we are using a neural network }#
}
enumerations {
    #{ here you specify the enumerations used in the model}#
    #{
	for instance, if we wanted to specify enums Left, Down, Up, Right, we would uncomment the line below.
	Each value must be comma seperated.
	We could then use these values in equations and as variable values.
	These are mostly to make it easier to keep track of what variables mean.
    }#
    #{"Left", "Down", "Up", "Right"}#
    'Up', 'Down'
}
constants {
    #{here we declare constant values that can be used throughout the model. Note that you could set these to be equal to enmerations.}#
    x_min := 0, y_min := 0, x_max := 8, y_max := 8, tree_count := 2, vision_range := 4, tree_range := 2, y_change := 2, movement_cooldown := 10
} end_constants

variables {
    #{
	Here we define the variables do be used throughout the model.
	------------------------
	Variable Class: bl, env, local
	bl -> bl means this is a Blackboard Variable. Blackboard variables are under complete control of the tree. All nodes have access to all Blackboard variables.
	env -> env means this is an Environment Variable. Environment variables can be influenced by the tree, but can change without the tree doing anything. Nodes can access these using special syntax.
	local -> local means this is a Local Varriable. Local variables represent variables unique to a specifc node. This information is *not* shared across the tree.
	------------------------
	Variable Model: VAR, FROZENVAR, DEFINE (from nuXmv).
	VAR -> VAR means model this as a variable. A variable stores a value and can be updated over time.
	FROZENVAR -> FROZENVAR means model this as a frozen variable. A frozen variable picks an initial condition, and then does not change.
	DEFINE -> DEFINE means model this as a Macro or Deterministic Function. These can be used to reduce rewriting of common code, amongst some other things.
	------------------------
	Variable Domain: INT, ENUM, BOOLEAN
	INT -> The variable is an Integer (some inconsistency with integer overflow right now). These can be declared as a range [min_val, max_val] or as as set {a, b, c, d, e}
	ENUM -> The variable is an Enumeration (string). These are declared as a set {'a', 'b', 'c'}
	BOOLEAN -> The variable is a Boolean. These are declaredas BOOLEAN.
	------------------------
	Each variable has an assign statement. For VAR and FROZENVAR this determines the initial value. For DEFINE, this is treated as a definition.
	------------------------
	An assign statement consists of the following:
	Any number of Case-Result pairs
	Exactly 1 Result.
	The Case-Result pairs are ordered. The result for the first Case which evaluates to True is used as the value.
	If None of the Cases are True, then the Default Result it used.
	If a Result has more that one value, E.G. {1, 2}, then we non-deterministically pick.
	------------------------
	Code statements are used to express code. All code statements are of the following form
	code_statement:
	(code_statement) |
	(function_name, value1, value2, ...) |
	constant
	;
	There's a bit more nuance to some of the function calls, but hopefully the idea is clear.
	------------------------
    }#
    variable {
	bl #{bl means this is a Blackboard Variable.}#
	prev_dest_x #{the name of this variable.}#
	VAR #{Model as real Variable}#
	[x_min, x_max] #{Integer variable with values between x_min and x_max}#
	assign {
	    result {
		x_min #{Initial value is x_min}#
	    }
	}
    }
    variable {bl prev_dest_y VAR [y_min, y_max] assign {result {(add, y_min, 1)}}}
    variable {bl cur_x VAR [x_min, x_max] assign {result {x_min}}}
    variable {bl cur_y VAR [y_min, y_max] assign {result {y_min}}}
    variable {bl dest_x VAR [x_min, x_max] assign {result {x_min}}}
    variable {bl dest_y VAR [y_min, y_max] assign {result {y_min}}}
    variable {bl dir VAR {'Up', 'Down'} assign {result {'Up'}}}
    variable {bl dir_int DEFINE INT assign {case {(eq, dir, 'Up')} result {1} result{-1}}} #{Here we see a DEFINE variable which is 1 when dir is 'Up' and -1 otherwise.}#
    variable {bl victory VAR BOOLEAN assign {result {False}}}
    variable {bl x_net NEURAL INT inputs {dest_x, prev_dest_x} num_outputs {1} source {'./x_net.onnx'}} #{Load a network from the specified source. Treat the outputs as integers.}#
    variable {bl y_net NEURAL INT inputs {dest_y, prev_dest_y, dir_int} num_outputs {1} source {'./y_net.onnx'}}
    variable {env tree_x array tree_count DEFINE INT default { assign{result{2}}} constant_index index_of{1} assign {result{5}}}
    variable {env tree_y array tree_count DEFINE INT default { assign{result{2}}} constant_index index_of{1} assign {result{5}}}
    variable {env tar_x VAR [x_min, x_max] assign {result {(loop, loop_var, [x_min, x_max] such_that True, loop_var)}}} #{Non-deterministically set tar_x to a value between x_min and x_max}#
    variable {env tar_y VAR [y_min, y_max] assign {result {(loop, loop_var, [y_min, y_max] such_that True, loop_var)}}}
    variable {env timer VAR [0, movement_cooldown] assign {result{movement_cooldown}}}
} end_variables

environment_update {
    #{Here we are defining how the environment variables update over time. These updates occur in order AFTER the tree ticks.}#
    variable_statement {
	tar_x #{Variable to update.}#
	assign {
	    case { (eq, timer, 0) } result {tar_x, (min, x_max, (add, tar_x, 1)), (max, x_min, (sub, tar_x, 1))}
	    result { tar_x }
	}
    }
    variable_statement {
	tar_y
	assign {
	    case { (eq, timer, 0) } result {tar_y, (min, y_max, (add, tar_y, 1)), (max, y_min, (sub, tar_y, 1))}
	    result { tar_y }
	} end_assign
    }
    variable_statement {
	timer
	assign {
	    case {(eq, timer, 0) } result {movement_cooldown}
	    result {(max, 0, (sub, timer, 1))}
	}
    }
    #{}#
} end_environment_update

checks {
    #{Check nodes. Success if condition is true, Failure otherwise.}#
    check {
	not_at_destination #{Name of the node.}#
	arguments {}
	read_variables {cur_x, cur_y, dest_x, dest_y} #{List all Blackboard Variables used in the computation.}#
	condition { (not, (and, (eq, cur_x, dest_x), (eq, cur_y, dest_y)))}
    }
    check {
	y_too_small
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (lt, cur_y, dest_y)}
    }
    check {
	y_too_big
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (gt, cur_y, dest_y)}
    }
    check {
	x_too_small
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (lt, cur_x, dest_x)}
    }
    check {
	x_too_big
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (gt, cur_x, dest_x)}
    }
} end_checks

environment_checks {
    #{Check nodes which use the environment.}#
    environment_check {
	target_in_sight
	arguments{}
	read_variables {cur_x, cur_y} end_read_variables #{List all Blackboard variables used in the computation.}#
	condition {
	    (and,
		(lte, (add, (abs, (sub, cur_x, tar_x)), (abs, (sub, cur_y, tar_y))), vision_range),
		(loop, loop_index, [0, (sub, tree_count, 1)] such_that True,
		    (or,
			(gt, (add, (abs, (sub, (index, tree_x, constant_index loop_index), tar_x)), (abs, (sub, (index, tree_y, constant_index loop_index), tar_y))), tree_range),
			(and, (eq, (index, tree_x, constant_index loop_index), cur_x), (eq, (index, tree_y, constant_index loop_index), cur_y)),
			(and, (eq, (index, tree_x, constant_index loop_index), tar_x), (eq, (index, tree_y, constant_index loop_index), tar_y)),
			(and, (lt, (index, tree_x, constant_index loop_index), cur_x), (lt, (index, tree_x, constant_index loop_index), tar_x)),
			(and, (lt, (index, tree_y, constant_index loop_index), cur_y), (lt, (index, tree_y, constant_index loop_index), tar_y)),
			(and, (gt, (index, tree_x, constant_index loop_index), cur_x), (gt, (index, tree_x, constant_index loop_index), tar_x)),
			(and, (gt, (index, tree_y, constant_index loop_index), cur_y), (gt, (index, tree_y, constant_index loop_index), tar_y))
		    )
		)
	    )
	} end_condition
    } end_environment_check
    #{constant_index the index can be computed exactly during compile time, allowing for much better model performance. Loop Variables are 'constant' in this sense.}#
} end_environment_checks

actions {
    #{ action nodes are defined here }#
    action {
	call_xy_net #{Name of the node.}#
	arguments{}
	local_variables {} end_local_variables
	read_variables {x_net, y_net} end_read_variables
	write_variables {dest_x, dest_y} end_write_variables
	initial_values {} end_initial_values #{Only used for local variables}#
	update {
	    #{These updates will happen in order. The return statement does NOT need to be the last statement. It can be placed anywhere, but must be present. It will also be evaluated in order.}#
	    variable_statement {
		dest_x #{Variable to update}#
		assign {
		    result {(max, x_min, (min, x_max, (index, x_net, 0)))}
		}
	    }
	    variable_statement {
		dest_y
		assign {
		    result {(max, y_min, (min, y_max, (index, y_net, 0)))}
		}
	    }
	    return_statement {
		#{Not very interesting in this case.}#
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	move
	arguments{delta_x := INT, delta_y := INT} #{This node is called with Arguments. This allows a single node declaration to have different behaviors in places in the tree}#
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {cur_x, cur_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		cur_x assign {result {(max, x_min, (min, x_max, (add, delta_x, cur_x)))}}
	    }
	    variable_statement {
		cur_y assign {result {(max, y_min, (min, y_max, (add, delta_y, cur_y)))}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	send_victory
	arguments{}
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {victory} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		victory assign {result {True}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	update_direction
	arguments{}
	local_variables { } end_local_variables
	read_variables {cur_y} end_read_variables
	write_variables {dir} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		dir
		assign {
		    case { (eq, cur_y, y_max)}
		    result {'Down'}
		    case { (eq, cur_y, y_min)}
		    result {'Up'}
		    result {dir}
		}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    }
    action {
	update_previous_destination
	arguments{}
	local_variables { } end_local_variables
	read_variables {cur_x, cur_y} end_read_variables
	write_variables {prev_dest_x, prev_dest_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		prev_dest_x assign {result {cur_x}}
	    }
	    variable_statement {
		prev_dest_y assign {result {cur_y}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
} end_actions


#{Subtrees are used to improve readability by letting you name snippets of trees. They can also be reused.}#
sub_trees {
    sub_tree {
	DESTINATION_SUBTREE #{Name of the subtree}#
	composite {
	    destination selector
	    children {
		not_at_destination {} #{Checks destination}#
		composite {
		    new_destination sequence
		    children {
			update_direction {} #{Updates the direction we're going in.}#
			call_xy_net {} #{Calls the neural networks}#
			update_previous_destination {} #{sets the current location to the previous destination.}#
		    }
		}
	    }
	}
    }
    sub_tree {
	MOVEMENT_SUBTREE
	composite {
	    destination_and_movement sequence
	    children {
		insert {DESTINATION_SUBTREE} #{Insert a subtree.}#
		composite {
		    movement selector
		    children {
			composite {
			    try_up sequence
			    children {
				y_too_small {}
				move {0, 1} #{These are the arguments for the node.}#
			    }
			}
			composite {
			    try_down sequence
			    children {
				y_too_big {}
				move {0, -1}
			    }
			}
			composite {
			    try_left sequence
			    children {
				x_too_big {}
				move {-1, 0}
			    }
			}
			composite {
			    try_right sequence
			    children {
				x_too_small {}
				move {1, 0}
			    }
			}
		    }
		}
	    }
	}
    }
} end_sub_trees

tree {
    composite {
	drone_control selector
	children {
	    composite {
		vision sequence
		children {
		    target_in_sight {}
		    send_victory {}
		    
		}
	    }
	    insert {MOVEMENT_SUBTREE}
	}
    }
} end_tree




tick_prerequisite { (not, victory) } end_tick_prerequisite
#{tick_prerequisite { True } end_tick_prerequisite}#
#{ if the condition is True, the tree ticks.
    If it is false, everything is done }#

specifications { #{ INVAR, LTL, and CTL specs go here }#
    CTLSPEC {(always_finally, victory at -1)}
    LTLSPEC {(finally_bounded, [0, 200], victory at -1)}
    #{CTLSPEC {(imply, (and, (eq, (index, tree_x 0, 0), 2), (eq, (index, tree_x 0, 1), 5), (eq, (index, tree_y 0, 0), 2), (eq, (index, tree_y 0, 1), 5)), (always_finally, victory -1))}}#
} end_specifications