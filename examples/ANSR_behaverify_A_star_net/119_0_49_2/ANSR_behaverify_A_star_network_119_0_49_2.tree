configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
    neural
}
enumerations {
    #{ here you specify the enumerations used in the model}#
    'left', 'right', 'up', 'down', 'no_action'
}
constants {
    #{ constants are used to synchronize values in a .tree file. }#
    #{ example := 0 }#
    #{ to use example elsewhere, simply type 'example' in place of any integer (quotes included) }#
    min_val := 0, max_val := 49, number_of_obstacles := 119, max_obstacle_size := 2
} end_constants

variables {
    #{ Variable declarations go here.
	it is suggested, but not required, that the order of declaration be
	Blackboard, Local, Environment.
	If variable B depends on variable A, then variable A MUST be declared before B.
    }#
    variable { bl drone_x VAR [min_val, max_val] assign{result{max_val}}}
    variable { bl drone_y VAR [min_val, max_val] assign{result{max_val}}}
    variable { bl destination_x VAR [min_val, max_val] assign{result{max_val}}}
    variable { bl destination_y VAR [min_val, max_val] assign{result{max_val}}}
    variable { bl cell_changed_var VAR BOOLEAN assign{result{False}}}
    variable { bl current_action VAR {'left', 'right', 'up', 'down', 'no_action'} assign{result{'no_action'}}}
    variable { bl network NEURAL classification {'left', 'right', 'up', 'down', 'no_action'} inputs {drone_x, drone_y, destination_x, destination_y}
	source {
	    'networks/DUMMY.onnx'
	}
    }
    #{##########################################}#
    variable { env obstacles DEFINE INT static array (mult, number_of_obstacles, 2) iterative_assign, index_var
	condition {(eq, index_var, 0)} assign{result{49}}condition {(eq, index_var, 1)} assign{result{46}}
condition {(eq, index_var, 2)} assign{result{49}}condition {(eq, index_var, 3)} assign{result{27}}
condition {(eq, index_var, 4)} assign{result{49}}condition {(eq, index_var, 5)} assign{result{18}}
condition {(eq, index_var, 6)} assign{result{49}}condition {(eq, index_var, 7)} assign{result{14}}
condition {(eq, index_var, 8)} assign{result{49}}condition {(eq, index_var, 9)} assign{result{13}}
condition {(eq, index_var, 10)} assign{result{49}}condition {(eq, index_var, 11)} assign{result{10}}
condition {(eq, index_var, 12)} assign{result{48}}condition {(eq, index_var, 13)} assign{result{44}}
condition {(eq, index_var, 14)} assign{result{48}}condition {(eq, index_var, 15)} assign{result{41}}
condition {(eq, index_var, 16)} assign{result{48}}condition {(eq, index_var, 17)} assign{result{36}}
condition {(eq, index_var, 18)} assign{result{48}}condition {(eq, index_var, 19)} assign{result{18}}
condition {(eq, index_var, 20)} assign{result{48}}condition {(eq, index_var, 21)} assign{result{13}}
condition {(eq, index_var, 22)} assign{result{48}}condition {(eq, index_var, 23)} assign{result{10}}
condition {(eq, index_var, 24)} assign{result{47}}condition {(eq, index_var, 25)} assign{result{12}}
condition {(eq, index_var, 26)} assign{result{46}}condition {(eq, index_var, 27)} assign{result{48}}
condition {(eq, index_var, 28)} assign{result{45}}condition {(eq, index_var, 29)} assign{result{49}}
condition {(eq, index_var, 30)} assign{result{45}}condition {(eq, index_var, 31)} assign{result{41}}
condition {(eq, index_var, 32)} assign{result{45}}condition {(eq, index_var, 33)} assign{result{36}}
condition {(eq, index_var, 34)} assign{result{45}}condition {(eq, index_var, 35)} assign{result{35}}
condition {(eq, index_var, 36)} assign{result{45}}condition {(eq, index_var, 37)} assign{result{31}}
condition {(eq, index_var, 38)} assign{result{44}}condition {(eq, index_var, 39)} assign{result{42}}
condition {(eq, index_var, 40)} assign{result{44}}condition {(eq, index_var, 41)} assign{result{37}}
condition {(eq, index_var, 42)} assign{result{44}}condition {(eq, index_var, 43)} assign{result{35}}
condition {(eq, index_var, 44)} assign{result{44}}condition {(eq, index_var, 45)} assign{result{34}}
condition {(eq, index_var, 46)} assign{result{44}}condition {(eq, index_var, 47)} assign{result{33}}
condition {(eq, index_var, 48)} assign{result{44}}condition {(eq, index_var, 49)} assign{result{31}}
condition {(eq, index_var, 50)} assign{result{43}}condition {(eq, index_var, 51)} assign{result{49}}
condition {(eq, index_var, 52)} assign{result{43}}condition {(eq, index_var, 53)} assign{result{48}}
condition {(eq, index_var, 54)} assign{result{43}}condition {(eq, index_var, 55)} assign{result{45}}
condition {(eq, index_var, 56)} assign{result{43}}condition {(eq, index_var, 57)} assign{result{33}}
condition {(eq, index_var, 58)} assign{result{43}}condition {(eq, index_var, 59)} assign{result{31}}
condition {(eq, index_var, 60)} assign{result{42}}condition {(eq, index_var, 61)} assign{result{36}}
condition {(eq, index_var, 62)} assign{result{41}}condition {(eq, index_var, 63)} assign{result{46}}
condition {(eq, index_var, 64)} assign{result{41}}condition {(eq, index_var, 65)} assign{result{1}}
condition {(eq, index_var, 66)} assign{result{40}}condition {(eq, index_var, 67)} assign{result{1}}
condition {(eq, index_var, 68)} assign{result{40}}condition {(eq, index_var, 69)} assign{result{0}}
condition {(eq, index_var, 70)} assign{result{38}}condition {(eq, index_var, 71)} assign{result{0}}
condition {(eq, index_var, 72)} assign{result{36}}condition {(eq, index_var, 73)} assign{result{46}}
condition {(eq, index_var, 74)} assign{result{35}}condition {(eq, index_var, 75)} assign{result{46}}
condition {(eq, index_var, 76)} assign{result{35}}condition {(eq, index_var, 77)} assign{result{3}}
condition {(eq, index_var, 78)} assign{result{34}}condition {(eq, index_var, 79)} assign{result{16}}
condition {(eq, index_var, 80)} assign{result{33}}condition {(eq, index_var, 81)} assign{result{49}}
condition {(eq, index_var, 82)} assign{result{33}}condition {(eq, index_var, 83)} assign{result{34}}
condition {(eq, index_var, 84)} assign{result{33}}condition {(eq, index_var, 85)} assign{result{33}}
condition {(eq, index_var, 86)} assign{result{32}}condition {(eq, index_var, 87)} assign{result{49}}
condition {(eq, index_var, 88)} assign{result{32}}condition {(eq, index_var, 89)} assign{result{48}}
condition {(eq, index_var, 90)} assign{result{32}}condition {(eq, index_var, 91)} assign{result{40}}
condition {(eq, index_var, 92)} assign{result{32}}condition {(eq, index_var, 93)} assign{result{39}}
condition {(eq, index_var, 94)} assign{result{32}}condition {(eq, index_var, 95)} assign{result{3}}
condition {(eq, index_var, 96)} assign{result{31}}condition {(eq, index_var, 97)} assign{result{48}}
condition {(eq, index_var, 98)} assign{result{31}}condition {(eq, index_var, 99)} assign{result{16}}
condition {(eq, index_var, 100)} assign{result{30}}condition {(eq, index_var, 101)} assign{result{32}}
condition {(eq, index_var, 102)} assign{result{30}}condition {(eq, index_var, 103)} assign{result{31}}
condition {(eq, index_var, 104)} assign{result{30}}condition {(eq, index_var, 105)} assign{result{16}}
condition {(eq, index_var, 106)} assign{result{29}}condition {(eq, index_var, 107)} assign{result{39}}
condition {(eq, index_var, 108)} assign{result{29}}condition {(eq, index_var, 109)} assign{result{38}}
condition {(eq, index_var, 110)} assign{result{29}}condition {(eq, index_var, 111)} assign{result{32}}
condition {(eq, index_var, 112)} assign{result{27}}condition {(eq, index_var, 113)} assign{result{2}}
condition {(eq, index_var, 114)} assign{result{27}}condition {(eq, index_var, 115)} assign{result{1}}
condition {(eq, index_var, 116)} assign{result{27}}condition {(eq, index_var, 117)} assign{result{0}}
condition {(eq, index_var, 118)} assign{result{26}}condition {(eq, index_var, 119)} assign{result{1}}
condition {(eq, index_var, 120)} assign{result{25}}condition {(eq, index_var, 121)} assign{result{49}}
condition {(eq, index_var, 122)} assign{result{24}}condition {(eq, index_var, 123)} assign{result{27}}
condition {(eq, index_var, 124)} assign{result{24}}condition {(eq, index_var, 125)} assign{result{1}}
condition {(eq, index_var, 126)} assign{result{24}}condition {(eq, index_var, 127)} assign{result{0}}
condition {(eq, index_var, 128)} assign{result{22}}condition {(eq, index_var, 129)} assign{result{34}}
condition {(eq, index_var, 130)} assign{result{22}}condition {(eq, index_var, 131)} assign{result{33}}
condition {(eq, index_var, 132)} assign{result{21}}condition {(eq, index_var, 133)} assign{result{49}}
condition {(eq, index_var, 134)} assign{result{21}}condition {(eq, index_var, 135)} assign{result{48}}
condition {(eq, index_var, 136)} assign{result{21}}condition {(eq, index_var, 137)} assign{result{47}}
condition {(eq, index_var, 138)} assign{result{21}}condition {(eq, index_var, 139)} assign{result{46}}
condition {(eq, index_var, 140)} assign{result{21}}condition {(eq, index_var, 141)} assign{result{36}}
condition {(eq, index_var, 142)} assign{result{19}}condition {(eq, index_var, 143)} assign{result{39}}
condition {(eq, index_var, 144)} assign{result{19}}condition {(eq, index_var, 145)} assign{result{38}}
condition {(eq, index_var, 146)} assign{result{18}}condition {(eq, index_var, 147)} assign{result{47}}
condition {(eq, index_var, 148)} assign{result{18}}condition {(eq, index_var, 149)} assign{result{39}}
condition {(eq, index_var, 150)} assign{result{18}}condition {(eq, index_var, 151)} assign{result{37}}
condition {(eq, index_var, 152)} assign{result{18}}condition {(eq, index_var, 153)} assign{result{7}}
condition {(eq, index_var, 154)} assign{result{17}}condition {(eq, index_var, 155)} assign{result{47}}
condition {(eq, index_var, 156)} assign{result{17}}condition {(eq, index_var, 157)} assign{result{37}}
condition {(eq, index_var, 158)} assign{result{17}}condition {(eq, index_var, 159)} assign{result{16}}
condition {(eq, index_var, 160)} assign{result{16}}condition {(eq, index_var, 161)} assign{result{18}}
condition {(eq, index_var, 162)} assign{result{16}}condition {(eq, index_var, 163)} assign{result{15}}
condition {(eq, index_var, 164)} assign{result{15}}condition {(eq, index_var, 165)} assign{result{30}}
condition {(eq, index_var, 166)} assign{result{15}}condition {(eq, index_var, 167)} assign{result{18}}
condition {(eq, index_var, 168)} assign{result{15}}condition {(eq, index_var, 169)} assign{result{14}}
condition {(eq, index_var, 170)} assign{result{13}}condition {(eq, index_var, 171)} assign{result{47}}
condition {(eq, index_var, 172)} assign{result{13}}condition {(eq, index_var, 173)} assign{result{10}}
condition {(eq, index_var, 174)} assign{result{12}}condition {(eq, index_var, 175)} assign{result{19}}
condition {(eq, index_var, 176)} assign{result{12}}condition {(eq, index_var, 177)} assign{result{14}}
condition {(eq, index_var, 178)} assign{result{11}}condition {(eq, index_var, 179)} assign{result{2}}
condition {(eq, index_var, 180)} assign{result{7}}condition {(eq, index_var, 181)} assign{result{20}}
condition {(eq, index_var, 182)} assign{result{7}}condition {(eq, index_var, 183)} assign{result{2}}
condition {(eq, index_var, 184)} assign{result{4}}condition {(eq, index_var, 185)} assign{result{31}}
condition {(eq, index_var, 186)} assign{result{4}}condition {(eq, index_var, 187)} assign{result{28}}
condition {(eq, index_var, 188)} assign{result{3}}condition {(eq, index_var, 189)} assign{result{47}}
condition {(eq, index_var, 190)} assign{result{3}}condition {(eq, index_var, 191)} assign{result{41}}
condition {(eq, index_var, 192)} assign{result{3}}condition {(eq, index_var, 193)} assign{result{22}}
condition {(eq, index_var, 194)} assign{result{3}}condition {(eq, index_var, 195)} assign{result{20}}
condition {(eq, index_var, 196)} assign{result{3}}condition {(eq, index_var, 197)} assign{result{19}}
condition {(eq, index_var, 198)} assign{result{3}}condition {(eq, index_var, 199)} assign{result{10}}
condition {(eq, index_var, 200)} assign{result{3}}condition {(eq, index_var, 201)} assign{result{8}}
condition {(eq, index_var, 202)} assign{result{2}}condition {(eq, index_var, 203)} assign{result{47}}
condition {(eq, index_var, 204)} assign{result{2}}condition {(eq, index_var, 205)} assign{result{46}}
condition {(eq, index_var, 206)} assign{result{2}}condition {(eq, index_var, 207)} assign{result{40}}
condition {(eq, index_var, 208)} assign{result{2}}condition {(eq, index_var, 209)} assign{result{38}}
condition {(eq, index_var, 210)} assign{result{2}}condition {(eq, index_var, 211)} assign{result{21}}
condition {(eq, index_var, 212)} assign{result{2}}condition {(eq, index_var, 213)} assign{result{20}}
condition {(eq, index_var, 214)} assign{result{2}}condition {(eq, index_var, 215)} assign{result{18}}
condition {(eq, index_var, 216)} assign{result{2}}condition {(eq, index_var, 217)} assign{result{17}}
condition {(eq, index_var, 218)} assign{result{2}}condition {(eq, index_var, 219)} assign{result{15}}
condition {(eq, index_var, 220)} assign{result{2}}condition {(eq, index_var, 221)} assign{result{12}}
condition {(eq, index_var, 222)} assign{result{1}}condition {(eq, index_var, 223)} assign{result{47}}
condition {(eq, index_var, 224)} assign{result{1}}condition {(eq, index_var, 225)} assign{result{37}}
condition {(eq, index_var, 226)} assign{result{1}}condition {(eq, index_var, 227)} assign{result{36}}
condition {(eq, index_var, 228)} assign{result{1}}condition {(eq, index_var, 229)} assign{result{25}}
condition {(eq, index_var, 230)} assign{result{1}}condition {(eq, index_var, 231)} assign{result{8}}
condition {(eq, index_var, 232)} assign{result{1}}condition {(eq, index_var, 233)} assign{result{7}}
condition {(eq, index_var, 234)} assign{result{1}}condition {(eq, index_var, 235)} assign{result{4}}
condition {(eq, index_var, 236)} assign{result{1}}condition {(eq, index_var, 237)} assign{result{1}}
condition {(eq, index_var, 238)} assign{result{0}}condition {(eq, index_var, 239)} assign{result{27}}

	assign{result{0}}
    }
    variable { env obstacle_sizes DEFINE INT static array number_of_obstacles iterative_assign, index_var
	
condition {(eq, index_var, 0)} assign{result{1}}
condition {(eq, index_var, 1)} assign{result{1}}
condition {(eq, index_var, 2)} assign{result{1}}
condition {(eq, index_var, 3)} assign{result{1}}
condition {(eq, index_var, 4)} assign{result{1}}
condition {(eq, index_var, 5)} assign{result{1}}
condition {(eq, index_var, 6)} assign{result{1}}
condition {(eq, index_var, 7)} assign{result{1}}
condition {(eq, index_var, 8)} assign{result{1}}
condition {(eq, index_var, 9)} assign{result{1}}
condition {(eq, index_var, 10)} assign{result{1}}
condition {(eq, index_var, 11)} assign{result{1}}
condition {(eq, index_var, 12)} assign{result{1}}
condition {(eq, index_var, 13)} assign{result{1}}
condition {(eq, index_var, 14)} assign{result{1}}
condition {(eq, index_var, 15)} assign{result{1}}
condition {(eq, index_var, 16)} assign{result{1}}
condition {(eq, index_var, 17)} assign{result{1}}
condition {(eq, index_var, 18)} assign{result{1}}
condition {(eq, index_var, 19)} assign{result{1}}
condition {(eq, index_var, 20)} assign{result{1}}
condition {(eq, index_var, 21)} assign{result{1}}
condition {(eq, index_var, 22)} assign{result{1}}
condition {(eq, index_var, 23)} assign{result{1}}
condition {(eq, index_var, 24)} assign{result{1}}
condition {(eq, index_var, 25)} assign{result{1}}
condition {(eq, index_var, 26)} assign{result{1}}
condition {(eq, index_var, 27)} assign{result{2}}
condition {(eq, index_var, 28)} assign{result{1}}
condition {(eq, index_var, 29)} assign{result{1}}
condition {(eq, index_var, 30)} assign{result{1}}
condition {(eq, index_var, 31)} assign{result{1}}
condition {(eq, index_var, 32)} assign{result{1}}
condition {(eq, index_var, 33)} assign{result{1}}
condition {(eq, index_var, 34)} assign{result{1}}
condition {(eq, index_var, 35)} assign{result{1}}
condition {(eq, index_var, 36)} assign{result{1}}
condition {(eq, index_var, 37)} assign{result{1}}
condition {(eq, index_var, 38)} assign{result{1}}
condition {(eq, index_var, 39)} assign{result{1}}
condition {(eq, index_var, 40)} assign{result{1}}
condition {(eq, index_var, 41)} assign{result{1}}
condition {(eq, index_var, 42)} assign{result{1}}
condition {(eq, index_var, 43)} assign{result{1}}
condition {(eq, index_var, 44)} assign{result{1}}
condition {(eq, index_var, 45)} assign{result{1}}
condition {(eq, index_var, 46)} assign{result{1}}
condition {(eq, index_var, 47)} assign{result{1}}
condition {(eq, index_var, 48)} assign{result{1}}
condition {(eq, index_var, 49)} assign{result{1}}
condition {(eq, index_var, 50)} assign{result{1}}
condition {(eq, index_var, 51)} assign{result{1}}
condition {(eq, index_var, 52)} assign{result{1}}
condition {(eq, index_var, 53)} assign{result{1}}
condition {(eq, index_var, 54)} assign{result{1}}
condition {(eq, index_var, 55)} assign{result{1}}
condition {(eq, index_var, 56)} assign{result{1}}
condition {(eq, index_var, 57)} assign{result{1}}
condition {(eq, index_var, 58)} assign{result{1}}
condition {(eq, index_var, 59)} assign{result{1}}
condition {(eq, index_var, 60)} assign{result{1}}
condition {(eq, index_var, 61)} assign{result{1}}
condition {(eq, index_var, 62)} assign{result{1}}
condition {(eq, index_var, 63)} assign{result{1}}
condition {(eq, index_var, 64)} assign{result{1}}
condition {(eq, index_var, 65)} assign{result{1}}
condition {(eq, index_var, 66)} assign{result{1}}
condition {(eq, index_var, 67)} assign{result{1}}
condition {(eq, index_var, 68)} assign{result{1}}
condition {(eq, index_var, 69)} assign{result{1}}
condition {(eq, index_var, 70)} assign{result{1}}
condition {(eq, index_var, 71)} assign{result{1}}
condition {(eq, index_var, 72)} assign{result{1}}
condition {(eq, index_var, 73)} assign{result{1}}
condition {(eq, index_var, 74)} assign{result{1}}
condition {(eq, index_var, 75)} assign{result{1}}
condition {(eq, index_var, 76)} assign{result{1}}
condition {(eq, index_var, 77)} assign{result{1}}
condition {(eq, index_var, 78)} assign{result{1}}
condition {(eq, index_var, 79)} assign{result{1}}
condition {(eq, index_var, 80)} assign{result{1}}
condition {(eq, index_var, 81)} assign{result{1}}
condition {(eq, index_var, 82)} assign{result{1}}
condition {(eq, index_var, 83)} assign{result{1}}
condition {(eq, index_var, 84)} assign{result{1}}
condition {(eq, index_var, 85)} assign{result{1}}
condition {(eq, index_var, 86)} assign{result{1}}
condition {(eq, index_var, 87)} assign{result{1}}
condition {(eq, index_var, 88)} assign{result{1}}
condition {(eq, index_var, 89)} assign{result{1}}
condition {(eq, index_var, 90)} assign{result{1}}
condition {(eq, index_var, 91)} assign{result{1}}
condition {(eq, index_var, 92)} assign{result{1}}
condition {(eq, index_var, 93)} assign{result{1}}
condition {(eq, index_var, 94)} assign{result{1}}
condition {(eq, index_var, 95)} assign{result{1}}
condition {(eq, index_var, 96)} assign{result{1}}
condition {(eq, index_var, 97)} assign{result{1}}
condition {(eq, index_var, 98)} assign{result{1}}
condition {(eq, index_var, 99)} assign{result{1}}
condition {(eq, index_var, 100)} assign{result{1}}
condition {(eq, index_var, 101)} assign{result{1}}
condition {(eq, index_var, 102)} assign{result{1}}
condition {(eq, index_var, 103)} assign{result{1}}
condition {(eq, index_var, 104)} assign{result{1}}
condition {(eq, index_var, 105)} assign{result{1}}
condition {(eq, index_var, 106)} assign{result{1}}
condition {(eq, index_var, 107)} assign{result{1}}
condition {(eq, index_var, 108)} assign{result{1}}
condition {(eq, index_var, 109)} assign{result{1}}
condition {(eq, index_var, 110)} assign{result{1}}
condition {(eq, index_var, 111)} assign{result{1}}
condition {(eq, index_var, 112)} assign{result{1}}
condition {(eq, index_var, 113)} assign{result{1}}
condition {(eq, index_var, 114)} assign{result{1}}
condition {(eq, index_var, 115)} assign{result{1}}
condition {(eq, index_var, 116)} assign{result{1}}
condition {(eq, index_var, 117)} assign{result{1}}
condition {(eq, index_var, 118)} assign{result{1}}
condition {(eq, index_var, 119)} assign{result{1}}

	assign{result{0}}
    }
    variable { env executing_action VAR {'left', 'right', 'up', 'down', 'no_action'} assign{result{'no_action'}}}
} end_variables

environment_update {
} end_environment_update

checks {
    check {
	cell_changed
	arguments {}
	read_variables {cell_changed_var}
	condition {cell_changed_var}
    }
    check {
	destination_reached
	arguments {}
	read_variables {destination_x, destination_y, drone_x, drone_y}
	condition {(and, (eq, destination_x, drone_x), (eq, destination_y, drone_y))}
    }
} end_checks

environment_checks {
} end_environment_checks

actions {
    action {
	new_destination
	arguments{}
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables {destination_x, destination_y } end_write_variables
	initial_values {} end_initial_values
	update {
	    read_environment {
		function_get_new_destination
		condition {True}
		variable_statement {
		    destination_x
		    assign {
			result {(loop, loop_var, [min_val, max_val] such_that True, loop_var)}
		    }
		}
		variable_statement {
		    destination_y
		    assign {
			result {(loop, loop_var, [min_val, max_val] such_that True, loop_var)}
		    }
		}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	next_action
	arguments{}
	local_variables {} end_local_variables
	read_variables {network, drone_x, drone_y, destination_x, destination_y} end_read_variables
	write_variables {cell_changed_var, current_action} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		cell_changed_var
		assign {
		    result {False}
		}
	    }
	    variable_statement {
		current_action
		assign {result{network}}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	read_position
	arguments{}
	local_variables {} end_local_variables
	read_variables {current_action} end_read_variables
	write_variables { drone_x, drone_y, cell_changed_var } end_write_variables
	initial_values {} end_initial_values
	update {
	    read_environment {
		function_get_position
		#{
		    condition_variable {cell_changed_var}
		    condition {non_determinism, True}
		}#
		condition {True}
		variable_statement {
		    cell_changed_var
		    assign {result{True}}
		}
		variable_statement {
		    drone_x
		    assign {
			case {(eq, current_action, 'left')} result { (max, min_val, (sub, drone_x, 1))}
			case {(eq, current_action, 'right')} result { (min, max_val, (add, drone_x, 1))}
			result { drone_x}
		    }
		}
		variable_statement {
		    drone_y
		    assign {
			case {(eq, current_action, 'down')} result { (max, min_val, (sub, drone_y, 1))}
			case {(eq, current_action, 'up')} result { (min, max_val, (add, drone_y, 1))}
			result { drone_y}
		    }
		}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	send_action
	arguments{}
	local_variables {} end_local_variables
	read_variables {current_action} end_read_variables
	write_variables {} end_write_variables
	initial_values {} end_initial_values
	update {
	    write_environment {
		function_send_action
		variable_statement {
		    executing_action
		    assign {
			result {current_action}
		    }
		}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
} end_actions

sub_trees {#{ subtrees go here. }#} end_sub_trees

tree {
    composite {
	drone_control parallel policy success_on_all
	children {
	    read_position {}
	    composite {
		destination_sequence sequence
		children {
		    destination_reached {}
		    new_destination {}
		}
	    }
	    composite {
		action_sequence sequence
		children {
		    cell_changed {}
		    next_action {}
		}
	    }
	    send_action {}
	}
    }
} end_tree

tick_prerequisite { (True) } end_tick_prerequisite

specifications {
    INVARSPEC {
	(not,
	    (or,
		(loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
		    (and,
			(lte, drone_x, (index, obstacles, constant_index (mult, loop_var, 2))),
			(gte, drone_x, (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
			(lte, drone_y, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
			(gte, drone_y, (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
		    )
		)
	    )
	)
    }
    #{
	CTLSPEC {
	    (implies,
		(always_globally, (always_finally, cell_changed_var at 1)),
		(always_globally, (always_finally, (and,
			    (eq, drone_x at 1, destination_x at 0),
			    (eq, drone_y at 1, destination_y at 0)
			)))
	    )
	}
    }#
    CTLSPEC {
	(always_globally,
	    (
		(or,
		    (always_finally,
			(and,
			    (eq, drone_x at 1, destination_x at 0),
			    (eq, drone_y at 1, destination_y at 0)
			)
		    ),
		    (loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
			(and,
			    (lte, destination_x at 0, (index, obstacles, constant_index (mult, loop_var, 2))),
			    (gte, destination_x at 0, (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
			    (lte, destination_y at 0, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
			    (gte, destination_y at 0, (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
			)
		    )
		)
	    )
	)
    }
} end_specifications