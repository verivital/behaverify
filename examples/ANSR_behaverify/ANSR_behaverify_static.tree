configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
}
enumerations {
    #{ here you specify the enumerations used in the model}#
    'left', 'right', 'up', 'down', 'no_action'
}
constants {
    #{ constants are used to synchronize values in a .tree file. }#
    #{ example := 0 }#
    #{ to use example elsewhere, simply type 'example' in place of any integer (quotes included) }#
    min_val := 0, max_val := 49, number_of_obstacles := 50, max_path_length := 100, max_obstacle_size := 3 
} end_constants

variables {
    #{ Variable declarations go here.
	it is suggested, but not required, that the order of declaration be
	Blackboard, Local, Environment.
	If variable B depends on variable A, then variable A MUST be declared before B.
    }#
    variable { bl drone_x VAR [min_val, max_val] assign{result{max_val}}}
    variable { bl drone_y VAR [min_val, max_val] assign{result{max_val}}}
    variable { bl path_point_reached_var VAR BOOLEAN assign{result{False}}}
    variable { bl current_action VAR {'left', 'right', 'up', 'down', 'no_action'} assign{result{'no_action'}}}
    variable { bl path_length VAR [0, max_path_length] assign{result{0}}}
    #{##########################################}#
    variable { env obstacles array (mult, number_of_obstacles, 2) DEFINE INT iterative_assign, index_var
	condition {(eq, index_var, 0)} assign{result{7}}condition {(eq, index_var, 1)} assign{result{39}}
condition {(eq, index_var, 2)} assign{result{9}}condition {(eq, index_var, 3)} assign{result{0}}
condition {(eq, index_var, 4)} assign{result{17}}condition {(eq, index_var, 5)} assign{result{2}}
condition {(eq, index_var, 6)} assign{result{12}}condition {(eq, index_var, 7)} assign{result{19}}
condition {(eq, index_var, 8)} assign{result{27}}condition {(eq, index_var, 9)} assign{result{2}}
condition {(eq, index_var, 10)} assign{result{29}}condition {(eq, index_var, 11)} assign{result{44}}
condition {(eq, index_var, 12)} assign{result{10}}condition {(eq, index_var, 13)} assign{result{25}}
condition {(eq, index_var, 14)} assign{result{35}}condition {(eq, index_var, 15)} assign{result{28}}
condition {(eq, index_var, 16)} assign{result{37}}condition {(eq, index_var, 17)} assign{result{1}}
condition {(eq, index_var, 18)} assign{result{0}}condition {(eq, index_var, 19)} assign{result{21}}
condition {(eq, index_var, 20)} assign{result{31}}condition {(eq, index_var, 21)} assign{result{1}}
condition {(eq, index_var, 22)} assign{result{20}}condition {(eq, index_var, 23)} assign{result{45}}
condition {(eq, index_var, 24)} assign{result{9}}condition {(eq, index_var, 25)} assign{result{3}}
condition {(eq, index_var, 26)} assign{result{12}}condition {(eq, index_var, 27)} assign{result{30}}
condition {(eq, index_var, 28)} assign{result{43}}condition {(eq, index_var, 29)} assign{result{47}}
condition {(eq, index_var, 30)} assign{result{27}}condition {(eq, index_var, 31)} assign{result{48}}
condition {(eq, index_var, 32)} assign{result{19}}condition {(eq, index_var, 33)} assign{result{0}}
condition {(eq, index_var, 34)} assign{result{22}}condition {(eq, index_var, 35)} assign{result{15}}
condition {(eq, index_var, 36)} assign{result{22}}condition {(eq, index_var, 37)} assign{result{10}}
condition {(eq, index_var, 38)} assign{result{35}}condition {(eq, index_var, 39)} assign{result{5}}
condition {(eq, index_var, 40)} assign{result{22}}condition {(eq, index_var, 41)} assign{result{43}}
condition {(eq, index_var, 42)} assign{result{9}}condition {(eq, index_var, 43)} assign{result{25}}
condition {(eq, index_var, 44)} assign{result{32}}condition {(eq, index_var, 45)} assign{result{32}}
condition {(eq, index_var, 46)} assign{result{10}}condition {(eq, index_var, 47)} assign{result{30}}
condition {(eq, index_var, 48)} assign{result{24}}condition {(eq, index_var, 49)} assign{result{10}}
condition {(eq, index_var, 50)} assign{result{44}}condition {(eq, index_var, 51)} assign{result{23}}
condition {(eq, index_var, 52)} assign{result{49}}condition {(eq, index_var, 53)} assign{result{29}}
condition {(eq, index_var, 54)} assign{result{35}}condition {(eq, index_var, 55)} assign{result{4}}
condition {(eq, index_var, 56)} assign{result{44}}condition {(eq, index_var, 57)} assign{result{25}}
condition {(eq, index_var, 58)} assign{result{42}}condition {(eq, index_var, 59)} assign{result{40}}
condition {(eq, index_var, 60)} assign{result{29}}condition {(eq, index_var, 61)} assign{result{16}}
condition {(eq, index_var, 62)} assign{result{7}}condition {(eq, index_var, 63)} assign{result{29}}
condition {(eq, index_var, 64)} assign{result{4}}condition {(eq, index_var, 65)} assign{result{19}}
condition {(eq, index_var, 66)} assign{result{8}}condition {(eq, index_var, 67)} assign{result{15}}
condition {(eq, index_var, 68)} assign{result{26}}condition {(eq, index_var, 69)} assign{result{22}}
condition {(eq, index_var, 70)} assign{result{33}}condition {(eq, index_var, 71)} assign{result{12}}
condition {(eq, index_var, 72)} assign{result{7}}condition {(eq, index_var, 73)} assign{result{31}}
condition {(eq, index_var, 74)} assign{result{7}}condition {(eq, index_var, 75)} assign{result{10}}
condition {(eq, index_var, 76)} assign{result{13}}condition {(eq, index_var, 77)} assign{result{30}}
condition {(eq, index_var, 78)} assign{result{34}}condition {(eq, index_var, 79)} assign{result{41}}
condition {(eq, index_var, 80)} assign{result{0}}condition {(eq, index_var, 81)} assign{result{29}}
condition {(eq, index_var, 82)} assign{result{6}}condition {(eq, index_var, 83)} assign{result{4}}
condition {(eq, index_var, 84)} assign{result{28}}condition {(eq, index_var, 85)} assign{result{49}}
condition {(eq, index_var, 86)} assign{result{6}}condition {(eq, index_var, 87)} assign{result{19}}
condition {(eq, index_var, 88)} assign{result{2}}condition {(eq, index_var, 89)} assign{result{1}}
condition {(eq, index_var, 90)} assign{result{7}}condition {(eq, index_var, 91)} assign{result{36}}
condition {(eq, index_var, 92)} assign{result{5}}condition {(eq, index_var, 93)} assign{result{16}}
condition {(eq, index_var, 94)} assign{result{39}}condition {(eq, index_var, 95)} assign{result{22}}
condition {(eq, index_var, 96)} assign{result{15}}condition {(eq, index_var, 97)} assign{result{18}}
condition {(eq, index_var, 98)} assign{result{9}}condition {(eq, index_var, 99)} assign{result{18}}
	assign{result{0}}
    }
    variable { env obstacle_sizes array number_of_obstacles DEFINE INT iterative_assign, index_var
	condition {(eq, index_var, 0)} assign{result{2}}
condition {(eq, index_var, 1)} assign{result{2}}
condition {(eq, index_var, 2)} assign{result{3}}
condition {(eq, index_var, 3)} assign{result{3}}
condition {(eq, index_var, 4)} assign{result{1}}
condition {(eq, index_var, 5)} assign{result{1}}
condition {(eq, index_var, 6)} assign{result{2}}
condition {(eq, index_var, 7)} assign{result{3}}
condition {(eq, index_var, 8)} assign{result{3}}
condition {(eq, index_var, 9)} assign{result{3}}
condition {(eq, index_var, 10)} assign{result{2}}
condition {(eq, index_var, 11)} assign{result{1}}
condition {(eq, index_var, 12)} assign{result{1}}
condition {(eq, index_var, 13)} assign{result{1}}
condition {(eq, index_var, 14)} assign{result{3}}
condition {(eq, index_var, 15)} assign{result{3}}
condition {(eq, index_var, 16)} assign{result{2}}
condition {(eq, index_var, 17)} assign{result{3}}
condition {(eq, index_var, 18)} assign{result{1}}
condition {(eq, index_var, 19)} assign{result{3}}
condition {(eq, index_var, 20)} assign{result{0}}
condition {(eq, index_var, 21)} assign{result{0}}
condition {(eq, index_var, 22)} assign{result{1}}
condition {(eq, index_var, 23)} assign{result{1}}
condition {(eq, index_var, 24)} assign{result{0}}
condition {(eq, index_var, 25)} assign{result{1}}
condition {(eq, index_var, 26)} assign{result{3}}
condition {(eq, index_var, 27)} assign{result{0}}
condition {(eq, index_var, 28)} assign{result{2}}
condition {(eq, index_var, 29)} assign{result{1}}
condition {(eq, index_var, 30)} assign{result{0}}
condition {(eq, index_var, 31)} assign{result{2}}
condition {(eq, index_var, 32)} assign{result{1}}
condition {(eq, index_var, 33)} assign{result{0}}
condition {(eq, index_var, 34)} assign{result{3}}
condition {(eq, index_var, 35)} assign{result{2}}
condition {(eq, index_var, 36)} assign{result{3}}
condition {(eq, index_var, 37)} assign{result{1}}
condition {(eq, index_var, 38)} assign{result{3}}
condition {(eq, index_var, 39)} assign{result{1}}
condition {(eq, index_var, 40)} assign{result{3}}
condition {(eq, index_var, 41)} assign{result{1}}
condition {(eq, index_var, 42)} assign{result{0}}
condition {(eq, index_var, 43)} assign{result{0}}
condition {(eq, index_var, 44)} assign{result{3}}
condition {(eq, index_var, 45)} assign{result{1}}
condition {(eq, index_var, 46)} assign{result{1}}
condition {(eq, index_var, 47)} assign{result{2}}
condition {(eq, index_var, 48)} assign{result{3}}
condition {(eq, index_var, 49)} assign{result{0}}
	assign{result{0}}
    }
    variable { env executing_action VAR {'left', 'right', 'up', 'down', 'no_action'} assign{result{'no_action'}}}
} end_variables

environment_update {
} end_environment_update

checks {
    check {
	path_point_reached
	arguments {}
	read_variables {path_point_reached_var}
	condition {path_point_reached_var}
    }
    check {
	path_ended
	arguments {}
	read_variables {path_length}
	condition {(eq, path_length, 0)}
    }
} end_checks

environment_checks {
    #{ check environment nodes are defined here }#
    #{
	environment_check {
	    z_idk
	    arguments{}
	    read_variables {} end_read_variables
	    condition { z } end_condition
	} end_environment_check
    }#
} end_environment_checks

actions {
    action {
	new_path
	arguments{}
	local_variables {} end_local_variables
	read_variables {} end_read_variables
	write_variables {path_length } end_write_variables
	initial_values {} end_initial_values
	update {
	    read_environment {
		function_get_new_path
		condition {True}
		variable_statement {
		    path_length
		    assign {
			result {(loop, loop_var, [1, max_path_length] such_that True, loop_var)}
		    }
		}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	next_path_point
	arguments{}
	local_variables {} end_local_variables
	read_variables {drone_x, drone_y} end_read_variables
	write_variables {path_point_reached_var, current_action} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		path_point_reached_var
		assign {
		    result {False}
		}
	    }
	    read_environment {
		function_get_next_point
		condition {True}
		variable_statement {
		    current_action
		    assign {
			result {
			    (if,
				(or,
				    (eq, drone_x, min_val),
				    (loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
					(and,
					    (lte, (sub, drone_x, 1), (index, obstacles, constant_index (mult, loop_var, 2))),
					    (gte, (sub, drone_x, 1), (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
					    (lte, drone_y, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
					    (gte, drone_y, (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
					)
				    )
				),
				'no_action',
				'left'
			    ),
			    (if,
				(or,
				    (eq, drone_x, max_val),
				    (loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
					(and,
					    (lte, (add, drone_x, 1), (index, obstacles, constant_index (mult, loop_var, 2))),
					    (gte, (add, drone_x, 1), (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
					    (lte, drone_y, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
					    (gte, drone_y, (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
					)
				    )
				),
				'no_action',
				'right'
			    ),
			    (if,
				(or,
				    (eq, drone_y, min_val),
				    (loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
					(and,
					    (lte, drone_x, (index, obstacles, constant_index (mult, loop_var, 2))),
					    (gte, drone_x, (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
					    (lte, (sub, drone_y, 1), (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
					    (gte, (sub, drone_y, 1), (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
					)
				    )
				),
				'no_action',
				'down'
			    ),
			    (if,
				(or,
				    (eq, drone_x, max_val),
				    (loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
					(and,
					    (lte, drone_x, (index, obstacles, constant_index (mult, loop_var, 2))),
					    (gte, drone_x, (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
					    (lte, (add, drone_y, 1), (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
					    (gte, (add, drone_y, 1), (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
					)
				    )
				),
				'no_action',
				'up'
			    )
			}
		    }
		}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	read_position
	arguments{}
	local_variables {} end_local_variables
	read_variables {current_action} end_read_variables
	write_variables { drone_x, drone_y, path_length, path_point_reached_var } end_write_variables
	initial_values {} end_initial_values
	update {
	    read_environment {
		function_get_position
		condition_variable {path_point_reached_var}
		condition {non_determinism, True}
		variable_statement {
		    drone_x
		    assign {
			case {(eq, current_action, 'left')} result { (max, min_val, (sub, drone_x, 1))}
			case {(eq, current_action, 'right')} result { (min, max_val, (add, drone_x, 1))}
			result { drone_x}
		    }
		}
		variable_statement {
		    drone_y
		    assign {
			case {(eq, current_action, 'down')} result { (max, min_val, (sub, drone_y, 1))}
			case {(eq, current_action, 'up')} result { (min, max_val, (add, drone_y, 1))}
			result { drone_y}
		    }
		}
		variable_statement {
		    path_length
		    assign {
			result {(max, 0, (sub, path_length, 1))}
		    }
		}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	send_action
	arguments{}
	local_variables {} end_local_variables
	read_variables {current_action} end_read_variables
	write_variables {} end_write_variables
	initial_values {} end_initial_values
	update {
	    write_environment {
		function_send_action
		variable_statement {
		    executing_action
		    assign {
			result {current_action}
		    }
		}
	    }
	    return_statement {
		result { success} end_result
	    } end_return_statement
	} end_update
    } end_action
} end_actions

sub_trees {#{ subtrees go here. }#} end_sub_trees

tree {
    composite {
	drone_control parallel policy success_on_all
	children {
	    read_position {}
	    composite {
		path_sequence sequence
		children {
		    path_ended {}
		    new_path {}
		}
	    }
	    composite {
		point_sequence sequence
		children {
		    path_point_reached {}
		    next_path_point {}
		}
	    }
	    send_action {}
	}
    }
} end_tree

tick_prerequisite { (True) } end_tick_prerequisite

specifications {
    INVARSPEC {
	(not,
	    (or,
		(loop, loop_var, [0, (sub, number_of_obstacles, 1)] such_that True,
		    (and,
			(lte, drone_x, (index, obstacles, constant_index (mult, loop_var, 2))),
			(gte, drone_x, (sub, (index, obstacles, constant_index (mult, loop_var, 2)), (index, obstacle_sizes, constant_index loop_var))),
			(lte, drone_y, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1))),
			(gte, drone_y, (sub, (index, obstacles, constant_index (add, (mult, loop_var, 2), 1)), (index, obstacle_sizes, constant_index loop_var)))
		    )
		)
	    )
	)
    }
    CTLSPEC {
	(implies,
	    (always_globally, (always_finally, path_point_reached_var)),
	    (always_globally, (always_finally, (eq, path_length at 1, 0)))
	)
    }
} end_specifications