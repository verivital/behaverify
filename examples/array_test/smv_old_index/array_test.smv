MODULE main
    VAR
        system : system_module;
--------------SPECIFICATIONS



--------------END OF SPECIFICATIONS

MODULE system_module
    CONSTANTS
        success, failure, running, invalid, nope, decrease, increase;
    DEFINE
        resume_from_here_in_subtree__controller := -3;
        controller.active := TRUE;
        --START OF BLACKBOARD DEFINITIONS
        foo_stage_0 := [foo_stage_0_index_0, foo_stage_0_index_1, foo_stage_0_index_2];
        foo_stage_1 := [foo_stage_1_index_0, foo_stage_1_index_1, foo_stage_1_index_2];
        foo_stage_1_index_0 := 
            case
                !(action_one.active) : foo_stage_0_index_0;
                0 = index_var_stage_1 :
                    case
                        (increase = action_one_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_0[index_var_stage_1] + 1));
                        (decrease = action_one_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_0[index_var_stage_1] - 1));
                        TRUE : foo_stage_0[index_var_stage_1];
                    esac;
                TRUE : foo_stage_0_index_0;
            esac;
        foo_stage_1_index_1 := 
            case
                !(action_one.active) : foo_stage_0_index_1;
                1 = index_var_stage_1 :
                    case
                        (increase = action_one_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_0[index_var_stage_1] + 1));
                        (decrease = action_one_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_0[index_var_stage_1] - 1));
                        TRUE : foo_stage_0[index_var_stage_1];
                    esac;
                TRUE : foo_stage_0_index_1;
            esac;
        foo_stage_1_index_2 := 
            case
                !(action_one.active) : foo_stage_0_index_2;
                2 = index_var_stage_1 :
                    case
                        (increase = action_one_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_0[index_var_stage_1] + 1));
                        (decrease = action_one_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_0[index_var_stage_1] - 1));
                        TRUE : foo_stage_0[index_var_stage_1];
                    esac;
                TRUE : foo_stage_0_index_2;
            esac;
        foo_stage_2 := [foo_stage_2_index_0, foo_stage_2_index_1, foo_stage_2_index_2];
        foo_stage_2_index_0 := 
            case
                !(action_two.active) : foo_stage_1_index_0;
                0 = index_var_stage_1 :
                    case
                        (increase = action_two_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_1[index_var_stage_1] * 2));
                        (decrease = action_two_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_1[index_var_stage_1] / 2));
                        TRUE : foo_stage_1[index_var_stage_1];
                    esac;
                0 = ((index_var_stage_1 + 1) mod 3) :
                    case
                        (increase = action_two_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_1[index_var_stage_1] * 2));
                        (decrease = action_two_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_1[index_var_stage_1] / 2));
                        TRUE : foo_stage_1[index_var_stage_1];
                    esac;
                TRUE : foo_stage_1_index_0;
            esac;
        foo_stage_2_index_1 := 
            case
                !(action_two.active) : foo_stage_1_index_1;
                1 = index_var_stage_1 :
                    case
                        (increase = action_two_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_1[index_var_stage_1] * 2));
                        (decrease = action_two_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_1[index_var_stage_1] / 2));
                        TRUE : foo_stage_1[index_var_stage_1];
                    esac;
                1 = ((index_var_stage_1 + 1) mod 3) :
                    case
                        (increase = action_two_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_1[index_var_stage_1] * 2));
                        (decrease = action_two_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_1[index_var_stage_1] / 2));
                        TRUE : foo_stage_1[index_var_stage_1];
                    esac;
                TRUE : foo_stage_1_index_1;
            esac;
        foo_stage_2_index_2 := 
            case
                !(action_two.active) : foo_stage_1_index_2;
                2 = index_var_stage_1 :
                    case
                        (increase = action_two_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_1[index_var_stage_1] * 2));
                        (decrease = action_two_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_1[index_var_stage_1] / 2));
                        TRUE : foo_stage_1[index_var_stage_1];
                    esac;
                2 = ((index_var_stage_1 + 1) mod 3) :
                    case
                        (increase = action_two_DOT_bar_stage_0[index_var_stage_1]) : min(10, (foo_stage_1[index_var_stage_1] * 2));
                        (decrease = action_two_DOT_bar_stage_0[index_var_stage_1]) : max(0, (foo_stage_1[index_var_stage_1] / 2));
                        TRUE : foo_stage_1[index_var_stage_1];
                    esac;
                TRUE : foo_stage_1_index_2;
            esac;
        trom_stage_0 := [trom_stage_0_index_0, trom_stage_0_index_1];
        trom_stage_0_index_0 :=
            case
                TRUE : (foo_stage_0[0] + foo_stage_0[1] + foo_stage_0[2]);
            esac;
        trom_stage_0_index_1 :=
            case
                TRUE : (foo_stage_0[0] * foo_stage_0[1] * foo_stage_0[2]);
            esac;
        index_var_stage_1 := 
            case
                !(move_index.active) : index_var_stage_0;
                TRUE : ((index_var_stage_0 + 1) mod 3);
            esac;
        action_one_DOT_bar_stage_0 := [action_one_DOT_bar_stage_0_index_0, action_one_DOT_bar_stage_0_index_1, action_one_DOT_bar_stage_0_index_2];
        action_one_DOT_bar_stage_1 := [action_one_DOT_bar_stage_1_index_0, action_one_DOT_bar_stage_1_index_1, action_one_DOT_bar_stage_1_index_2];
        action_two_DOT_bar_stage_0 := [action_two_DOT_bar_stage_0_index_0, action_two_DOT_bar_stage_0_index_1, action_two_DOT_bar_stage_0_index_2];
        action_two_DOT_bar_stage_1 := [action_two_DOT_bar_stage_1_index_0, action_two_DOT_bar_stage_1_index_1, action_two_DOT_bar_stage_1_index_2];
        action_two_DOT_bar_stage_2 := [action_two_DOT_bar_stage_2_index_0, action_two_DOT_bar_stage_2_index_1, action_two_DOT_bar_stage_2_index_2];
        --END OF BLACKBOARD DEFINITIONS
    VAR
        node_names : define_nodes;
        move_index : failure_DEFAULT_module();
        addition_more : addition_more_module(trom_stage_0);
        action_one : success_DEFAULT_module();
        try_option : composite_sequence_without_memory_2(addition_more, action_one);
        action_two : success_DEFAULT_module();
        controller : composite_selector_without_memory_3(move_index, try_option, action_two);
        --START OF BLACKBOARD VARIABLES DECLARATION
        foo_stage_0_index_0 : 0..10;
        foo_stage_0_index_1 : 0..10;
        foo_stage_0_index_2 : 0..10;
        index_var_stage_0 : 0..2;
        action_one_DOT_bar_stage_0_index_0 : {increase, decrease, nope};
        action_one_DOT_bar_stage_0_index_1 : {increase, decrease, nope};
        action_one_DOT_bar_stage_0_index_2 : {increase, decrease, nope};
        action_one_DOT_bar_stage_1_index_0 : {increase, decrease, nope};
        action_one_DOT_bar_stage_1_index_1 : {increase, decrease, nope};
        action_one_DOT_bar_stage_1_index_2 : {increase, decrease, nope};
        action_two_DOT_bar_stage_0_index_0 : {increase, decrease, nope};
        action_two_DOT_bar_stage_0_index_1 : {increase, decrease, nope};
        action_two_DOT_bar_stage_0_index_2 : {increase, decrease, nope};
        action_two_DOT_bar_stage_1_index_0 : {increase, decrease, nope};
        action_two_DOT_bar_stage_1_index_1 : {increase, decrease, nope};
        action_two_DOT_bar_stage_1_index_2 : {increase, decrease, nope};
        action_two_DOT_bar_stage_2_index_0 : {increase, decrease, nope};
        action_two_DOT_bar_stage_2_index_1 : {increase, decrease, nope};
        action_two_DOT_bar_stage_2_index_2 : {increase, decrease, nope};
        --END OF BLACKBOARD VARIABLES DECLARATION
    ASSIGN
        --START OF BLACKBOARD VARIABLES INITIALIZATION
        init(foo_stage_0_index_0) := 
            case
                TRUE : 0;
            esac;
        init(foo_stage_0_index_1) := 
            case
                TRUE : 1;
            esac;
        init(foo_stage_0_index_2) := 
            case
                TRUE : 2;
            esac;
        init(index_var_stage_0) := 
            case
                TRUE : {0, 1, 2};
            esac;
        init(action_one_DOT_bar_stage_0_index_0) := 
            case
                (0 = 0) : increase;
                (1 = 0) : decrease;
                TRUE : nope;
            esac;
        init(action_one_DOT_bar_stage_0_index_1) := 
            case
                (0 = 1) : increase;
                (1 = 1) : decrease;
                TRUE : nope;
            esac;
        init(action_one_DOT_bar_stage_0_index_2) := 
            case
                (0 = 2) : increase;
                (1 = 2) : decrease;
                TRUE : nope;
            esac;
        init(action_two_DOT_bar_stage_0_index_0) := 
            case
                TRUE : increase;
            esac;
        init(action_two_DOT_bar_stage_0_index_1) := 
            case
                TRUE : {increase, decrease};
            esac;
        init(action_two_DOT_bar_stage_0_index_2) := 
            case
                FALSE : {increase, decrease};
                TRUE : nope;
            esac;
        --END OF BLACKBOARD VARIABLES INITIALIZATION
        --START OF BLACKBOARD VARIABLES TRANSITION
        next(foo_stage_0_index_0) := foo_stage_2_index_0;
        next(foo_stage_0_index_1) := foo_stage_2_index_1;
        next(foo_stage_0_index_2) := foo_stage_2_index_2;
        next(index_var_stage_0) := index_var_stage_1;
        next(action_one_DOT_bar_stage_0_index_0) := action_one_DOT_bar_stage_1_index_0;
        next(action_one_DOT_bar_stage_0_index_1) := action_one_DOT_bar_stage_1_index_1;
        next(action_one_DOT_bar_stage_0_index_2) := action_one_DOT_bar_stage_1_index_2;
        action_one_DOT_bar_stage_1_index_0 := 
            case
                !(action_one.active) : action_one_DOT_bar_stage_0_index_0;
                (increase = action_one_DOT_bar_stage_0[0]) : {decrease, nope};
                (decrease = action_one_DOT_bar_stage_0[0]) : {nope, increase};
                TRUE : {increase, decrease};
            esac;
        action_one_DOT_bar_stage_1_index_1 := 
            case
                !(action_one.active) : action_one_DOT_bar_stage_0_index_1;
                (increase = action_one_DOT_bar_stage_0[1]) : {decrease, nope};
                (decrease = action_one_DOT_bar_stage_0[1]) : {nope, increase};
                TRUE : {increase, decrease};
            esac;
        action_one_DOT_bar_stage_1_index_2 := 
            case
                !(action_one.active) : action_one_DOT_bar_stage_0_index_2;
                (increase = action_one_DOT_bar_stage_0[2]) : {decrease, nope};
                (decrease = action_one_DOT_bar_stage_0[2]) : {nope, increase};
                TRUE : {increase, decrease};
            esac;
        next(action_two_DOT_bar_stage_0_index_0) := action_two_DOT_bar_stage_2_index_0;
        next(action_two_DOT_bar_stage_0_index_1) := action_two_DOT_bar_stage_2_index_1;
        next(action_two_DOT_bar_stage_0_index_2) := action_two_DOT_bar_stage_2_index_2;
        action_two_DOT_bar_stage_1_index_0 := 
            case
                !(action_two.active) : action_two_DOT_bar_stage_0_index_0;
                (increase = action_two_DOT_bar_stage_0[0]) : {decrease, nope};
                (decrease = action_two_DOT_bar_stage_0[0]) : {nope, increase};
                TRUE : {increase, decrease};
            esac;
        action_two_DOT_bar_stage_1_index_1 := 
            case
                !(action_two.active) : action_two_DOT_bar_stage_0_index_1;
                (increase = action_two_DOT_bar_stage_0[1]) : {decrease, nope};
                (decrease = action_two_DOT_bar_stage_0[1]) : {nope, increase};
                TRUE : {increase, decrease};
            esac;
        action_two_DOT_bar_stage_1_index_2 := 
            case
                !(action_two.active) : action_two_DOT_bar_stage_0_index_2;
                (increase = action_two_DOT_bar_stage_0[2]) : {decrease, nope};
                (decrease = action_two_DOT_bar_stage_0[2]) : {nope, increase};
                TRUE : {increase, decrease};
            esac;
        action_two_DOT_bar_stage_2_index_0 := 
            case
                !(action_two.active) : action_two_DOT_bar_stage_1_index_0;
                0 = index_var_stage_1 :
                    case
                        (increase = action_two_DOT_bar_stage_1[index_var_stage_1]) : {decrease, nope};
                        (decrease = action_two_DOT_bar_stage_1[index_var_stage_1]) : {nope, increase};
                        TRUE : {increase, decrease};
                    esac;
                TRUE : action_two_DOT_bar_stage_1_index_0;
            esac;
        action_two_DOT_bar_stage_2_index_1 := 
            case
                !(action_two.active) : action_two_DOT_bar_stage_1_index_1;
                1 = index_var_stage_1 :
                    case
                        (increase = action_two_DOT_bar_stage_1[index_var_stage_1]) : {decrease, nope};
                        (decrease = action_two_DOT_bar_stage_1[index_var_stage_1]) : {nope, increase};
                        TRUE : {increase, decrease};
                    esac;
                TRUE : action_two_DOT_bar_stage_1_index_1;
            esac;
        action_two_DOT_bar_stage_2_index_2 := 
            case
                !(action_two.active) : action_two_DOT_bar_stage_1_index_2;
                2 = index_var_stage_1 :
                    case
                        (increase = action_two_DOT_bar_stage_1[index_var_stage_1]) : {decrease, nope};
                        (decrease = action_two_DOT_bar_stage_1[index_var_stage_1]) : {nope, increase};
                        TRUE : {increase, decrease};
                    esac;
                TRUE : action_two_DOT_bar_stage_1_index_2;
            esac;
        --END OF BLACKBOARD VARIABLES TRANSITION

MODULE define_nodes
    DEFINE
        controller := 0;
        move_index := 1;
        try_option := 2;
        addition_more := 3;
        action_one := 4;
        action_two := 5;
MODULE composite_sequence_without_memory_2(child_0, child_1)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = success) : child_0.internal_status;
                !(child_1.internal_status = success) : child_1.internal_status;
                TRUE : success;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = success;
MODULE composite_selector_without_memory_3(child_0, child_1, child_2)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status :=
            case
                !(child_0.internal_status = failure) : child_0.internal_status;
                !(child_1.internal_status = failure) : child_1.internal_status;
                !(child_2.internal_status = failure) : child_2.internal_status;
                TRUE : failure;
            esac;
        child_0.active := active;
        child_1.active := child_0.status = failure;
        child_2.active := child_1.status = failure;
MODULE addition_more_module(trom_stage_0)
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := ((trom_stage_0[0] > trom_stage_0[1])) ? success : failure;
MODULE success_DEFAULT_module
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := success;
MODULE failure_DEFAULT_module
    CONSTANTS
        success, failure, running, invalid;
    DEFINE
        status := active ? internal_status : invalid;
        internal_status := failure;
