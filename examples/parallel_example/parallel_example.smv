MODULE main
	DEFINE
		max_active_node := 29;
		statuses := [root.status, d1.status, d2.status, p_a_s.status, d3.status, d4.status, d5.status, s1.status, p_a_u.status, d6.status, s2.status, d7.status, d8.status, p_o_s2.status, d9.status, d10.status, s3.status, p_o_s.status, d13.status, d14.status, d15.status, d16.status, s5.status, d19.status, d20.status, s4.status, d11.status, d12.status, d17.status, d18.status];
		parents := [-1, 0, 0, 0, 0, 3, 3, 3, 7, 7, 8, 8, 8, 8, 10, 10, 10, 10, 16, 16, 16, 17, 17, 22, 22, 13, 13, 13, 25, 25];
		leafs := {-3, 1, 2, 4, 5, 6, 9, 11, 12, 14, 15, 18, 19, 20, 21, 23, 24, 26, 27, 28, 29};
		selectors := {-3, 7, 10, 16, 22, 25};
		sequences := {-3, 0};
		parallels_synchronised_all := {-3, 3};
		parallels_unsynchronised_all := {-3, 8, 13, 17};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3, 3, 8, 13, 17};
		decorators := {-3};
		first_child := [1, -2, -2, 5, -2, -2, -2, 8, 10, -2, 14, -2, -2, 25, -2, -2, 18, 21, -2, -2, -2, -2, 23, -2, -2, 28, -2, -2, -2, -2];
		last_child := [4, -1, -1, 7, -1, -1, -1, 9, 13, -1, 17, -1, -1, 27, -1, -1, 20, 22, -1, -1, -1, -1, 24, -1, -1, 29, -1, -1, -1, -1];
		parallel_resume := [-2, -2, -2, parallel_resume_3, -2, -2, -2, -2, parallel_resume_8, -2, -2, -2, -2, parallel_resume_13, -2, -2, -2, parallel_resume_17, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2];
		parallel_resume_3 := 
			case
				(previous_node < 5) & !(parallel_resume_3_5 = -2) : parallel_resume_3_5;
				(previous_node < 6) & !(parallel_resume_3_6 = -2) : parallel_resume_3_6;
				(previous_node < 7) & !(parallel_resume_3_7 = -2) : parallel_resume_3_7;
				TRUE : parents[3];
			esac;
		parallel_resume_8 := 
			case
				(previous_node < 10) & !(parallel_resume_8_10 = -2) : parallel_resume_8_10;
				(previous_node < 11) & !(parallel_resume_8_11 = -2) : parallel_resume_8_11;
				(previous_node < 12) & !(parallel_resume_8_12 = -2) : parallel_resume_8_12;
				(previous_node < 13) & !(parallel_resume_8_13 = -2) : parallel_resume_8_13;
				TRUE : parents[8];
			esac;
		parallel_resume_17 := 
			case
				(previous_node < 21) & !(parallel_resume_17_21 = -2) : parallel_resume_17_21;
				(previous_node < 22) & !(parallel_resume_17_22 = -2) : parallel_resume_17_22;
				TRUE : parents[17];
			esac;
		parallel_resume_13 := 
			case
				(previous_node < 25) & !(parallel_resume_13_25 = -2) : parallel_resume_13_25;
				(previous_node < 26) & !(parallel_resume_13_26 = -2) : parallel_resume_13_26;
				(previous_node < 27) & !(parallel_resume_13_27 = -2) : parallel_resume_13_27;
				TRUE : parents[13];
			esac;
		parallel_resume_8_11 := 11;
		parallel_resume_8_12 := 12;
		parallel_resume_8_13 := 13;
		parallel_resume_17_21 := 21;
		parallel_resume_13_26 := 26;
		parallel_resume_13_27 := 27;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		resume_node : -1..max_active_node;
		previous_status : {running, success, failure, invalid};
		parallel_resume_3_5 : {-2, 5};
		parallel_resume_3_6 : {-2, 6};
		parallel_resume_3_7 : {-2, 7, 8, 9};
		parallel_resume_8_10 : {10, 14, 15, 16, 18, 19, 20, 17};
		parallel_resume_17_22 : {22, 23, 24};
		parallel_resume_13_25 : {25, 28, 29};
		root : node_sequence(active_node, 0, previous_status, 4, previous_node);
		d1 : node_default(active_node, 1);
		d2 : node_default(active_node, 2);
		p_a_s : node_parallel(active_node, 3, previous_status, 7, previous_node, TRUE, TRUE, parallel_resume_3);
		d3 : node_default(active_node, 4);
		d4 : node_default(active_node, 5);
		d5 : node_default(active_node, 6);
		s1 : node_selector(active_node, 7, previous_status, 9, previous_node);
		p_a_u : node_parallel(active_node, 8, previous_status, 13, previous_node, FALSE, TRUE, parallel_resume_8);
		d6 : node_default(active_node, 9);
		s2 : node_selector(active_node, 10, previous_status, 17, previous_node);
		d7 : node_default(active_node, 11);
		d8 : node_default(active_node, 12);
		p_o_s2 : node_parallel(active_node, 13, previous_status, 27, previous_node, FALSE, FALSE, parallel_resume_13);
		d9 : node_default(active_node, 14);
		d10 : node_default(active_node, 15);
		s3 : node_selector(active_node, 16, previous_status, 20, previous_node);
		p_o_s : node_parallel(active_node, 17, previous_status, 22, previous_node, FALSE, FALSE, parallel_resume_17);
		d13 : node_default(active_node, 18);
		d14 : node_default(active_node, 19);
		d15 : node_default(active_node, 20);
		d16 : node_default(active_node, 21);
		s5 : node_selector(active_node, 22, previous_status, 24, previous_node);
		d19 : node_default(active_node, 23);
		d20 : node_default(active_node, 24);
		s4 : node_selector(active_node, 25, previous_status, 29, previous_node);
		d11 : node_default(active_node, 26);
		d12 : node_default(active_node, 27);
		d17 : node_default(active_node, 28);
		d18 : node_default(active_node, 29);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(resume_node) := -1;
		init(previous_status) := invalid;
		init(parallel_resume_3_5) := 5;
		init(parallel_resume_3_6) := 6;
		init(parallel_resume_3_7) := 7;
		init(parallel_resume_8_10) := 10;
		init(parallel_resume_17_22) := 22;
		init(parallel_resume_13_25) := 25;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(resume_node) :=
			case
				(previous_node < 0) : resume_node;
				!(previous_status = running) : -1;
				(resume_node = -1) : previous_node;
				(previous_node in parallels) : previous_node;
				TRUE : resume_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) & (resume_node = -1) : 0;
				(active_node = -1) & !(resume_node = -1) : resume_node;
				(active_node in leafs) : parents[active_node];
				(previous_status = invalid) : first_child[active_node];
				(previous_node = last_child[active_node]) : parents[active_node];
				(active_node in parallels) : parallel_resume[active_node];
				(active_node in sequences) & (previous_status = success) : min(max_active_node, previous_node + 1);
				(active_node in selectors) & (previous_status = failure) : min(max_active_node, previous_node + 1);
				TRUE : parents[active_node];
			esac;
		next(parallel_resume_3_5) :=
			case
				(parallel_resume_3_5 = 5) & (previous_node in {-2, 5}) & (previous_status = running) : previous_node;
				(previous_node = 5) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 5;
				TRUE : parallel_resume_3_5;
			esac;

		next(parallel_resume_3_6) :=
			case
				(parallel_resume_3_6 = 6) & (previous_node in {-2, 6}) & (previous_status = running) : previous_node;
				(previous_node = 6) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 6;
				TRUE : parallel_resume_3_6;
			esac;

		next(parallel_resume_3_7) :=
			case
				(parallel_resume_3_7 = 7) & (previous_node in {-2, 7, 8, 9}) & (previous_status = running) : previous_node;
				(previous_node = 7) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 7;
				TRUE : parallel_resume_3_7;
			esac;

		next(parallel_resume_8_10) :=
			case
				(parallel_resume_8_10 = 10) & (previous_node in {10, 14, 15, 16, 18, 19, 20, 17}) & (previous_status = running) : previous_node;
				(previous_node = 10) & (previous_status = success | previous_status = failure) : 10;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 10;
				TRUE : parallel_resume_8_10;
			esac;

		next(parallel_resume_17_22) :=
			case
				(parallel_resume_17_22 = 22) & (previous_node in {22, 23, 24}) & (previous_status = running) : previous_node;
				(previous_node = 22) & (previous_status = success | previous_status = failure) : 22;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 22;
				TRUE : parallel_resume_17_22;
			esac;

		next(parallel_resume_13_25) :=
			case
				(parallel_resume_13_25 = 25) & (previous_node in {25, 28, 29}) & (previous_status = running) : previous_node;
				(previous_node = 25) & (previous_status = success | previous_status = failure) : 25;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 25;
				TRUE : parallel_resume_13_25;
			esac;

MODULE node_sequence(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = failure) : failure;
				(id = active_node) & (last_child = previous_node) : success;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE node_parallel(active_node, id, previous_status, last_child, previous_node, synchronized, parallel_policy_all, resumer)
	DEFINE
		status :=
			case
				(id = active_node) & (resumer > id) : invalid;
				(id = active_node) & ((cur_status = failure) | (previous_status = failure)) : failure;
				(id = active_node) & (cur_status = running) & (previous_status = running) : running;
				(id = active_node) & !(parallel_policy_all) : success;
				(id = active_node) & (cur_status = success) & (previous_status = success) : success;
				(id = active_node) : running;
				TRUE : invalid;
			esac;
	VAR
		cur_status : {failure, running, success};
	ASSIGN
		init(cur_status) :=
			case
				(parallel_policy_all) : success;
				TRUE : running;
			esac;
		next(cur_status) :=
			case
				(id = active_node) & ((previous_status = failure) | (cur_status = failure)) : failure;
				(id = active_node) & (parallel_policy_all) & (previous_status = success) : cur_status;
				(id = active_node) & (parallel_policy_all) & (previous_status = running) : running;
				(id = active_node) & !(parallel_policy_all) & (previous_status = success) : success;
				(id = active_node) & !(parallel_policy_all) & (previous_status = running) : cur_status;
				(active_node = -1) & synchronized & (parallel_policy_all) & !(previous_status = running) : success;
				(active_node = -1) & synchronized & !(parallel_policy_all) & !(previous_status = running) : running;
				(active_node = -1) & !(synchronized) & (parallel_policy_all) : success;
				(active_node = -1) & !(synchronized) & !(parallel_policy_all) : running;
				TRUE : cur_status;
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		root := 0;
		d1 := 1;
		d2 := 2;
		p_a_s := 3;
		d3 := 4;
		d4 := 5;
		d5 := 6;
		s1 := 7;
		p_a_u := 8;
		d6 := 9;
		s2 := 10;
		d7 := 11;
		d8 := 12;
		p_o_s2 := 13;
		d9 := 14;
		d10 := 15;
		s3 := 16;
		p_o_s := 17;
		d13 := 18;
		d14 := 19;
		d15 := 20;
		d16 := 21;
		s5 := 22;
		d19 := 23;
		d20 := 24;
		s4 := 25;
		d11 := 26;
		d12 := 27;
		d17 := 28;
		d18 := 29;

