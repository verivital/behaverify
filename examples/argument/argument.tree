configuration {}
enumerations {
    'Hello', 'yes'
}
constants {
    'test0' := 'Hello',
    'test1' := 1,
    'test2' := False
} end_constants
variables {} end_variables
environment_update {} end_environment_update

checks {
    check {
	check_enum
	arguments{'arg_name' := ENUM}
	read_variables {}
	condition { (equal, 'arg_name', 'Hello')}
    }
    check {
	check_int
	arguments{'arg_name' := INT}
	read_variables {}
	condition { (equal, 'arg_name', 55)}
    }
    check {
	check_boolean
	arguments{'arg_name' := BOOLEAN}
	read_variables {}
	condition {'arg_name'}
    }
    check {
	check_all
	arguments{'enum0' := ENUM, 'enum1' := ENUM, 'int0' := INT, 'int1' := INT, 'bool0' := BOOLEAN, 'bool1' := BOOLEAN}
	read_variables {}
	condition { (and, (equal, 'enum0', 'enum1'), (equal, 'int0', 'int1'), (equal, 'bool0', 'bool1'))}
    }
} end_checks

environment_checks {} end_environment_checks
actions {} end_actions
sub_trees {#{ subtrees go here. }#} end_sub_trees

tree {
    composite {
	root_node
	parallel policy success_on_all
	children{
	    check_enum {'yes'}
	    check_enum {'test0'}
	    check_int {55}
	    check_int {'test1'}
	    check_boolean {True}
	    check_boolean {'test2'}
	    check_all {'yes', 'test0', 55, 'test1', True, 'test2'}
	}
    }
} end_tree
tick_prerequisite { True } end_tick_prerequisite
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications