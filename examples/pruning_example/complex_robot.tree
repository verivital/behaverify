#comment#
0-13 -> home
14-25 -> maze
26-40 -> target
#end_comment#

variables {
	#comment# Variable declarations go here #end_comment#
	variable { zone VAR {'home', 'maze', 'target'} } end_variable
	variable { forward DEFINE } end_variable
	variable { side VAR {-1, 1} } end_variable
	variable { have_flag VAR BOOLEAN } end_variable
} end_variables

local_variables {
	#comment# Local Variable declarations go here #end_comment#
	variable {tile_searched VAR BOOLEAN} end_variable
} end_local_variables

environment {
	environment_variables {
		#comment# Local Variable declarations go here #end_comment#
		environment_variable { x VAR [0, 40] } end_environment_variable
		environment_variable { y VAR [0, 40] } end_environment_variable
		environment_variable { hole_1 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_2 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_3 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_4 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_5 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_6 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_7 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_8 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_9 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { hole_10 FROZENVAR [0, 40] } end_environment_variable
		environment_variable { flag_x VAR [0, 40] } end_environment_variable
		environment_variable { flag_y VAR [0, 40] } end_environment_variable
		environment_variable { flag_returned DEFINE } end_environment_variable
		environment_variable { tile_progress VAR [0, 2] } end_environment_variable
		environment_variable { collided VAR BOOLEAN } end_environment_variable
	} end_environment_variables
	initial_values {
		#comment# initial values for environment #end_comment#
		environment_statement {
			env x result { 0 } end_result
		} end_environment_statement
		environment_statement {
			env y result { 0 } end_result
		} end_environment_statement
		environment_statement {
			env flag_x result { 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40 } end_result
		} end_environment_statement
		environment_statement {
			env flag_returned result { (and, have_flag, (less_than_or_equal, env x, 10)) } end_result
		} end_environment_statement
		environment_statement {
			env collided result { False } end_result
		} end_environment_statement
	} end_initial_values
	update_values {
		#comment# update values for environment #end_comment#
	} end_update_values
} end_environment

checks {
	#comment# check nodes are defined here #end_comment#
	check {
		in_maze
		read_variables { zone } end_read_variables
		condition { (equal, zone, 'maze') } end_condition
	} end_check
	check {
		flag_found
		read_variables { have_flag } end_read_variables
		condition { have_flag } end_condition
	} end_check
} end_checks

environment_checks {
	#comment# check environment nodes are defined here #end_comment#
	check_environment {
		flag_not_returned
		imports { 'complex_robot_environment' } end_imports
		python_function { from 'complex_robot_environment' 'check_flag_not_returned' args } end_python_function
		condition { (not, env flag_returned) } end_condition
	} end_check_environment
	check_environment {
		no_collision
		imports { 'complex_robot_environment' } end_imports
		python_function { from 'complex_robot_environment' 'check_no_collision' args } end_python_function
		condition { (not, env collided) } end_condition
	} end_check_environment
} end_environment_checks

actions {
	#comment# action nodes are defined here #end_comment#


	action {
		change_side
		imports { } end_imports
		read_variables {} end_read_variables
		write_variables { side } end_write_variables
		initial_values {
			variable_statement { side result { 1 } end_result } end_variable_statement
		} end_initial_values
		update {
			variable_statement {
				side
				case { (equal, side, 1) } end_case result { -1 } end_result
				result { 1 } end_result
			} end_variable_statement
			return_statement {
				result { success } end_result
			} end_return_statement
		} end_update
	} end_action
	
	action {
		go_forward
		imports { 'complex_robot_environment' } end_imports
		read_variables {} end_read_variables
		write_variables { forward } end_write_variables
		initial_values {
			variable_statement { forward case { have_flag } end_case result { -1 } end_result result { 1 } end_result } end_variable_statement
		} end_initial_values
		update {
			write_environment {
				python_function { from 'complex_robot_environment' 'go_forward' args forward } end_python_function
				update_values {
					environment_statement {
						env collided
						case { (and, (equal, env x, 0), (equal, forward, -1)) } end_case result { True } end_result
						case { (and, (equal, env x, 40), (equal, forward, 1)) } end_case result { True } end_result
						case {
							(or,
								(and,
									(or,
										(and, (equal, env x, 14), (equal, forward, 1)),
										(and, (equal, env x, 15), (equal, forward, -1))
									),
									(not_equal, env y, env hole_1)
								),
								(and,
									(or,
										(and, (equal, env x, 15), (equal, forward, 1)),
										(and, (equal, env x, 16), (equal, forward, -1))
									),
									(not_equal, env y, env hole_2)
								),
								(and,
									(or,
										(and, (equal, env x, 16), (equal, forward, 1)),
										(and, (equal, env x, 17), (equal, forward, -1))
									),
									(not_equal, env y, env hole_3)
								),
								(and,
									(or,
										(and, (equal, env x, 17), (equal, forward, 1)),
										(and, (equal, env x, 18), (equal, forward, -1))
									),
									(not_equal, env y, env hole_4)
								),
								(and,
									(or,
										(and, (equal, env x, 18), (equal, forward, 1)),
										(and, (equal, env x, 19), (equal, forward, -1))
									),
									(not_equal, env y, env hole_5)
								),
								(and,
									(or,
										(and, (equal, env x, 19), (equal, forward, 1)),
										(and, (equal, env x, 20), (equal, forward, -1))
									),
									(not_equal, env y, env hole_6)
								),
								(and,
									(or,
										(and, (equal, env x, 20), (equal, forward, 1)),
										(and, (equal, env x, 21), (equal, forward, -1))
									),
									(not_equal, env y, env hole_7)
								),
								(and,
									(or,
										(and, (equal, env x, 21), (equal, forward, 1)),
										(and, (equal, env x, 22), (equal, forward, -1))
									),
									(not_equal, env y, env hole_8)
								),
								(and,
									(or,
										(and, (equal, env x, 22), (equal, forward, 1)),
										(and, (equal, env x, 23), (equal, forward, -1))
									),
									(not_equal, env y, env hole_8)
								),
								(and,
									(or,
										(and, (equal, env x, 23), (equal, forward, 1)),
										(and, (equal, env x, 24), (equal, forward, -1))
									),
									(not_equal, env y, env hole_9)
								),
								(and,
									(or,
										(and, (equal, env x, 24), (equal, forward, 1)),
										(and, (equal, env x, 25), (equal, forward, -1))
									),
									(not_equal, env y, env hole_10)
								)
							)
						} end_case
						result { True } end_result
						result { False } end_result
					} end_environment_statement
					environment_statement {
						env x
						case { (and, (equal, env x, 0), (equal, forward, -1)) } end_case result { 0 } end_result
						case { (and, (equal, env x, 40), (equal, forward, 1)) } end_case result { 40 } end_result
						case {
							(or,
								(and,
									(or,
										(and, (equal, env x, 14), (equal, forward, 1)),
										(and, (equal, env x, 15), (equal, forward, -1))
									),
									(not_equal, env y, env hole_1)
								),
								(and,
									(or,
										(and, (equal, env x, 15), (equal, forward, 1)),
										(and, (equal, env x, 16), (equal, forward, -1))
									),
									(not_equal, env y, env hole_2)
								),
								(and,
									(or,
										(and, (equal, env x, 16), (equal, forward, 1)),
										(and, (equal, env x, 17), (equal, forward, -1))
									),
									(not_equal, env y, env hole_3)
								),
								(and,
									(or,
										(and, (equal, env x, 17), (equal, forward, 1)),
										(and, (equal, env x, 18), (equal, forward, -1))
									),
									(not_equal, env y, env hole_4)
								),
								(and,
									(or,
										(and, (equal, env x, 18), (equal, forward, 1)),
										(and, (equal, env x, 19), (equal, forward, -1))
									),
									(not_equal, env y, env hole_5)
								),
								(and,
									(or,
										(and, (equal, env x, 19), (equal, forward, 1)),
										(and, (equal, env x, 20), (equal, forward, -1))
									),
									(not_equal, env y, env hole_6)
								),
								(and,
									(or,
										(and, (equal, env x, 20), (equal, forward, 1)),
										(and, (equal, env x, 21), (equal, forward, -1))
									),
									(not_equal, env y, env hole_7)
								),
								(and,
									(or,
										(and, (equal, env x, 21), (equal, forward, 1)),
										(and, (equal, env x, 22), (equal, forward, -1))
									),
									(not_equal, env y, env hole_8)
								),
								(and,
									(or,
										(and, (equal, env x, 22), (equal, forward, 1)),
										(and, (equal, env x, 23), (equal, forward, -1))
									),
									(not_equal, env y, env hole_8)
								),
								(and,
									(or,
										(and, (equal, env x, 23), (equal, forward, 1)),
										(and, (equal, env x, 24), (equal, forward, -1))
									),
									(not_equal, env y, env hole_9)
								),
								(and,
									(or,
										(and, (equal, env x, 24), (equal, forward, 1)),
										(and, (equal, env x, 25), (equal, forward, -1))
									),
									(not_equal, env y, env hole_10)
								)
							)
						} end_case
						result { env x } end_result
						result { (addition, env x, forward) } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement {
				result { running } end_result
			} end_return_statement
		} end_update
	} end_action


	action {
		go_side
		imports { 'complex_robot_environment' } end_imports
		read_variables {side} end_read_variables
		write_variables {} end_write_variables
		initial_values {
		} end_initial_values
		update {
			write_environment {
				python_function { from 'complex_robot_environment' 'go_side' args side } end_python_function
				update_values {
					environment_statement {
						env collided
						case { (and, (equal, env y, 0), (equal, side, -1)) } end_case result { True } end_result
						case { (and, (equal, env y, 40), (equal, side, 1)) } end_case result { True } end_result
						result { False } end_result
					} end_environment_statement
					environment_statement {
						env y
						case { (and, (equal, env y, 0), (equal, side, -1)) } end_case result { 0 } end_result
						case { (and, (equal, env y, 40), (equal, side, 1)) } end_case result { 40 } end_result
						result { (addition, env y, side) } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement {
				result { running } end_result
			} end_return_statement
		} end_update
	} end_action


	
	action {
		search_tile
		imports { 'complex_robot_environment' } end_imports
		read_variables {} end_read_variables
		write_variables { have_flag } end_write_variables
		initial_values {
			variable_statement { have_flag result {False } end_result } end_variable_statement
			variable_statement { local tile_searched result { False } end_result } end_variable_statement
		} end_initial_values
		update {
			read_environment {
				python_function { from 'complex_robot_environment' 'search_tile' args } end_python_function
				condition { True } end_condition
				variable_environment_statement {
					local tile_searched
					case { (equal, env tile_progress, 2) } end_case result { True } end_result
					result { True, False } end_result
				} end_variable_environment_statement
				variable_environment_statement {
					have_flag
					case {have_flag} end_case result { True } end_result
					result { (and, local tile_searched, (equal, env x, env flag_x), (equal, env y, env flag_y)) } end_result
				} end_variable_environment_statement
			} end_read_environment
			write_environment {
				python_function { from 'complex_robot_environment' 'update_search' args (local tile_searched) } end_python_function
				update_values {
					environment_statement {
						env tile_progress
						case { local tile_searched } end_case result { 2 } end_result
						result { (min, 2, (addition, 1, env tile_progress)) } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement {
				case {local tile_searched} end_case result {success} end_result
				result { running } end_result
			} end_return_statement
		} end_update
	} end_action
	
	
	action {
		set_zone
		imports { 'complex_robot_environment' } end_imports
		read_variables {} end_read_variables
		write_variables { zone } end_write_variables
		initial_values {
			variable_statement { zone result { 'home' } end_result } end_variable_statement
		} end_initial_values
		update {
			read_environment {
				python_function { from 'complex_robot_environment' 'compute_zone' args } end_python_function
				condition { True } end_condition
				variable_environment_statement {
					zone
					case { (less_than_or_equal, env x, 13) } end_case result { 'home' } end_result
					case { (greater_than_or_equal, env x, 26) } end_case result { 'target' } end_result
					result { 'maze' } end_result
				} end_variable_environment_statement
			} end_read_environment
			return_statement {
				result { success } end_result
			} end_return_statement
		} end_update
	} end_action

} end_actions

sub_trees {
	sub_tree {
		sub_forward
		composite {
			try_forward
			sequence
			children {
				no_collision
				go_forward
			} end_children
		} end_composite
	} end_sub_tree

	sub_tree {
		sub_side
		composite {
			try_side
			sequence
			children {
				no_collision
				go_side
			} end_children
		} end_composite
	} end_sub_tree
} end_sub_trees


#comment# the tree is defined here. replace REPLACE_ME with the root node #end_comment#
tree {
composite {
	control
	parallel policy success_on_all
	children {
		set_zone
		composite {
			control_sequence
			sequence with_memory
			children {
				flag_not_returned
				composite {
					enter_maze
					selector
					children {
						in_maze
						go_forward
					} end_children
				} end_composite
				decorator {
					navigate_maze_decorator
					X_is_Y X failure Y running
					child
					composite {
						navigate_maze
						sequence
						children {
							in_maze
							decorator {
								move_through_maze_decorator
								X_is_Y X success Y running
								child
								composite {
									move_through_maze
									selector with_memory
									children {
										insert { sub_forward } end_insert
										insert { sub_side } end_insert
										change_side
									} end_children
								} end_composite
							} end_decorator
						} end_children
					} end_composite
				} end_decorator
				decorator {
					to_side_decorator
					X_is_Y X failure Y success
					child
					insert { sub_side } end_insert
				} end_decorator
				change_side
				composite {
					find_flag
					sequence
					children {
						flag_found
						composite {
							navigate_flag
							selector with_memory
							children {
								insert { sub_side } end_insert
								search_tile
								decorator {
									change_side_decorator
									X_is_Y X success Y failure
									child change_side
								} end_decorator
								decorator {
									next_row_decorator
									X_is_Y X running Y failure
									child go_forward
								} end_decorator
								search_tile
							} end_children
						} end_composite
					} end_children
				} end_composite
			} end_children
		} end_composite
	} end_children
} end_composite
} end_tree

#comment# this section is optional. you may remove it #end_comment#
tick_prerequisite {
#comment# if the condition is True, the tree ticks.
If it is false, everything is done #end_comment#
	True
} end_tick_prerequisite


specifications { #comment# INVAR, LTL, and CTL specs go here #end_comment# } end_specifications