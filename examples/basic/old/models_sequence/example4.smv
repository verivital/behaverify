MODULE main
	DEFINE
		max_active_node := 8;
		statuses := [example_4_sel1.status, leaf_1.status, leaf_2.status, leaf_3.status, leaf_4.status, leaf_5.status, leaf_6.status, leaf_7.status, leaf_8.status];
		parents := [-1, 0, 0, 0, 0, 0, 0, 0, 0];
		leafs := {-3, 1, 2, 3, 4, 5, 6, 7, 8};
		selectors := {-3, 0};
		sequences := {-3};
		parallels_synchronised_all := {-3};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3};
		decorators := {-3};
		first_child := [1, -2, -2, -2, -2, -2, -2, -2, -2];
		last_child := [8, -1, -1, -1, -1, -1, -1, -1, -1];
		next_node := [next_node_0, next_node_1, next_node_2, next_node_3, next_node_4, next_node_5, next_node_6, next_node_7, next_node_8];
		next_node_0 := 
			case
				(previous_status = running | previous_status = success) & (active_node = 0) : parents[0];
				(previous_node <1) : next_node_1;
				(previous_node <2) : next_node_2;
				(previous_node <3) : next_node_3;
				(previous_node <4) : next_node_4;
				(previous_node <5) : next_node_5;
				(previous_node <6) : next_node_6;
				(previous_node <7) : next_node_7;
				(previous_node <8) : next_node_8;
				TRUE : parents[0];
			esac;
		next_node_1 := 
			case
				!(active_node = 1) : 1;
				TRUE : parents[1];
			esac;
		next_node_2 := 
			case
				!(active_node = 2) : 2;
				TRUE : parents[2];
			esac;
		next_node_3 := 
			case
				!(active_node = 3) : 3;
				TRUE : parents[3];
			esac;
		next_node_4 := 
			case
				!(active_node = 4) : 4;
				TRUE : parents[4];
			esac;
		next_node_5 := 
			case
				!(active_node = 5) : 5;
				TRUE : parents[5];
			esac;
		next_node_6 := 
			case
				!(active_node = 6) : 6;
				TRUE : parents[6];
			esac;
		next_node_7 := 
			case
				!(active_node = 7) : 7;
				TRUE : parents[7];
			esac;
		next_node_8 := 
			case
				!(active_node = 8) : 8;
				TRUE : parents[8];
			esac;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		previous_status : {running, success, failure, invalid};
		example_4_sel1 : node_selector(active_node, 0, previous_status, 8, previous_node);
		leaf_1 : node_default(active_node, 1);
		leaf_2 : node_default(active_node, 2);
		leaf_3 : node_default(active_node, 3);
		leaf_4 : node_default(active_node, 4);
		leaf_5 : node_default(active_node, 5);
		leaf_6 : node_default(active_node, 6);
		leaf_7 : node_default(active_node, 7);
		leaf_8 : node_default(active_node, 8);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(previous_status) := invalid;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) : 0;
				TRUE : next_node[active_node];
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		example_4_sel1 := 0;
		leaf_1 := 1;
		leaf_2 := 2;
		leaf_3 := 3;
		leaf_4 := 4;
		leaf_5 := 5;
		leaf_6 := 6;
		leaf_7 := 7;
		leaf_8 := 8;
