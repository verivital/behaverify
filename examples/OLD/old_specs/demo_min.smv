MODULE am_task_SET_am_warning_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
		
MODULE am_task_SET_status_module(active_node, node_id, blackboard)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;

MODULE battery_management_task_SET_battery_level_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
		actual_var : 27..35;
	ASSIGN
		init(actual_var) := 31;
		next(actual_var) :=
			case
				(active_node = node_id) & (actual_var > 27) : actual_var - 1;
				TRUE : actual_var;
			esac;
		next(blackboard_var) :=
			case
				(active_node = node_id) : (actual_var);
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;


MODULE battery_management_task_SET_battery_low_warning_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
		actual_var : 27..35;
	ASSIGN
		init(actual_var) := 31;
		next(actual_var) :=
			case
				(active_node = node_id) & (actual_var > 27) : actual_var - 1;
				TRUE : actual_var;
			esac;
		next(blackboard_var) :=
			case
				(active_node = node_id) & (actual_var < 30) : 35;
				(active_node = node_id) & (actual_var >= 30) : 27;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;

MODULE battery_management_task_SET_status_module(active_node, node_id, blackboard)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;


MODULE battery_low_fs_CHECK_battery_low_warning_module(active_node, node_id, blackboard)
	VAR
       		result : boolean;
	INVAR
		result = (blackboard.variable[2] = 27);

MODULE surface_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE surface_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE surface_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;

MODULE surface_task_SET_status_module(active_node, node_id, blackboard)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;
MODULE waypoint_task_SET_p_mission_len_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_waypoints_completed_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_status_module(active_node, node_id, blackboard)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;

MODULE check_am_CHECK_am_warning_module(active_node, node_id, blackboard)
	VAR
       		result : boolean;
	INVAR
		result = (blackboard.variable[0] = 27);

MODULE speed_min_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_min_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_min_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_min_task_SET_status_module(active_node, node_id, blackboard)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;

MODULE speed_max_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_max_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_max_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_max_task_SET_status_module(active_node, node_id, blackboard)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;
MODULE loiter_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE loiter_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE loiter_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard)
	VAR
		blackboard_var : 27..35;
		blackboard_var_exists : boolean;
	ASSIGN
		next(blackboard_var) :=
			case
				(active_node = node_id) : 30;
				TRUE : 27..35;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE loiter_task_SET_status_module(active_node, node_id, blackboard)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;