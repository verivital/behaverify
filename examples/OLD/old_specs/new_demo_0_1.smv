MODULE other_info_module
	VAR
		battery_level : 0..1;
	ASSIGN
		init(battery_level) := 0..1;
		next(battery_level) := 0..1;
MODULE am_task_SET_am_warning_module(active_node, node_id, blackboard, other_info)
	VAR
		am_warning : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(am_warning) :=
			case
				(active_node = node_id) : 0..1;--allow it to be either state.
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
		
MODULE am_task_SET_status_module(active_node, node_id, blackboard, other_info)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;

MODULE battery_management_task_SET_battery_level_module(active_node, node_id, blackboard, other_info)
	VAR
		battery_level : 0..1;
		blackboard_var_exists : boolean;
		actual_var : 0..1;
	INVAR
		other_info.battery_level = actual_var;
	ASSIGN
		init(actual_var) := 1;
		next(actual_var) :=
			case
				(active_node = node_id) & (actual_var > 0) : actual_var - 1;
				TRUE : actual_var;
			esac;
		next(battery_level) :=
			case
				(active_node = node_id) : (actual_var);
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;


MODULE battery_management_task_SET_battery_low_warning_module(active_node, node_id, blackboard, other_info)
	VAR
		battery_low_warning : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(battery_low_warning) :=
			case
				(active_node = node_id) & (other_info.battery_level < 1) : 1;
				(active_node = node_id) & (other_info.battery_level >= 1) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;

MODULE battery_management_task_SET_status_module(active_node, node_id, blackboard, other_info)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;


MODULE battery_low_fs_CHECK_battery_low_warning_module(active_node, node_id, blackboard, other_info)
	VAR
       		result : boolean;
	INVAR
		result = (blackboard.variable[blackboard.battery_low_warning] = 0);

MODULE surface_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_heading : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_heading) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE surface_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_speed : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_speed) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE surface_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_depth : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_depth) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;

MODULE surface_task_SET_status_module(active_node, node_id, blackboard, other_info)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;
MODULE waypoint_task_SET_p_mission_len_module(active_node, node_id, blackboard, other_info)
	VAR
		p_mission_len : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(p_mission_len) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_waypoints_completed_module(active_node, node_id, blackboard, other_info)
	VAR
		waypoints_completed : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(waypoints_completed) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_heading : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_heading) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_speed : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_speed) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_depth : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_depth) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE waypoint_task_SET_status_module(active_node, node_id, blackboard, other_info)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;

MODULE check_am_CHECK_am_warning_module(active_node, node_id, blackboard, other_info)
	VAR
       		result : boolean;
	INVAR
		result = (blackboard.variable[0] = 0);

MODULE speed_min_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_heading : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_heading) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_min_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_speed : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_speed) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_min_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_depth : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_depth) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_min_task_SET_status_module(active_node, node_id, blackboard, other_info)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;

MODULE speed_max_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_heading : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_heading) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_max_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_speed : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_speed) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_max_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_depth : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_depth) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE speed_max_task_SET_status_module(active_node, node_id, blackboard, other_info)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;
MODULE loiter_task_SET_HSD_out_dot_heading_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_heading : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_heading) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE loiter_task_SET_HSD_out_dot_speed_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_speed : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_speed) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE loiter_task_SET_HSD_out_dot_depth_module(active_node, node_id, blackboard, other_info)
	VAR
		HSD_out_dot_depth : 0..1;
		blackboard_var_exists : boolean;
	ASSIGN
		next(HSD_out_dot_depth) :=
			case
				(active_node = node_id) : 0;
				TRUE : 0..1;
			esac;
		next(blackboard_var_exists) :=
			case
				(active_node = node_id) : TRUE;
				TRUE : {FALSE, TRUE};
			esac;
MODULE loiter_task_SET_status_module(active_node, node_id, blackboard, other_info)
	VAR
		status : {failure, running, success, invalid};
	ASSIGN
		next(status) :=
			case
				(active_node = node_id) : success;
				(active_node = -1) & !(status = running) : invalid;
				TRUE : {failure, running, success, invalid};
			esac;