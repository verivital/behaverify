configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
}
constants {
    'x_min' := 0, 'y_min' := 0, 'x_max' := 10, 'y_max' := 10, 'speed_min' := 0, 'speed_max' := 2
} end_constants

variables {
    variable {
	bl row_seen VAR BOOLEAN assign{result{False}}
    }
    variable {
	bl y_strategy VAR {'N', 'S'} assign{result{'N'}}
    }
    variable {
	env drone_x VAR ['x_min'..'x_max'] assign{result{'x_min'}} 
    }
    variable {
	env drone_y VAR ['y_min'..'y_max'] assign{result{'y_min'}}
    }
    variable {
	env drone_speed VAR ['speed_min'..'speed_max'] assign{result{'speed_min'}}
    }
    variable {
	env drone_direction VAR {'N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'} assign{result{'N'}}
    }
    variable {
	env drone_altitude DEFINE INT assign{result{10}} #{this is more of a placeholder right now }#
    }
    #{ END OF DRONE VARIABLES }#
    variable {
	env target_x VAR ['x_min'..'x_max'] assign{result{range 'x_min', 'x_max', True}}
    }
    variable {
	env target_y VAR ['y_min'..'y_max'] assign{result{range 'y_min', 'y_max', True}}
    }
    variable { 
	env target_direction VAR {'N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'} assign{result{'N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'}}
    }
    #{ END OF TARGET VARIABLES }#
} end_variables

environment_update {
    variable_statement {
	target_direction
	assign{result{'N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW'}}
    }
    variable_statement {
	target_x
	assign{
	    case{(or, (equal, target_direction, 'W'), (equal, target_direction, 'NW'), (equal, target_direction, 'SW'))}
	    result{(min, (addition, target_x, 1), 'x_max')}
	    case{(or, (equal, target_direction, 'E'), (equal, target_direction, 'NE'), (equal, target_direction, 'SE'))}
	    result{(max, (subtraction, target_x, 1), 'x_min')}
	    result{target_y}
	}
    }
    variable_statement {
	target_y
	assign{
	    case{(or, (equal, target_direction, 'N'), (equal, target_direction, 'NE'), (equal, target_direction, 'NW'))}
	    result{(min, (addition, target_y, 1), 'y_max')}
	    case{(or, (equal, target_direction, 'S'), (equal, target_direction, 'SE'), (equal, target_direction, 'SW'))}
	    result{(max, (subtraction, target_y, 1), 'y_min')}
	    result{target_y}
	}
    }
    variable_statement {
	drone_x
	assign{
	    case{(or, (equal, drone_direction, 'W'), (equal, drone_direction, 'NW'), (equal, drone_direction, 'SW'))}
	    result{(min, (addition, drone_x, drone_speed), 'x_max')}
	    case{(or, (equal, drone_direction, 'E'), (equal, drone_direction, 'NE'), (equal, drone_direction, 'SE'))}
	    result{(max, (subtraction, drone_x, drone_speed), 'x_min')}
	    result{drone_y}
	}
    }
    variable_statement {
	drone_y
	assign{
	    case{(or, (equal, drone_direction, 'N'), (equal, drone_direction, 'NE'), (equal, drone_direction, 'NW'))}
	    result{(min, (addition, drone_y, drone_speed), 'y_max')}
	    case{(or, (equal, drone_direction, 'S'), (equal, drone_direction, 'SE'), (equal, drone_direction, 'SW'))}
	    result{(max, (subtraction, drone_y, drone_speed), 'y_min')}
	    result{drone_y}
	}
    }
} end_environment_update

checks {
} end_checks

environment_checks {
    environment_check {
	check_picture
	arguments{}
	read_variables {} end_read_variables
	condition { (and, (equal, 'drone_x', 'target_x'), (equal, 'drone_y', 'target_y')) } end_condition
    } end_environment_check
    environment_check {
	at_boundary
	arguments{}
	read_variables {} end_read_variables
	condition { (and, (equal, 'drone_x', 'target_x'), (equal, 'drone_y', 'target_y')) } end_condition
    } end_environment_check
} end_environment_checks

actions {

    action {
	gloat
	arguments {}
	local_variables{}
	read_variables{}
	write_variables{}
	initial_values{}
	update{
	    return_statement{result{success}}
	}
    }
    
} end_actions

sub_trees {
    sub_tree {
	DECISION_TREE
	composite {
	    decisions selector
	    children {
		composite {
		    victory sequence
		    children {
			check_picture {}
			gloat {}
		    }
		}
		composite {
		    change sequence
		    children {
			at_boundary {}
			set_direction {}
		    }
		}
		on_course {}
	    }
	}
    }
} end_sub_trees

tree {
    composite {
	drone_control sequence
	children {
	    get_x {}
	    get_y {}
	    get_environment_info {}
	    insert {DECISION_TREE}
	    send_signal {}
	}
} end_tree




tick_prerequisite { (True) } end_tick_prerequisite

specifications {
    
} end_specifications