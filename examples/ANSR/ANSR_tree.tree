configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
}
enumerations {
    #{ here you specify the enumerations used in the model}#
}
constants {
    'x_min' := 0, 'y_min' := 0, 'x_max' := 6, 'y_max' := 6, 'tree_count' := 2, 'vision_range' := 4, 'tree_range' := 2, 'y_change' := 2, 'movement_cooldown' := 10
} end_constants

variables {
    variable {bl prev_dest_x VAR ['x_min', 'x_max'] assign {result {'x_min'}}}
    variable {bl prev_dest_y VAR ['y_min', 'y_max'] assign {result {(addition, 'y_min', 1)}}}
    variable {bl cur_x VAR ['x_min', 'x_max'] assign {result {'x_min'}}}
    variable {bl cur_y VAR ['y_min', 'y_max'] assign {result {'y_min'}}}
    variable {bl dest_x VAR ['x_min', 'x_max'] assign {result {'x_min'}}}
    variable {bl dest_y VAR ['y_min', 'y_max'] assign {result {'y_min'}}}
    variable {bl dir VAR {-1, 1} assign {result {1}}}
    variable {bl victory VAR BOOLEAN assign {result {False}}}
    #{variable {env tree_locs array 'tree_count' FROZENVAR [0, 960] range assign {result{range, 0, 960, True}}}}#
    #{variable {env tree_x array 'tree_count' FROZENVAR ['x_min', 'x_max'] range assign {result{range, 'x_min', 'x_max', True}}}
    variable {env tree_y array 'tree_count' FROZENVAR ['y_min', 'y_max'] range assign {result{range, 'y_min', 'y_max', True}}}}#
    variable {env tree_x array 'tree_count' DEFINE INT per_index assign {result{2}} assign {result{5}}}
    variable {env tree_y array 'tree_count' DEFINE INT per_index assign {result{2}} assign {result{5}}}
    variable {env tar_x VAR ['x_min', 'x_max'] assign {result {range, 'x_min', 'x_max', True}}}
    variable {env tar_y VAR ['y_min', 'y_max'] assign {result {range, 'y_min', 'y_max', True}}}
    variable {env timer VAR [0, 'movement_cooldown'] assign {result{'movement_cooldown'}}}
    #{START OF X_NET}#
    variable {bl x_net_1_1 DEFINE INT assign {result{ (max, dest_x, 0)}}}
    variable {bl x_net_1_2 DEFINE INT assign {result{ (max, (subtraction, dest_x, prev_dest_x), 0)}}}
    variable {bl x_net_1_3 DEFINE INT assign {result{ (max, (subtraction, prev_dest_x, dest_x), 0)}}}
    variable {bl x_net_1_4 DEFINE INT assign {result{ (max, (subtraction, dest_x, (division, (addition, 'x_min', 'x_max'), 2)), 0)}}}
    variable {bl x_net_1_5 DEFINE INT assign {result{ (max, (subtraction, (division, (addition, 'x_min', 'x_max'), 2), dest_x), 0)}}}
    
    variable {bl x_net_2_1 DEFINE INT assign {result{ (max, x_net_1_1, 0)}}}
    variable {bl x_net_2_2 DEFINE INT assign {result{ (max, (addition, (negative, x_net_1_2), (negative, x_net_1_3), 1), 0)}}}
    variable {bl x_net_2_3 DEFINE INT assign {result{ (max, (subtraction, 1, x_net_1_4), 0)}}}
    variable {bl x_net_2_4 DEFINE INT assign {result{ (max, (subtraction, 1, x_net_1_5), 0)}}}

    variable {bl x_net_3_1 DEFINE INT assign {result{ (max, (subtraction, x_net_2_1, (multiplication, x_net_2_2, 'x_max')), 0)}}}
    variable {bl x_net_3_2 DEFINE INT assign {result{ (max, (subtraction, 1, x_net_2_2), 0)}}}
    variable {bl x_net_3_3 DEFINE INT assign {result{ (max, x_net_2_3, 0)}}}
    variable {bl x_net_3_4 DEFINE INT assign {result{ (max, x_net_2_4, 0)}}}

    variable {bl x_net_4_1 DEFINE INT assign {result{ (max, x_net_3_1, 0)}}}
    variable {bl x_net_4_2 DEFINE INT assign {result{ (max, (subtraction, (multiplication, 'x_max', x_net_3_3), (multiplication, 'x_max', x_net_3_2)), 0)}}}
    variable {bl x_net_4_3 DEFINE INT assign {result{ (max, (subtraction, (multiplication, 'x_min', x_net_3_4), (multiplication, 'x_max', x_net_3_2)), 0)}}}

    variable {bl x_net_output_1 DEFINE INT assign {result{ (max, (addition, x_net_4_1, x_net_4_2, x_net_4_3), 0)}}}
    #{START OF Y_NET}#
    variable {bl y_net_1_1 DEFINE INT assign {result{ (max, dest_y, 0)}}}
    variable {bl y_net_1_2 DEFINE INT assign {result{ (max, (subtraction, dest_y, prev_dest_y), 0)}}}
    variable {bl y_net_1_3 DEFINE INT assign {result{ (max, (subtraction, prev_dest_y, dest_y), 0)}}}
    variable {bl y_net_1_4 DEFINE INT assign {result{ (max, dir, 0)}}}
    variable {bl y_net_1_5 DEFINE INT assign {result{ (max, (negative, dir), 0)}}}
    
    variable {bl y_net_2_1 DEFINE INT assign {result{ (max, y_net_1_1, 0)}}}
    variable {bl y_net_2_2 DEFINE INT assign {result{ (max, (addition, (negative, y_net_1_2), (negative, y_net_1_3), 1), 0)}}}
    variable {bl y_net_2_3 DEFINE INT assign {result{ (max, y_net_1_4, 0)}}}
    variable {bl y_net_2_4 DEFINE INT assign {result{ (max, y_net_1_5, 0)}}}

    variable {bl y_net_3_1 DEFINE INT assign {result{ (max, y_net_2_1, 0)}}}
    variable {bl y_net_3_2 DEFINE INT assign {result{ (max, (addition, y_net_2_2, y_net_2_3, -1), 0)}}}
    variable {bl y_net_3_3 DEFINE INT assign {result{ (max, (addition, y_net_2_2, y_net_2_4, -1), 0)}}}

    variable {bl y_net_output_1 DEFINE INT assign {result{ (max, (addition, y_net_3_1, (multiplication, 'y_change', y_net_3_2), (multiplication, -1, 'y_change', y_net_3_3)), 0)}}}
} end_variables

environment_update {
    #{}#
    variable_statement {
	tar_x
	assign {
	    case { (equal, timer, 0) } end_case result {tar_x, (min, 'x_max', (addition, tar_x, 1)), (max, 'x_min', (subtraction, tar_x, 1))} end_result
	    result { tar_x } end_result
	} end_assign
    } end_variable_statement
    variable_statement {
	tar_y
	assign {
	    case { (equal, timer, 0) } end_case result {tar_y, (min, 'x_max', (addition, tar_y, 1)), (max, 'x_min', (subtraction, tar_y, 1))} end_result
	    result { tar_y } end_result
	} end_assign
    } end_variable_statement
    variable_statement {
	timer
	assign {
	    case {(equal, timer, 0) } result {'movement_cooldown'}
	    result {(max, 0, (subtraction, timer, 1))}
	}
    }
    #{}#
} end_environment_update

checks {
    check {
	not_at_destination
	arguments {}
	read_variables {cur_x, cur_y, dest_x, dest_y}
	condition { (not, (and, (equal, cur_x, dest_x), (equal, cur_y, dest_y)))}
    }
    check {
	y_too_small
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (less_than, cur_y, dest_y)}
    }
    check {
	y_too_big
	arguments {}
	read_variables {cur_y, dest_y}
	condition { (greater_than, cur_y, dest_y)}
    }
    check {
	x_too_small
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (less_than, cur_x, dest_x)}
    }
    check {
	x_too_big
	arguments {}
	read_variables {cur_x, dest_x}
	condition { (greater_than, cur_x, dest_x)}
    }
} end_checks

environment_checks {
    #{This currently only checks one tree}#
    environment_check {
	target_in_sight
	arguments{}
	read_variables {cur_x, cur_y} end_read_variables
	condition {
	    (and,
	    (less_than_or_equal, (addition, (abs, (subtraction, cur_x, tar_x)), (abs, (subtraction, cur_y, tar_y))), 'vision_range'),
	    (or,
	    (greater_than, (addition, (abs, (subtraction, (index, tree_x, 0), tar_x)), (abs, (subtraction, (index, tree_y, 0), tar_y))), 'tree_range'),
	    (and, (equal, (index, tree_x, 0), cur_x), (equal, (index, tree_y, 0), cur_y)),
	    (and, (equal, (index, tree_x, 0), tar_x), (equal, (index, tree_y, 0), tar_y)),
	    (and, (less_than, (index, tree_x, 0), cur_x), (less_than, (index, tree_x, 0), tar_x)),
	    (and, (less_than, (index, tree_y, 0), cur_y), (less_than, (index, tree_y, 0), tar_y)),
	    (and, (greater_than, (index, tree_x, 0), cur_x), (greater_than, (index, tree_x, 0), tar_x)),
	    (and, (greater_than, (index, tree_y, 0), cur_y), (greater_than, (index, tree_y, 0), tar_y))
	    ),
	    (or,
	    (greater_than, (addition, (abs, (subtraction, (index, tree_x, 1), tar_x)), (abs, (subtraction, (index, tree_y, 1), tar_y))), 'tree_range'),
	    (and, (equal, (index, tree_x, 1), cur_x), (equal, (index, tree_y, 1), cur_y)),
	    (and, (equal, (index, tree_x, 1), tar_x), (equal, (index, tree_y, 1), tar_y)),
	    (and, (less_than, (index, tree_x, 1), cur_x), (less_than, (index, tree_x, 1), tar_x)),
	    (and, (less_than, (index, tree_y, 1), cur_y), (less_than, (index, tree_y, 1), tar_y)),
	    (and, (greater_than, (index, tree_x, 1), cur_x), (greater_than, (index, tree_x, 1), tar_x)),
	    (and, (greater_than, (index, tree_y, 1), cur_y), (greater_than, (index, tree_y, 1), tar_y))
	    )
	    )
	} end_condition
    } end_environment_check
    
} end_environment_checks

actions {
    #{ action nodes are defined here }#
    action {
	call_xy_net
	arguments{}
	local_variables {} end_local_variables
	read_variables {x_net_output_1, y_net_output_1} end_read_variables
	write_variables {dest_x, dest_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		dest_x
		assign {
		    result {(max, 'x_min', (min, 'x_max', x_net_output_1))}
		}
	    }
	    variable_statement {
		dest_y
		assign {
		    result {(max, 'y_min', (min, 'y_max', y_net_output_1))}
		}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	move
	arguments{'delta_x' := INT, 'delta_y' := INT}
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {cur_x, cur_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		cur_x assign {result {(max, 'x_min', (min, 'x_max', (addition, 'delta_x', cur_x)))}}
	    }
	    variable_statement {
		cur_y assign {result {(max, 'y_min', (min, 'y_max', (addition, 'delta_y', cur_y)))}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	send_victory
	arguments{}
	local_variables { } end_local_variables
	read_variables {} end_read_variables
	write_variables {victory} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		victory assign {result {True}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
    action {
	update_direction
	arguments{}
	local_variables { } end_local_variables
	read_variables {cur_y} end_read_variables
	write_variables {dir} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		dir
		assign {
		    case { (equal, cur_y, 'y_max')}
		    result {-1}
		    case { (equal, cur_y, 'y_min')}
		    result {1}
		    result {dir}
		}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    }
    action {
	update_previous_destination
	arguments{}
	local_variables { } end_local_variables
	read_variables {cur_x, cur_y} end_read_variables
	write_variables {prev_dest_x, prev_dest_y} end_write_variables
	initial_values {} end_initial_values
	update {
	    variable_statement {
		prev_dest_x assign {result {cur_x}}
	    }
	    variable_statement {
		prev_dest_y assign {result {cur_y}}
	    }
	    return_statement {
		result {success} end_result
	    } end_return_statement
	} end_update
    } end_action
} end_actions

sub_trees {
    sub_tree {
	DESTINATION_SUBTREE
	composite {
	    destination selector
	    children {
		not_at_destination {} #{Checks destination}#
		composite {
		    new_destination sequence
		    children {
			update_direction {} #{Updates the direction we're going in.}#
			call_xy_net {} #{Calls the neural networks}#
			update_previous_destination {} #{sets the current location to the previous destination.}#
		    }
		}
	    }
	}
    }
    sub_tree {
	MOVEMENT_SUBTREE
	composite {
	    destination_and_movement sequence
	    children {
		insert {DESTINATION_SUBTREE}
		composite {
		    movement selector
		    children {
			composite {
			    try_up sequence
			    children {
				y_too_small {}
				move {0, 1}
			    }
			}
			composite {
			    try_down sequence
			    children {
				y_too_big {}
				move {0, -1}
			    }
			}
			composite {
			    try_left sequence
			    children {
				x_too_big {}
				move {-1, 0}
			    }
			}
			composite {
			    try_right sequence
			    children {
				x_too_small {}
				move {1, 0}
			    }
			}
		    }
		}
	    }
	}
    }
} end_sub_trees

tree {
    composite {
	drone_control selector
	children {
	    composite {
		vision sequence
		children {
		    target_in_sight {}
		    send_victory {}
		    
		}
	    }
	    insert {MOVEMENT_SUBTREE}
	}
    }
} end_tree




tick_prerequisite { (not, victory) } end_tick_prerequisite
#{tick_prerequisite { True } end_tick_prerequisite}#
#{ if the condition is True, the tree ticks.
    If it is false, everything is done }#

specifications { #{ INVAR, LTL, and CTL specs go here }#
    CTLSPEC {(always_finally, victory -1)}
    #{CTLSPEC {(implies, (and, (equal, (index, tree_x 0, 0), 2), (equal, (index, tree_x 0, 1), 5), (equal, (index, tree_y 0, 0), 2), (equal, (index, tree_y 0, 1), 5)), (always_finally, victory -1))}}#
} end_specifications