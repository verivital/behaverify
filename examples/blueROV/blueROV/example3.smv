MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		statuses := [BlueROV.status, topics2bb.status, battery2bb.status, rth2bb.status, geofence2bb.status, lec2_am_r_2bb.status, lec2_am_l_2bb.status, pipe_lost2bb.status, sensor_failure2bb.status, waypoints_completed2bb.status, mission2bb.status, ddlec2bb.status, fls2bb.status, fls_warning2bb.status, hsd_pipe2bb.status, hsd_wp2bb.status, hsd_rth2bb.status, hsd_surface2bb.status, rtreach2bb.status, dd_tasks.status, reallocate_check_SIF.status, reallocate_check.status, is_reallocation_requested.status, reallocate_task.status, dd_lec_task.status, mission_server.status, obstacle_avoidance.status, priorities.status, battery_check_SIF.status, battery_check.status, battery_low_fs.status, surface_task.status, sensor_failure_selector_SIF.status, sensor_failure_selector.status, check_sensor_failure.status, surface_task1.status, emergency_stop_check_SIF.status, emergency_stop_check.status, emergency_stop_fs.status, emergency_stop_tasks.status, emergency_stop_task.status, surface_task2.status, home_reached_selector_SIF.status, home_reached_selector.status, check_surface.status, surface_task3.status, obstacle_standoff_check_SIF.status, obstacle_standoff_check.status, obstacle_standoff_fs.status, surface_task4.status, rth_selector_SIF.status, rth_selector.status, check_rth.status, rth_par.status, rth_task.status, home2bb.status, geofence_selector_SIF.status, geofence_selector.status, check_geofence.status, rth_par1.status, rth_task1.status, home2bb1.status, pipe_lost_selector_SIF.status, pipe_lost_selector.status, check_pipe_post.status, loiter_task1.status, track_pipe_mission.status, is_track_pipe_mission_requested.status, tracking.status, tracking_task.status, lec2am_speed_cmd.status, lec2am_l_speed_check_SIF.status, lec2am_l_speed_check.status, check_lec2am_ls.status, speed_min_task.status, lec2am_r_speed_check_SIF.status, lec2am_r_speed_check.status, check_lec2am_rs.status, speed_min_task1.status, speed_max_task.status, lec2am_mapping_cmd.status, lec2am_l_mapping_check_SIF.status, lec2am_l_mapping_check.status, check_lec2am_lp.status, pipe_mapping_disable_task.status, lec2am_r_mapping_check_SIF.status, lec2am_r_mapping_check.status, check_lec2am_rp.status, pipe_mapping_disable_task1.status, pipe_mapping_enable_task.status, track_pipe_mission_end.status, evaluate.status, waypoint_mission.status, is_waypoint_requested.status, waypoint_selector.status, waypoints_sif_SIF.status, waypoints_sif.status, check_waypoints_completed.status, waypoint_end.status, next_mission.status, loiter_task2.status, waypoint_task.status, loiter_task.status];
		resume_from_node_0 := -3;
		resume_from_node_1 := -3;
		resume_from_node_2 := -3;
		resume_from_node_3 := -3;
		resume_from_node_4 := -3;
		resume_from_node_5 := -3;
		resume_from_node_6 := -3;
		resume_from_node_7 := -3;
		resume_from_node_8 := -3;
		resume_from_node_9 := -3;
		resume_from_node_10 := -3;
		resume_from_node_11 := -3;
		resume_from_node_12 := -3;
		resume_from_node_13 := -3;
		resume_from_node_14 := -3;
		resume_from_node_15 := -3;
		resume_from_node_16 := -3;
		resume_from_node_17 := -3;
		resume_from_node_18 := -3;
		resume_from_node_19 := -3;
		resume_from_node_25 := -3;
		resume_from_node_26 := -3;
		resume_from_node_54 := -3;
		resume_from_node_55 := -3;
		resume_from_node_60 := -3;
		resume_from_node_61 := -3;
		resume_from_node_69 := -3;
		resume_from_node_70 := -3;
		resume_from_node_80 := -3;
		trace_running_source_41 := (statuses[41] = running) ? 41 : -2;
		trace_running_source_39 := 
			case
				!(trace_running_source_41 = -2) : trace_running_source_41;
				TRUE : -2;
			esac;
		trace_running_source_37 := 
			case
				!(trace_running_source_39 = -2) : trace_running_source_39;
				TRUE : -2;
			esac;
		trace_running_source_36 := 
			case
				!(trace_running_source_37 = -2) : trace_running_source_37;
				TRUE : -2;
			esac;
		trace_running_source_68 := (statuses[68] = running) ? 68 : -2;
		trace_running_source_91 := (statuses[91] = running) ? 91 : -2;
		trace_running_source_90 := 
			case
				!(trace_running_source_91 = -2) : trace_running_source_91;
				TRUE : -2;
			esac;
		trace_running_source_66 := 
			case
				!(trace_running_source_68 = -2) : trace_running_source_68;
				!(trace_running_source_90 = -2) : trace_running_source_90;
				TRUE : -2;
			esac;
		trace_running_source_100 := (statuses[100] = running) ? 100 : -2;
		trace_running_source_98 := 
			case
				!(trace_running_source_100 = -2) : trace_running_source_100;
				TRUE : -2;
			esac;
		trace_running_source_96 := 
			case
				!(trace_running_source_98 = -2) : trace_running_source_98;
				TRUE : -2;
			esac;
		trace_running_source_95 := 
			case
				!(trace_running_source_96 = -2) : trace_running_source_96;
				TRUE : -2;
			esac;
		trace_running_source_94 := 
			case
				!(trace_running_source_95 = -2) : trace_running_source_95;
				(statuses[94] = running) : 94;
				TRUE : -2;
			esac;
		trace_running_source_92 := 
			case
				!(trace_running_source_94 = -2) : trace_running_source_94;
				TRUE : -2;
			esac;
		trace_running_source_27 := 
			case
				!(trace_running_source_36 = -2) : trace_running_source_36;
				!(trace_running_source_66 = -2) : trace_running_source_66;
				!(trace_running_source_92 = -2) : trace_running_source_92;
				TRUE : -2;
			esac;
		resume_point_39 := 
			case
				(resume_from_node_27 in {41}) : 1;
				TRUE : -2;
			esac;
		resume_point_66 := 
			case
				(resume_from_node_27 in {68}) : 1;
				(resume_from_node_27 in {91}) : 2;
				TRUE : -2;
			esac;
		resume_point_92 := 
			case
				(resume_from_node_27 in {100, 94}) : 1;
				TRUE : -2;
			esac;
		resume_point_98 := 
			case
				(resume_from_node_27 in {100}) : 1;
				TRUE : -2;
			esac;
		BlueROV.active := TRUE;
	VAR
		variable_names : define_variables;
		node_names : define_nodes;
		blackboard : blackboard_module(node_names, variable_names, statuses);
		resume_from_node_27 : {27, 41, 68, 91, 94, 100};
		BlueROV : composite_parallel_unsynchronized_success_on_all_5(topics2bb, dd_tasks, mission_server, obstacle_avoidance, priorities);
		topics2bb : composite_parallel_unsynchronized_success_on_all_17(battery2bb, rth2bb, geofence2bb, lec2_am_r_2bb, lec2_am_l_2bb, pipe_lost2bb, sensor_failure2bb, waypoints_completed2bb, mission2bb, ddlec2bb, fls2bb, fls_warning2bb, hsd_pipe2bb, hsd_wp2bb, hsd_rth2bb, hsd_surface2bb, rtreach2bb);
		battery2bb : leaf_set_blackboard_variables(battery2bb_STATUS);
		rth2bb : leaf_set_blackboard_variables(rth2bb_STATUS);
		geofence2bb : leaf_set_blackboard_variables(geofence2bb_STATUS);
		lec2_am_r_2bb : leaf_set_blackboard_variables(lec2_am_r_2bb_STATUS);
		lec2_am_l_2bb : leaf_set_blackboard_variables(lec2_am_l_2bb_STATUS);
		pipe_lost2bb : leaf_set_blackboard_variables(pipe_lost2bb_STATUS);
		sensor_failure2bb : leaf_set_blackboard_variables(sensor_failure2bb_STATUS);
		waypoints_completed2bb : leaf_set_blackboard_variables(waypoints_completed2bb_STATUS);
		mission2bb : leaf_set_blackboard_variables(mission2bb_STATUS);
		ddlec2bb : leaf_set_blackboard_variables(ddlec2bb_STATUS);
		fls2bb : leaf_set_blackboard_variables(fls2bb_STATUS);
		fls_warning2bb : leaf_set_blackboard_variables(fls_warning2bb_STATUS);
		hsd_pipe2bb : leaf_set_blackboard_variables(hsd_pipe2bb_STATUS);
		hsd_wp2bb : leaf_set_blackboard_variables(hsd_wp2bb_STATUS);
		hsd_rth2bb : leaf_set_blackboard_variables(hsd_rth2bb_STATUS);
		hsd_surface2bb : leaf_set_blackboard_variables(hsd_surface2bb_STATUS);
		rtreach2bb : leaf_set_blackboard_variables(rtreach2bb_STATUS);
		dd_tasks : composite_selector_without_memory_2(reallocate_check_SIF, dd_lec_task);
		reallocate_check_SIF : decorator_X_is_Y(reallocate_check, success, failure);
		reallocate_check : composite_selector_without_memory_2(is_reallocation_requested, reallocate_task);
		is_reallocation_requested : leaf_check_blackboard_variable_value(blackboard, 29, 		is_reallocation_requested_CHECK_dd_xy_axis_degradation);
		reallocate_task : leaf_set_blackboard_variables(reallocate_task_STATUS);
		dd_lec_task : leaf_set_blackboard_variables(dd_lec_task_STATUS);
		mission_server : leaf_set_blackboard_variables(mission_server_STATUS);
		obstacle_avoidance : leaf_set_blackboard_variables(obstacle_avoidance_STATUS);
		priorities : composite_selector_without_memory_11(battery_check_SIF, sensor_failure_selector_SIF, emergency_stop_check_SIF, home_reached_selector_SIF, obstacle_standoff_check_SIF, rth_selector_SIF, geofence_selector_SIF, pipe_lost_selector_SIF, track_pipe_mission, waypoint_mission, loiter_task);
		battery_check_SIF : decorator_X_is_Y(battery_check, success, failure);
		battery_check : composite_selector_without_memory_2(battery_low_fs, surface_task);
		battery_low_fs : leaf_check_blackboard_variable_value(blackboard, 1, 		battery_low_fs_CHECK_battery_low_warning);
		surface_task : leaf_set_blackboard_variables(surface_task_STATUS);
		sensor_failure_selector_SIF : decorator_X_is_Y(sensor_failure_selector, success, failure);
		sensor_failure_selector : composite_selector_without_memory_2(check_sensor_failure, surface_task1);
		check_sensor_failure : leaf_check_blackboard_variable_value(blackboard, 22, 		check_sensor_failure_CHECK_bb_sensor_failure_warning);
		surface_task1 : leaf_set_blackboard_variables(surface_task1_STATUS);
		emergency_stop_check_SIF : decorator_X_is_Y(emergency_stop_check, success, failure);
		emergency_stop_check : composite_selector_without_memory_2(emergency_stop_fs, emergency_stop_tasks);
		emergency_stop_fs : leaf_check_blackboard_variable_value(blackboard, 39, 		emergency_stop_fs_CHECK_emergency_stop_warning);
		emergency_stop_tasks : composite_sequence_with_memory_2(emergency_stop_task, surface_task2, resume_point_39);
		emergency_stop_task : leaf_set_blackboard_variables(emergency_stop_task_STATUS);
		surface_task2 : leaf_set_blackboard_variables(surface_task2_STATUS);
		home_reached_selector_SIF : decorator_X_is_Y(home_reached_selector, success, failure);
		home_reached_selector : composite_selector_without_memory_2(check_surface, surface_task3);
		check_surface : leaf_check_blackboard_variable_value(blackboard, 58, 		check_surface_CHECK_bb_home_reached);
		surface_task3 : leaf_set_blackboard_variables(surface_task3_STATUS);
		obstacle_standoff_check_SIF : decorator_X_is_Y(obstacle_standoff_check, success, failure);
		obstacle_standoff_check : composite_selector_without_memory_2(obstacle_standoff_fs, surface_task4);
		obstacle_standoff_fs : leaf_check_blackboard_variable_value(blackboard, 33, 		obstacle_standoff_fs_CHECK_obstacle_standoff_warning);
		surface_task4 : leaf_set_blackboard_variables(surface_task4_STATUS);
		rth_selector_SIF : decorator_X_is_Y(rth_selector, success, failure);
		rth_selector : composite_selector_without_memory_2(check_rth, rth_par);
		check_rth : leaf_check_blackboard_variable_value(blackboard, 4, 		check_rth_CHECK_bb_rth_warning);
		rth_par : composite_parallel_unsynchronized_success_on_all_2(rth_task, home2bb);
		rth_task : leaf_set_blackboard_variables(rth_task_STATUS);
		home2bb : leaf_set_blackboard_variables(home2bb_STATUS);
		geofence_selector_SIF : decorator_X_is_Y(geofence_selector, success, failure);
		geofence_selector : composite_selector_without_memory_2(check_geofence, rth_par1);
		check_geofence : leaf_check_blackboard_variable_value(blackboard, 7, 		check_geofence_CHECK_bb_geofence_warning);
		rth_par1 : composite_parallel_unsynchronized_success_on_all_2(rth_task1, home2bb1);
		rth_task1 : leaf_set_blackboard_variables(rth_task1_STATUS);
		home2bb1 : leaf_set_blackboard_variables(home2bb1_STATUS);
		pipe_lost_selector_SIF : decorator_X_is_Y(pipe_lost_selector, success, failure);
		pipe_lost_selector : composite_selector_without_memory_2(check_pipe_post, loiter_task1);
		check_pipe_post : leaf_check_blackboard_variable_value(blackboard, 18, 		check_pipe_post_CHECK_bb_pipe_lost_warning);
		loiter_task1 : leaf_set_blackboard_variables(loiter_task1_STATUS);
		track_pipe_mission : composite_sequence_with_memory_3(is_track_pipe_mission_requested, tracking, track_pipe_mission_end, resume_point_66);
		is_track_pipe_mission_requested : leaf_check_blackboard_variable_value(blackboard, 20, 		is_track_pipe_mission_requested_CHECK_bb_mission_dot_data);
		tracking : composite_parallel_unsynchronized_success_on_all_3(tracking_task, lec2am_speed_cmd, lec2am_mapping_cmd);
		tracking_task : leaf_set_blackboard_variables(tracking_task_STATUS);
		lec2am_speed_cmd : composite_selector_without_memory_3(lec2am_l_speed_check_SIF, lec2am_r_speed_check_SIF, speed_max_task);
		lec2am_l_speed_check_SIF : decorator_X_is_Y(lec2am_l_speed_check, success, failure);
		lec2am_l_speed_check : composite_selector_without_memory_2(check_lec2am_ls, speed_min_task);
		check_lec2am_ls : leaf_check_blackboard_variable_value(blackboard, 14, 		check_lec2am_ls_CHECK_lec2_am_l_speed_warning);
		speed_min_task : leaf_set_blackboard_variables(speed_min_task_STATUS);
		lec2am_r_speed_check_SIF : decorator_X_is_Y(lec2am_r_speed_check, success, failure);
		lec2am_r_speed_check : composite_selector_without_memory_2(check_lec2am_rs, speed_min_task1);
		check_lec2am_rs : leaf_check_blackboard_variable_value(blackboard, 10, 		check_lec2am_rs_CHECK_lec2_am_r_speed_warning);
		speed_min_task1 : leaf_set_blackboard_variables(speed_min_task1_STATUS);
		speed_max_task : leaf_set_blackboard_variables(speed_max_task_STATUS);
		lec2am_mapping_cmd : composite_selector_without_memory_3(lec2am_l_mapping_check_SIF, lec2am_r_mapping_check_SIF, pipe_mapping_enable_task);
		lec2am_l_mapping_check_SIF : decorator_X_is_Y(lec2am_l_mapping_check, success, failure);
		lec2am_l_mapping_check : composite_selector_without_memory_2(check_lec2am_lp, pipe_mapping_disable_task);
		check_lec2am_lp : leaf_check_blackboard_variable_value(blackboard, 15, 		check_lec2am_lp_CHECK_lec2_am_l_pipe_warning);
		pipe_mapping_disable_task : leaf_set_blackboard_variables(pipe_mapping_disable_task_STATUS);
		lec2am_r_mapping_check_SIF : decorator_X_is_Y(lec2am_r_mapping_check, success, failure);
		lec2am_r_mapping_check : composite_selector_without_memory_2(check_lec2am_rp, pipe_mapping_disable_task1);
		check_lec2am_rp : leaf_check_blackboard_variable_value(blackboard, 11, 		check_lec2am_rp_CHECK_lec2_am_r_pipe_warning);
		pipe_mapping_disable_task1 : leaf_set_blackboard_variables(pipe_mapping_disable_task1_STATUS);
		pipe_mapping_enable_task : leaf_set_blackboard_variables(pipe_mapping_enable_task_STATUS);
		track_pipe_mission_end : composite_sequence_with_memory_1(evaluate, -2);
		evaluate : leaf_timer();
		waypoint_mission : composite_sequence_with_memory_2(is_waypoint_requested, waypoint_selector, resume_point_92);
		is_waypoint_requested : leaf_check_blackboard_variable_value(blackboard, 20, 		is_waypoint_requested_CHECK_bb_mission_dot_data);
		waypoint_selector : composite_selector_without_memory_2(waypoints_sif_SIF, waypoint_task);
		waypoints_sif_SIF : decorator_X_is_Y(waypoints_sif, success, failure);
		waypoints_sif : composite_selector_without_memory_2(check_waypoints_completed, waypoint_end);
		check_waypoints_completed : leaf_check_blackboard_variable_value(blackboard, 25, 		check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data);
		waypoint_end : composite_sequence_with_memory_2(next_mission, loiter_task2, resume_point_98);
		next_mission : leaf_set_blackboard_variables(next_mission_STATUS);
		loiter_task2 : leaf_set_blackboard_variables(loiter_task2_STATUS);
		waypoint_task : leaf_set_blackboard_variables(waypoint_task_STATUS);
		loiter_task : leaf_set_blackboard_variables(loiter_task_STATUS);
		battery2bb_STATUS : battery2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		rth2bb_STATUS : rth2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		geofence2bb_STATUS : geofence2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		lec2_am_r_2bb_STATUS : lec2_am_r_2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		lec2_am_l_2bb_STATUS : lec2_am_l_2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		pipe_lost2bb_STATUS : pipe_lost2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		sensor_failure2bb_STATUS : sensor_failure2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		waypoints_completed2bb_STATUS : waypoints_completed2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		mission2bb_STATUS : mission2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		ddlec2bb_STATUS : ddlec2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		fls2bb_STATUS : fls2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		fls_warning2bb_STATUS : fls_warning2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		hsd_pipe2bb_STATUS : hsd_pipe2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		hsd_wp2bb_STATUS : hsd_wp2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		hsd_rth2bb_STATUS : hsd_rth2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		hsd_surface2bb_STATUS : hsd_surface2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		rtreach2bb_STATUS : rtreach2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		is_reallocation_requested_CHECK_dd_xy_axis_degradation : is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		reallocate_task_STATUS : reallocate_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		dd_lec_task_STATUS : dd_lec_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		mission_server_STATUS : mission_server_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		obstacle_avoidance_STATUS : obstacle_avoidance_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		battery_low_fs_CHECK_battery_low_warning : battery_low_fs_CHECK_battery_low_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		surface_task_STATUS : surface_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_sensor_failure_CHECK_bb_sensor_failure_warning : check_sensor_failure_CHECK_bb_sensor_failure_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		surface_task1_STATUS : surface_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		emergency_stop_fs_CHECK_emergency_stop_warning : emergency_stop_fs_CHECK_emergency_stop_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		emergency_stop_task_STATUS : emergency_stop_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		surface_task2_STATUS : surface_task2_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_surface_CHECK_bb_home_reached : check_surface_CHECK_bb_home_reached_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		surface_task3_STATUS : surface_task3_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		obstacle_standoff_fs_CHECK_obstacle_standoff_warning : obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		surface_task4_STATUS : surface_task4_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_rth_CHECK_bb_rth_warning : check_rth_CHECK_bb_rth_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		rth_task_STATUS : rth_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		home2bb_STATUS : home2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_geofence_CHECK_bb_geofence_warning : check_geofence_CHECK_bb_geofence_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		rth_task1_STATUS : rth_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		home2bb1_STATUS : home2bb1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_pipe_post_CHECK_bb_pipe_lost_warning : check_pipe_post_CHECK_bb_pipe_lost_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		loiter_task1_STATUS : loiter_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		is_track_pipe_mission_requested_CHECK_bb_mission_dot_data : is_track_pipe_mission_requested_CHECK_bb_mission_dot_data_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		tracking_task_STATUS : tracking_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_lec2am_ls_CHECK_lec2_am_l_speed_warning : check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		speed_min_task_STATUS : speed_min_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_lec2am_rs_CHECK_lec2_am_r_speed_warning : check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		speed_min_task1_STATUS : speed_min_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		speed_max_task_STATUS : speed_max_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_lec2am_lp_CHECK_lec2_am_l_pipe_warning : check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		pipe_mapping_disable_task_STATUS : pipe_mapping_disable_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_lec2am_rp_CHECK_lec2_am_r_pipe_warning : check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		pipe_mapping_disable_task1_STATUS : pipe_mapping_disable_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		pipe_mapping_enable_task_STATUS : pipe_mapping_enable_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		is_waypoint_requested_CHECK_bb_mission_dot_data : is_waypoint_requested_CHECK_bb_mission_dot_data_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data : check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		next_mission_STATUS : next_mission_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		loiter_task2_STATUS : loiter_task2_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		waypoint_task_STATUS : waypoint_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
		loiter_task_STATUS : loiter_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
	ASSIGN
		init(resume_from_node_27) := 27;
		next(resume_from_node_27) := 
			case
				(statuses[0] in {success, failure}) : 27;
				(statuses[27] in {success, failure}) : 27;
				TRUE : max(trace_running_source_27, 27);
			esac;
LTLSPEC G( ((next(blackboard.variables[variable_names.battery_low_warning]) = 1) & (battery2bb.active)) -> (surface_task.active));
--this one is true, but only for battery_warning

LTLSPEC G( ((next(blackboard.variables[variable_names.battery_low_warning]) = 1) & (battery2bb.active)) -> (surface_task.active | surface_task1.active | surface_task2.active | surface_task3.active | surface_task4.active));
--this one should be true.



MODULE composite_parallel_unsynchronized_success_on_all_5(child_0, child_1, child_2, child_3, child_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				(child_3.internal_status = failure) : failure;
				(child_4.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				!(child_3.internal_status = success) : child_3.internal_status;
				!(child_4.internal_status = success) : child_4.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
		child_4.active := active;
MODULE composite_parallel_unsynchronized_success_on_all_17(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10, child_11, child_12, child_13, child_14, child_15, child_16)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				(child_3.internal_status = failure) : failure;
				(child_4.internal_status = failure) : failure;
				(child_5.internal_status = failure) : failure;
				(child_6.internal_status = failure) : failure;
				(child_7.internal_status = failure) : failure;
				(child_8.internal_status = failure) : failure;
				(child_9.internal_status = failure) : failure;
				(child_10.internal_status = failure) : failure;
				(child_11.internal_status = failure) : failure;
				(child_12.internal_status = failure) : failure;
				(child_13.internal_status = failure) : failure;
				(child_14.internal_status = failure) : failure;
				(child_15.internal_status = failure) : failure;
				(child_16.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				!(child_3.internal_status = success) : child_3.internal_status;
				!(child_4.internal_status = success) : child_4.internal_status;
				!(child_5.internal_status = success) : child_5.internal_status;
				!(child_6.internal_status = success) : child_6.internal_status;
				!(child_7.internal_status = success) : child_7.internal_status;
				!(child_8.internal_status = success) : child_8.internal_status;
				!(child_9.internal_status = success) : child_9.internal_status;
				!(child_10.internal_status = success) : child_10.internal_status;
				!(child_11.internal_status = success) : child_11.internal_status;
				!(child_12.internal_status = success) : child_12.internal_status;
				!(child_13.internal_status = success) : child_13.internal_status;
				!(child_14.internal_status = success) : child_14.internal_status;
				!(child_15.internal_status = success) : child_15.internal_status;
				!(child_16.internal_status = success) : child_16.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
		child_4.active := active;
		child_5.active := active;
		child_6.active := active;
		child_7.active := active;
		child_8.active := active;
		child_9.active := active;
		child_10.active := active;
		child_11.active := active;
		child_12.active := active;
		child_13.active := active;
		child_14.active := active;
		child_15.active := active;
		child_16.active := active;
MODULE leaf_set_blackboard_variables(status_module)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := status_module.status;
MODULE composite_selector_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(active) : invalid;
				child_0.status = incoming_status : outgoing_status;
				TRUE : child_0.status;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				TRUE : TRUE;
			esac;
MODULE leaf_check_blackboard_variable_value(blackboard, variable, check)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (blackboard.variable_exists[variable]) & (check.result) ? success : failure;
MODULE composite_selector_without_memory_11(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				!(child_2.internal_status = failure) : child_2.internal_status;
				!(child_3.internal_status = failure) : child_3.internal_status;
				!(child_4.internal_status = failure) : child_4.internal_status;
				!(child_5.internal_status = failure) : child_5.internal_status;
				!(child_6.internal_status = failure) : child_6.internal_status;
				!(child_7.internal_status = failure) : child_7.internal_status;
				!(child_8.internal_status = failure) : child_8.internal_status;
				!(child_9.internal_status = failure) : child_9.internal_status;
				!(child_10.internal_status = failure) : child_10.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
		child_2.active := child_1.status = failure;
		child_3.active := child_2.status = failure;
		child_4.active := child_3.status = failure;
		child_5.active := child_4.status = failure;
		child_6.active := child_5.status = failure;
		child_7.active := child_6.status = failure;
		child_8.active := child_7.status = failure;
		child_9.active := child_8.status = failure;
		child_10.active := child_9.status = failure;
MODULE composite_sequence_with_memory_2(child_0, child_1, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
MODULE composite_parallel_unsynchronized_success_on_all_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
MODULE composite_sequence_with_memory_3(child_0, child_1, child_2, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
				(2 >= resume_point) & !(child_2.internal_status = success) : child_2.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
		child_2.active := (2 >= resume_point) & ((2 = resume_point) | (child_1.status = success));
MODULE composite_parallel_unsynchronized_success_on_all_3(child_0, child_1, child_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
MODULE composite_selector_without_memory_3(child_0, child_1, child_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				!(child_2.internal_status = failure) : child_2.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
		child_2.active := child_1.status = failure;
MODULE composite_sequence_with_memory_1(child_0, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
MODULE leaf_timer()
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := input_status;
	VAR
		input_status : {success, running};
MODULE define_variables
	DEFINE
		battery := 0;
		battery_low_warning := 1;
		battery_dot_batt_charge_remaining := 2;
		bb_rth := 3;
		bb_rth_warning := 4;
		bb_rth_dot_data := 5;
		bb_geofence := 6;
		bb_geofence_warning := 7;
		bb_geofence_dot_data := 8;
		lec2_am_r := 9;
		lec2_am_r_speed_warning := 10;
		lec2_am_r_pipe_warning := 11;
		lec2_am_r_dot_confs := 12;
		lec2_am_l := 13;
		lec2_am_l_speed_warning := 14;
		lec2_am_l_pipe_warning := 15;
		lec2_am_l_dot_confs := 16;
		bb_pipelost := 17;
		bb_pipe_lost_warning := 18;
		bb_pipelost_dot_data := 19;
		bb_mission_dot_data := 20;
		bb_sensor_failure := 21;
		bb_sensor_failure_warning := 22;
		bb_sensor_failure_dot_data := 23;
		bb_waypoints_completed := 24;
		bb_waypoints_completed_dot_data := 25;
		bb_mission := 26;
		dd_output := 27;
		dd_z_axis_warning := 28;
		dd_xy_axis_degradation := 29;
		dd_output_dot_data := 30;
		total_degradation := 31;
		fls_range := 32;
		obstacle_standoff_warning := 33;
		obstacle_min_standoff := 34;
		fls_range_dot_range := 35;
		obstacle_in_view := 36;
		bb_fls_warning := 37;
		obstacle_in_view_dot_stamp := 38;
		emergency_stop_warning := 39;
		hsd_pipeline_mapping := 40;
		hsd_to_waypoint := 41;
		hsd_to_rth := 42;
		hsd_to_surface := 43;
		rtreach_out := 44;
		rtreach_out_dot_data := 45;
		HSD_out_dot_heading := 46;
		uuv_max_speed := 47;
		mission_file := 48;
		refLat := 49;
		refLon := 50;
		next_mission := 51;
		decision_threshold := 52;
		HSD_out := 53;
		bb_obstacle_warning := 54;
		cm_hsd_input := 55;
		HSD_out_dot_speed := 56;
		HSD_out_dot_depth := 57;
		bb_home_reached := 58;
		bb_home_dist := 59;
		bb_home_dist_dot_data := 60;
		pipe_mapping_enable := 61;
MODULE define_nodes
	DEFINE
		BlueROV := 0;
		topics2bb := 1;
		battery2bb := 2;
		rth2bb := 3;
		geofence2bb := 4;
		lec2_am_r_2bb := 5;
		lec2_am_l_2bb := 6;
		pipe_lost2bb := 7;
		sensor_failure2bb := 8;
		waypoints_completed2bb := 9;
		mission2bb := 10;
		ddlec2bb := 11;
		fls2bb := 12;
		fls_warning2bb := 13;
		hsd_pipe2bb := 14;
		hsd_wp2bb := 15;
		hsd_rth2bb := 16;
		hsd_surface2bb := 17;
		rtreach2bb := 18;
		dd_tasks := 19;
		reallocate_check_SIF := 20;
		reallocate_check := 21;
		is_reallocation_requested := 22;
		reallocate_task := 23;
		dd_lec_task := 24;
		mission_server := 25;
		obstacle_avoidance := 26;
		priorities := 27;
		battery_check_SIF := 28;
		battery_check := 29;
		battery_low_fs := 30;
		surface_task := 31;
		sensor_failure_selector_SIF := 32;
		sensor_failure_selector := 33;
		check_sensor_failure := 34;
		surface_task1 := 35;
		emergency_stop_check_SIF := 36;
		emergency_stop_check := 37;
		emergency_stop_fs := 38;
		emergency_stop_tasks := 39;
		emergency_stop_task := 40;
		surface_task2 := 41;
		home_reached_selector_SIF := 42;
		home_reached_selector := 43;
		check_surface := 44;
		surface_task3 := 45;
		obstacle_standoff_check_SIF := 46;
		obstacle_standoff_check := 47;
		obstacle_standoff_fs := 48;
		surface_task4 := 49;
		rth_selector_SIF := 50;
		rth_selector := 51;
		check_rth := 52;
		rth_par := 53;
		rth_task := 54;
		home2bb := 55;
		geofence_selector_SIF := 56;
		geofence_selector := 57;
		check_geofence := 58;
		rth_par1 := 59;
		rth_task1 := 60;
		home2bb1 := 61;
		pipe_lost_selector_SIF := 62;
		pipe_lost_selector := 63;
		check_pipe_post := 64;
		loiter_task1 := 65;
		track_pipe_mission := 66;
		is_track_pipe_mission_requested := 67;
		tracking := 68;
		tracking_task := 69;
		lec2am_speed_cmd := 70;
		lec2am_l_speed_check_SIF := 71;
		lec2am_l_speed_check := 72;
		check_lec2am_ls := 73;
		speed_min_task := 74;
		lec2am_r_speed_check_SIF := 75;
		lec2am_r_speed_check := 76;
		check_lec2am_rs := 77;
		speed_min_task1 := 78;
		speed_max_task := 79;
		lec2am_mapping_cmd := 80;
		lec2am_l_mapping_check_SIF := 81;
		lec2am_l_mapping_check := 82;
		check_lec2am_lp := 83;
		pipe_mapping_disable_task := 84;
		lec2am_r_mapping_check_SIF := 85;
		lec2am_r_mapping_check := 86;
		check_lec2am_rp := 87;
		pipe_mapping_disable_task1 := 88;
		pipe_mapping_enable_task := 89;
		track_pipe_mission_end := 90;
		evaluate := 91;
		waypoint_mission := 92;
		is_waypoint_requested := 93;
		waypoint_selector := 94;
		waypoints_sif_SIF := 95;
		waypoints_sif := 96;
		check_waypoints_completed := 97;
		waypoint_end := 98;
		next_mission := 99;
		loiter_task2 := 100;
		waypoint_task := 101;
		loiter_task := 102;
--battery : 0
----battery2bb
--battery_low_warning : 1
----battery2bb
--battery_dot_batt_charge_remaining : 2
----battery2bb
--bb_rth : 3
----rth2bb
--bb_rth_warning : 4
----mission_server
----rth2bb
--bb_rth_dot_data : 5
----rth2bb
--bb_geofence : 6
----geofence2bb
--bb_geofence_warning : 7
----geofence2bb
--bb_geofence_dot_data : 8
----geofence2bb
--lec2_am_r : 9
----lec2_am_r_2bb
--lec2_am_r_speed_warning : 10
----lec2_am_r_2bb
--lec2_am_r_pipe_warning : 11
----lec2_am_r_2bb
--lec2_am_r_dot_confs : 12
----lec2_am_r_2bb
--lec2_am_l : 13
----lec2_am_l_2bb
--lec2_am_l_speed_warning : 14
----lec2_am_l_2bb
--lec2_am_l_pipe_warning : 15
----lec2_am_l_2bb
--lec2_am_l_dot_confs : 16
----lec2_am_l_2bb
--bb_pipelost : 17
----pipe_lost2bb
--bb_pipe_lost_warning : 18
----pipe_lost2bb
--bb_pipelost_dot_data : 19
----pipe_lost2bb
--bb_mission_dot_data : 20
----mission_server
----mission2bb
----pipe_lost2bb
--bb_sensor_failure : 21
----sensor_failure2bb
--bb_sensor_failure_warning : 22
----sensor_failure2bb
--bb_sensor_failure_dot_data : 23
----sensor_failure2bb
--bb_waypoints_completed : 24
----waypoints_completed2bb
--bb_waypoints_completed_dot_data : 25
----waypoints_completed2bb
--bb_mission : 26
----mission2bb
--dd_output : 27
----ddlec2bb
--dd_z_axis_warning : 28
----ddlec2bb
--dd_xy_axis_degradation : 29
----ddlec2bb
----reallocate_task
--dd_output_dot_data : 30
----ddlec2bb
----reallocate_task
--total_degradation : 31
----ddlec2bb
----reallocate_task
--fls_range : 32
----fls2bb
--obstacle_standoff_warning : 33
----fls2bb
--obstacle_min_standoff : 34
----mission_server
----fls2bb
--fls_range_dot_range : 35
----fls2bb
--obstacle_in_view : 36
----fls_warning2bb
--bb_fls_warning : 37
----fls_warning2bb
--obstacle_in_view_dot_stamp : 38
----fls_warning2bb
--emergency_stop_warning : 39
----mission_server
----rtreach2bb
----fls_warning2bb
--hsd_pipeline_mapping : 40
----hsd_pipe2bb
--hsd_to_waypoint : 41
----hsd_wp2bb
--hsd_to_rth : 42
----hsd_rth2bb
--hsd_to_surface : 43
----hsd_surface2bb
--rtreach_out : 44
----rtreach2bb
--rtreach_out_dot_data : 45
----rtreach2bb
--HSD_out_dot_heading : 46
----loiter_task1
----tracking_task
----speed_min_task
----speed_min_task1
----speed_max_task
----reallocate_task
----obstacle_avoidance
----surface_task
----surface_task1
----loiter_task2
----waypoint_task
----loiter_task
----surface_task2
----surface_task3
----surface_task4
----rth_task
----rth_task1
--uuv_max_speed : 47
----mission_server
----speed_max_task
--mission_file : 48
----mission_server
--refLat : 49
----mission_server
--refLon : 50
----mission_server
--next_mission : 51
----mission_server
----next_mission
--decision_threshold : 52
----mission_server
--HSD_out : 53
----loiter_task1
----tracking_task
----speed_min_task
----speed_min_task1
----speed_max_task
----obstacle_avoidance
----surface_task
----surface_task1
----loiter_task2
----waypoint_task
----loiter_task
----surface_task2
----surface_task3
----surface_task4
----rth_task
----rth_task1
--bb_obstacle_warning : 54
----obstacle_avoidance
--cm_hsd_input : 55
----loiter_task1
----surface_task1
----loiter_task2
----waypoint_task
----tracking_task
----loiter_task
----surface_task2
----surface_task3
----surface_task4
----rth_task
----obstacle_avoidance
----rth_task1
----surface_task
--HSD_out_dot_speed : 56
----loiter_task1
----tracking_task
----speed_min_task
----speed_min_task1
----speed_max_task
----obstacle_avoidance
----surface_task
----surface_task1
----loiter_task2
----waypoint_task
----loiter_task
----surface_task2
----surface_task3
----surface_task4
----rth_task
----rth_task1
--HSD_out_dot_depth : 57
----loiter_task1
----tracking_task
----speed_min_task
----speed_min_task1
----speed_max_task
----obstacle_avoidance
----surface_task
----surface_task1
----loiter_task2
----waypoint_task
----loiter_task
----surface_task2
----surface_task3
----surface_task4
----rth_task
----rth_task1
--bb_home_reached : 58
----check_surface
----home2bb1
----home2bb
--bb_home_dist : 59
----home2bb1
----home2bb
--bb_home_dist_dot_data : 60
----home2bb1
----home2bb
--pipe_mapping_enable : 61
----pipe_mapping_disable_task1
----pipe_mapping_enable_task
----pipe_mapping_disable_task
MODULE blackboard_module(node_names, variable_names, statuses)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		variables := [battery, battery_low_warning, battery_dot_batt_charge_remaining, bb_rth, bb_rth_warning, bb_rth_dot_data, bb_geofence, bb_geofence_warning, bb_geofence_dot_data, lec2_am_r, lec2_am_r_speed_warning, lec2_am_r_pipe_warning, lec2_am_r_dot_confs, lec2_am_l, lec2_am_l_speed_warning, lec2_am_l_pipe_warning, lec2_am_l_dot_confs, bb_pipelost, bb_pipe_lost_warning, bb_pipelost_dot_data, bb_mission_dot_data, bb_sensor_failure, bb_sensor_failure_warning, bb_sensor_failure_dot_data, bb_waypoints_completed, bb_waypoints_completed_dot_data, bb_mission, dd_output, dd_z_axis_warning, dd_xy_axis_degradation, dd_output_dot_data, total_degradation, fls_range, obstacle_standoff_warning, obstacle_min_standoff, fls_range_dot_range, obstacle_in_view, bb_fls_warning, obstacle_in_view_dot_stamp, emergency_stop_warning, hsd_pipeline_mapping, hsd_to_waypoint, hsd_to_rth, hsd_to_surface, rtreach_out, rtreach_out_dot_data, HSD_out_dot_heading, uuv_max_speed, mission_file, refLat, refLon, next_mission, decision_threshold, HSD_out, bb_obstacle_warning, cm_hsd_input, HSD_out_dot_speed, HSD_out_dot_depth, bb_home_reached, bb_home_dist, bb_home_dist_dot_data, pipe_mapping_enable];
		variable_exists := [battery_exists, battery_low_warning_exists, battery_dot_batt_charge_remaining_exists, bb_rth_exists, bb_rth_warning_exists, bb_rth_dot_data_exists, bb_geofence_exists, bb_geofence_warning_exists, bb_geofence_dot_data_exists, lec2_am_r_exists, lec2_am_r_speed_warning_exists, lec2_am_r_pipe_warning_exists, lec2_am_r_dot_confs_exists, lec2_am_l_exists, lec2_am_l_speed_warning_exists, lec2_am_l_pipe_warning_exists, lec2_am_l_dot_confs_exists, bb_pipelost_exists, bb_pipe_lost_warning_exists, bb_pipelost_dot_data_exists, bb_mission_dot_data_exists, bb_sensor_failure_exists, bb_sensor_failure_warning_exists, bb_sensor_failure_dot_data_exists, bb_waypoints_completed_exists, bb_waypoints_completed_dot_data_exists, bb_mission_exists, dd_output_exists, dd_z_axis_warning_exists, dd_xy_axis_degradation_exists, dd_output_dot_data_exists, total_degradation_exists, fls_range_exists, obstacle_standoff_warning_exists, obstacle_min_standoff_exists, fls_range_dot_range_exists, obstacle_in_view_exists, bb_fls_warning_exists, obstacle_in_view_dot_stamp_exists, emergency_stop_warning_exists, hsd_pipeline_mapping_exists, hsd_to_waypoint_exists, hsd_to_rth_exists, hsd_to_surface_exists, rtreach_out_exists, rtreach_out_dot_data_exists, HSD_out_dot_heading_exists, uuv_max_speed_exists, mission_file_exists, refLat_exists, refLon_exists, next_mission_exists, decision_threshold_exists, HSD_out_exists, bb_obstacle_warning_exists, cm_hsd_input_exists, HSD_out_dot_speed_exists, HSD_out_dot_depth_exists, bb_home_reached_exists, bb_home_dist_exists, bb_home_dist_dot_data_exists, pipe_mapping_enable_exists];
		battery_exists := TRUE;
		battery_low_warning_exists := TRUE;
		battery_dot_batt_charge_remaining_exists := TRUE;
		bb_rth_exists := TRUE;
		bb_rth_warning_exists := TRUE;
		bb_rth_dot_data_exists := TRUE;
		bb_geofence_exists := TRUE;
		bb_geofence_warning_exists := TRUE;
		bb_geofence_dot_data_exists := TRUE;
		lec2_am_r_exists := TRUE;
		lec2_am_r_speed_warning_exists := TRUE;
		lec2_am_r_pipe_warning_exists := TRUE;
		lec2_am_r_dot_confs_exists := TRUE;
		lec2_am_l_exists := TRUE;
		lec2_am_l_speed_warning_exists := TRUE;
		lec2_am_l_pipe_warning_exists := TRUE;
		lec2_am_l_dot_confs_exists := TRUE;
		bb_pipelost_exists := TRUE;
		bb_pipe_lost_warning_exists := TRUE;
		bb_pipelost_dot_data_exists := TRUE;
		bb_mission_dot_data_exists := TRUE;
		bb_sensor_failure_exists := TRUE;
		bb_sensor_failure_warning_exists := TRUE;
		bb_sensor_failure_dot_data_exists := TRUE;
		bb_waypoints_completed_exists := TRUE;
		bb_waypoints_completed_dot_data_exists := TRUE;
		bb_mission_exists := TRUE;
		dd_output_exists := TRUE;
		dd_z_axis_warning_exists := TRUE;
		dd_xy_axis_degradation_exists := TRUE;
		dd_output_dot_data_exists := TRUE;
		total_degradation_exists := TRUE;
		fls_range_exists := TRUE;
		obstacle_standoff_warning_exists := TRUE;
		obstacle_min_standoff_exists := TRUE;
		fls_range_dot_range_exists := TRUE;
		obstacle_in_view_exists := TRUE;
		bb_fls_warning_exists := TRUE;
		obstacle_in_view_dot_stamp_exists := TRUE;
		emergency_stop_warning_exists := TRUE;
		hsd_pipeline_mapping_exists := TRUE;
		hsd_to_waypoint_exists := TRUE;
		hsd_to_rth_exists := TRUE;
		hsd_to_surface_exists := TRUE;
		rtreach_out_exists := TRUE;
		rtreach_out_dot_data_exists := TRUE;
		HSD_out_dot_heading_exists := TRUE;
		uuv_max_speed_exists := TRUE;
		mission_file_exists := TRUE;
		refLat_exists := TRUE;
		refLon_exists := TRUE;
		next_mission_exists := TRUE;
		decision_threshold_exists := TRUE;
		HSD_out_exists := TRUE;
		bb_obstacle_warning_exists := TRUE;
		cm_hsd_input_exists := TRUE;
		HSD_out_dot_speed_exists := TRUE;
		HSD_out_dot_depth_exists := TRUE;
		bb_home_reached_exists := TRUE;
		bb_home_dist_exists := TRUE;
		bb_home_dist_dot_data_exists := TRUE;
		pipe_mapping_enable_exists := TRUE;
	VAR
		battery : 0..1;
		battery_low_warning : 0..1;
		battery_dot_batt_charge_remaining : 0..1;
		bb_rth : 0..1;
		bb_rth_warning : 0..1;
		bb_rth_dot_data : 0..1;
		bb_geofence : 0..1;
		bb_geofence_warning : 0..1;
		bb_geofence_dot_data : 0..1;
		lec2_am_r : 0..1;
		lec2_am_r_speed_warning : 0..1;
		lec2_am_r_pipe_warning : 0..1;
		lec2_am_r_dot_confs : 0..1;
		lec2_am_l : 0..1;
		lec2_am_l_speed_warning : 0..1;
		lec2_am_l_pipe_warning : 0..1;
		lec2_am_l_dot_confs : 0..1;
		bb_pipelost : 0..1;
		bb_pipe_lost_warning : 0..1;
		bb_pipelost_dot_data : 0..1;
		bb_mission_dot_data : 0..1;
		bb_sensor_failure : 0..1;
		bb_sensor_failure_warning : 0..1;
		bb_sensor_failure_dot_data : 0..1;
		bb_waypoints_completed : 0..1;
		bb_waypoints_completed_dot_data : 0..1;
		bb_mission : 0..1;
		dd_output : 0..1;
		dd_z_axis_warning : 0..1;
		dd_xy_axis_degradation : 0..1;
		dd_output_dot_data : 0..1;
		total_degradation : 0..1;
		fls_range : 0..1;
		obstacle_standoff_warning : 0..1;
		obstacle_min_standoff : 0..1;
		fls_range_dot_range : 0..1;
		obstacle_in_view : 0..1;
		bb_fls_warning : 0..1;
		obstacle_in_view_dot_stamp : 0..1;
		emergency_stop_warning : 0..1;
		hsd_pipeline_mapping : 0..1;
		hsd_to_waypoint : 0..1;
		hsd_to_rth : 0..1;
		hsd_to_surface : 0..1;
		rtreach_out : 0..1;
		rtreach_out_dot_data : 0..1;
		HSD_out_dot_heading : 0..1;
		uuv_max_speed : 0..1;
		mission_file : 0..1;
		refLat : 0..1;
		refLon : 0..1;
		next_mission : 0..1;
		decision_threshold : 0..1;
		HSD_out : 0..1;
		bb_obstacle_warning : 0..1;
		cm_hsd_input : 0..1;
		HSD_out_dot_speed : 0..1;
		HSD_out_dot_depth : 0..1;
		bb_home_reached : 0..1;
		bb_home_dist : 0..1;
		bb_home_dist_dot_data : 0..1;
		pipe_mapping_enable : 0..1;
	ASSIGN
		init(battery_low_warning) := 0;
		next(battery_low_warning) :=
			case
				statuses[node_names.battery2bb] in {success, running} : {0, 1};
				TRUE : battery_low_warning;
			esac;
MODULE battery2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE rth2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE geofence2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE lec2_am_r_2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE lec2_am_l_2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE pipe_lost2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE sensor_failure2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE waypoints_completed2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE mission2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE ddlec2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE fls2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE fls_warning2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE hsd_pipe2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE hsd_wp2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE hsd_rth2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE hsd_surface2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE rtreach2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.dd_xy_axis_degradation] & (variables[variable_names.dd_xy_axis_degradation]=0);

MODULE reallocate_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE dd_lec_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE mission_server_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE obstacle_avoidance_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE battery_low_fs_CHECK_battery_low_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.battery_low_warning] & (variables[variable_names.battery_low_warning]=0);

MODULE surface_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_sensor_failure_CHECK_bb_sensor_failure_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_sensor_failure_warning] & (variables[variable_names.bb_sensor_failure_warning]=0);

MODULE surface_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE emergency_stop_fs_CHECK_emergency_stop_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.emergency_stop_warning] & (variables[variable_names.emergency_stop_warning]=0);

MODULE emergency_stop_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE surface_task2_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_surface_CHECK_bb_home_reached_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_home_reached] & (variables[variable_names.bb_home_reached]=0);

MODULE surface_task3_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.obstacle_standoff_warning] & (variables[variable_names.obstacle_standoff_warning]=0);

MODULE surface_task4_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_rth_CHECK_bb_rth_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_rth_warning] & (variables[variable_names.bb_rth_warning]=0);

MODULE rth_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE home2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_geofence_CHECK_bb_geofence_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_geofence_warning] & (variables[variable_names.bb_geofence_warning]=0);

MODULE rth_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE home2bb1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_pipe_post_CHECK_bb_pipe_lost_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_pipe_lost_warning] & (variables[variable_names.bb_pipe_lost_warning]=0);

MODULE loiter_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE is_track_pipe_mission_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_mission_dot_data] & (variables[variable_names.bb_mission_dot_data]=0);

MODULE tracking_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.lec2_am_l_speed_warning] & (variables[variable_names.lec2_am_l_speed_warning]=0);

MODULE speed_min_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.lec2_am_r_speed_warning] & (variables[variable_names.lec2_am_r_speed_warning]=0);

MODULE speed_min_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE speed_max_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.lec2_am_l_pipe_warning] & (variables[variable_names.lec2_am_l_pipe_warning]=0);

MODULE pipe_mapping_disable_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.lec2_am_r_pipe_warning] & (variables[variable_names.lec2_am_r_pipe_warning]=0);

MODULE pipe_mapping_disable_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE pipe_mapping_enable_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE is_waypoint_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_mission_dot_data] & (variables[variable_names.bb_mission_dot_data]=0);

MODULE check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		 result := variable_exists[variable_names.bb_waypoints_completed_dot_data] & (variables[variable_names.bb_waypoints_completed_dot_data]=0);

MODULE next_mission_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE loiter_task2_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE waypoint_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

MODULE loiter_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running;
	VAR
		status : {success, failure, running};

