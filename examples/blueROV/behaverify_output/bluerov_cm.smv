MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__BlueROV := -3;
		resume_from_here_in_subtree__topics2bb := -3;
		resume_from_here_in_subtree__battery2bb := -3;
		resume_from_here_in_subtree__rth2bb := -3;
		resume_from_here_in_subtree__geofence2bb := -3;
		resume_from_here_in_subtree__lec2_am_r_2bb := -3;
		resume_from_here_in_subtree__lec2_am_l_2bb := -3;
		resume_from_here_in_subtree__pipe_lost2bb := -3;
		resume_from_here_in_subtree__sensor_failure2bb := -3;
		resume_from_here_in_subtree__waypoints_completed2bb := -3;
		resume_from_here_in_subtree__mission2bb := -3;
		resume_from_here_in_subtree__ddlec2bb := -3;
		resume_from_here_in_subtree__fls2bb := -3;
		resume_from_here_in_subtree__fls_warning2bb := -3;
		resume_from_here_in_subtree__hsd_pipe2bb := -3;
		resume_from_here_in_subtree__hsd_wp2bb := -3;
		resume_from_here_in_subtree__hsd_rth2bb := -3;
		resume_from_here_in_subtree__hsd_surface2bb := -3;
		resume_from_here_in_subtree__rtreach2bb := -3;
		resume_from_here_in_subtree__rtreach_unsafe_value2bb := -3;
		resume_from_here_in_subtree__rtreach_index2bb := -3;
		resume_from_here_in_subtree__dd_tasks := -3;
		resume_from_here_in_subtree__mission_server := -3;
		resume_from_here_in_subtree__obstacle_avoidance := -3;
		resume_from_here_in_subtree__rth_task := -3;
		resume_from_here_in_subtree__home2bb := -3;
		resume_from_here_in_subtree__rth_task_1 := -3;
		resume_from_here_in_subtree__home2bb_1 := -3;
		resume_from_here_in_subtree__tracking_task := -3;
		resume_from_here_in_subtree__lec2am_speed_cmd := -3;
		resume_from_here_in_subtree__lec2am_mapping_cmd := -3;
		trace_running_source_surface_task_2 := (surface_task_2.status = running) ? node_names.surface_task_2 : -2;
		trace_running_source_emergency_stop_tasks := 
			case
				!(trace_running_source_surface_task_2 = -2) : trace_running_source_surface_task_2;
				TRUE : -2;
			esac;
		trace_running_source_emergency_stop_check_1 := 
			case
				!(trace_running_source_emergency_stop_tasks = -2) : trace_running_source_emergency_stop_tasks;
				TRUE : -2;
			esac;
		trace_running_source_emergency_stop_check := 
			case
				!(trace_running_source_emergency_stop_check_1 = -2) : trace_running_source_emergency_stop_check_1;
				TRUE : -2;
			esac;
		trace_running_source_tracking := (tracking.status = running) ? node_names.tracking : -2;
		trace_running_source_track_pipe_mission := 
			case
				!(trace_running_source_tracking = -2) : trace_running_source_tracking;
				TRUE : -2;
			esac;
		trace_running_source_loiter_task_1 := (loiter_task_1.status = running) ? node_names.loiter_task_1 : -2;
		trace_running_source_waypoint_end := 
			case
				!(trace_running_source_loiter_task_1 = -2) : trace_running_source_loiter_task_1;
				TRUE : -2;
			esac;
		trace_running_source_waypoints_sif_1 := 
			case
				!(trace_running_source_waypoint_end = -2) : trace_running_source_waypoint_end;
				TRUE : -2;
			esac;
		trace_running_source_waypoints_sif := 
			case
				!(trace_running_source_waypoints_sif_1 = -2) : trace_running_source_waypoints_sif_1;
				TRUE : -2;
			esac;
		trace_running_source_waypoint_selector := 
			case
				!(trace_running_source_waypoints_sif = -2) : trace_running_source_waypoints_sif;
				(waypoint_selector.status = running) : node_names.waypoint_selector;
				TRUE : -2;
			esac;
		trace_running_source_waypoint_mission := 
			case
				!(trace_running_source_waypoint_selector = -2) : trace_running_source_waypoint_selector;
				TRUE : -2;
			esac;
		trace_running_source_priorities := 
			case
				!(trace_running_source_emergency_stop_check = -2) : trace_running_source_emergency_stop_check;
				!(trace_running_source_track_pipe_mission = -2) : trace_running_source_track_pipe_mission;
				!(trace_running_source_waypoint_mission = -2) : trace_running_source_waypoint_mission;
				TRUE : -2;
			esac;
		child_index_to_resume_from__emergency_stop_tasks := 
			case
				(resume_from_here_in_subtree__priorities in {43}) : 1;
				TRUE : -2;
			esac;
		child_index_to_resume_from__track_pipe_mission := 
			case
				(resume_from_here_in_subtree__priorities in {70}) : 1;
				TRUE : -2;
			esac;
		child_index_to_resume_from__waypoint_end := 
			case
				(resume_from_here_in_subtree__priorities in {100}) : 1;
				TRUE : -2;
			esac;
		child_index_to_resume_from__waypoint_mission := 
			case
				(resume_from_here_in_subtree__priorities in {100, 94}) : 1;
				TRUE : -2;
			esac;
		BlueROV.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		var_HSD_out_stage_1 := 
			case
				!(speed_min_task.active) : var_HSD_out;
				TRUE : uuv_min_speed;
			esac;
		var_HSD_out_stage_2 := 
			case
				!(speed_min_task_1.active) : var_HSD_out_stage_1;
				TRUE : uuv_min_speed;
			esac;
		var_HSD_out_stage_3 := 
			case
				!(speed_max_task.active) : var_HSD_out_stage_2;
				TRUE : uuv_max_speed;
			esac;
		var_battery_low_warning_stage_1 := 
			case
				!(battery2bb.active) : var_battery_low_warning;
				(battery2bb_update_success = FALSE) : var_battery_low_warning;
				TRUE : var_battery <= 0;
			esac;
		var_bb_fls_warning_stage_1 := 
			case
				!(fls_warning2bb.active) : var_bb_fls_warning;
				(fls_warning2bb_update_success = FALSE) : var_bb_fls_warning;
				TRUE : var_bb_fls_warning | var_obstacle_in_view;
			esac;
		var_bb_geofence_warning_stage_1 := 
			case
				!(geofence2bb.active) : var_bb_geofence_warning;
				(geofence2bb_update_success = FALSE) : var_bb_geofence_warning;
				TRUE : var_bb_geofence_warning | var_bb_geofence;
			esac;
		var_bb_home_reached_stage_1 := 
			case
				!(home2bb.active) : var_bb_home_reached;
				(home2bb_update_success = FALSE) : var_bb_home_reached;
				TRUE : var_bb_home_reached | var_bb_home_dist < 15;
			esac;
		var_bb_home_reached_stage_2 := 
			case
				!(home2bb_1.active) : var_bb_home_reached_stage_1;
				(home2bb_1_update_success = FALSE) : var_bb_home_reached_stage_1;
				TRUE : var_bb_home_reached_stage_1 | var_bb_home_dist < 15;
			esac;
		var_bb_pipe_lost_warning_stage_1 := 
			case
				!(pipe_lost2bb.active) : var_bb_pipe_lost_warning;
				(pipe_lost2bb_update_success = FALSE) : var_bb_pipe_lost_warning;
				TRUE : var_bb_pipelost & var_bb_mission = pipe_following;
			esac;
		var_bb_rth_warning_stage_1 := 
			case
				!(rth2bb.active) : var_bb_rth_warning;
				(rth2bb_update_success = FALSE) : var_bb_rth_warning;
				TRUE : var_bb_rth_warning | var_bb_rth;
			esac;
		var_bb_rth_warning_stage_2 := 
			case
				!(mission_server.active) : var_bb_rth_warning_stage_1;
				var_next_mission : var_mission_idx_stage_1 = var_max_mission;
				TRUE : var_bb_rth_warning_stage_1;
			esac;
		var_bb_sensor_failure_warning_stage_1 := 
			case
				!(sensor_failure2bb.active) : var_bb_sensor_failure_warning;
				(sensor_failure2bb_update_success = FALSE) : var_bb_sensor_failure_warning;
				TRUE : var_bb_sensor_failure_warning | var_bb_sensor_failure;
			esac;
		var_cm_hsd_input_stage_1 := 
			case
				!(obstacle_avoidance.active) : var_cm_hsd_input;
				var_bb_obstacle_warning_stage_1 : cm_obstacle_avoidance_task;
				TRUE : var_cm_hsd_input;
			esac;
		var_cm_hsd_input_stage_2 := 
			case
				!(surface_task.active) : var_cm_hsd_input_stage_1;
				TRUE : cm_surface_task;
			esac;
		var_cm_hsd_input_stage_3 := 
			case
				!(surface_task_1.active) : var_cm_hsd_input_stage_2;
				TRUE : cm_surface_task;
			esac;
		var_cm_hsd_input_stage_4 := 
			case
				!(surface_task_2.active) : var_cm_hsd_input_stage_3;
				TRUE : cm_surface_task;
			esac;
		var_cm_hsd_input_stage_5 := 
			case
				!(surface_task_3.active) : var_cm_hsd_input_stage_4;
				TRUE : cm_surface_task;
			esac;
		var_cm_hsd_input_stage_6 := 
			case
				!(surface_task_4.active) : var_cm_hsd_input_stage_5;
				TRUE : cm_surface_task;
			esac;
		var_cm_hsd_input_stage_7 := 
			case
				!(rth_task.active) : var_cm_hsd_input_stage_6;
				TRUE : cm_rth_task;
			esac;
		var_cm_hsd_input_stage_8 := 
			case
				!(rth_task_1.active) : var_cm_hsd_input_stage_7;
				TRUE : cm_rth_task;
			esac;
		var_cm_hsd_input_stage_9 := 
			case
				!(loiter_task.active) : var_cm_hsd_input_stage_8;
				TRUE : cm_loiter_task;
			esac;
		var_cm_hsd_input_stage_10 := 
			case
				!(tracking_task.active) : var_cm_hsd_input_stage_9;
				TRUE : cm_tracking_task;
			esac;
		var_cm_hsd_input_stage_11 := 
			case
				!(loiter_task_1.active) : var_cm_hsd_input_stage_10;
				TRUE : cm_loiter_task;
			esac;
		var_cm_hsd_input_stage_12 := 
			case
				!(waypoint_task.active) : var_cm_hsd_input_stage_11;
				TRUE : cm_waypoint_task;
			esac;
		var_cm_hsd_input_stage_13 := 
			case
				!(loiter_task_2.active) : var_cm_hsd_input_stage_12;
				TRUE : cm_loiter_task;
			esac;
		var_dd_xy_axis_degradation_stage_1 := 
			case
				!(ddlec2bb.active) : var_dd_xy_axis_degradation;
				(ddlec2bb_update_success = FALSE) : var_dd_xy_axis_degradation;
				TRUE : var_dd_output = xy_warn | var_dd_xy_axis_degradation & !(var_dd_output = safe);
			esac;
		var_dd_z_axis_warning_stage_1 := 
			case
				!(ddlec2bb.active) : var_dd_z_axis_warning;
				(ddlec2bb_update_success = FALSE) : var_dd_z_axis_warning;
				TRUE : var_dd_output = z_warn | var_dd_z_axis_warning & !(var_dd_output = safe);
			esac;
		var_emergency_stop_warning_stage_1 := 
			case
				!(fls_warning2bb.active) : var_emergency_stop_warning;
				(fls_warning2bb_update_success = FALSE) : var_emergency_stop_warning;
				TRUE : var_emergency_stop_warning | var_obstacle_in_view;
			esac;
		var_lec2_am_l_pipe_warning_stage_1 := 
			case
				!(lec2_am_l_2bb.active) : var_lec2_am_l_pipe_warning;
				(lec2_am_l_2bb_update_success = FALSE) : var_lec2_am_l_pipe_warning;
				TRUE : var_lec2_am_l = pipe | var_lec2_am_l = speed_pipe;
			esac;
		var_lec2_am_l_speed_warning_stage_1 := 
			case
				!(lec2_am_l_2bb.active) : var_lec2_am_l_speed_warning;
				(lec2_am_l_2bb_update_success = FALSE) : var_lec2_am_l_speed_warning;
				TRUE : var_lec2_am_l = speed | var_lec2_am_l = speed_pipe;
			esac;
		var_lec2_am_r_pipe_warning_stage_1 := 
			case
				!(lec2_am_r_2bb.active) : var_lec2_am_r_pipe_warning;
				(lec2_am_r_2bb_update_success = FALSE) : var_lec2_am_r_pipe_warning;
				TRUE : var_lec2_am_r = pipe | var_lec2_am_r = speed_pipe;
			esac;
		var_lec2_am_r_speed_warning_stage_1 := 
			case
				!(lec2_am_r_2bb.active) : var_lec2_am_r_speed_warning;
				(lec2_am_r_2bb_update_success = FALSE) : var_lec2_am_r_speed_warning;
				TRUE : var_lec2_am_r = speed | var_lec2_am_r = speed_pipe;
			esac;
		var_max_mission := 
			case
				TRUE : 4;
			esac;
		var_mission_idx_stage_1 := 
			case
				!(mission_server.active) : var_mission_idx;
				var_next_mission : min(var_max_mission, var_mission_idx + 1);
				TRUE : var_mission_idx;
			esac;
		var_next_mission_stage_1 := 
			case
				!(mission_server.active) : var_next_mission;
				TRUE : FALSE;
			esac;
		var_next_mission_stage_2 := 
			case
				!(next_mission.active) : var_next_mission_stage_1;
				TRUE : TRUE;
			esac;
		var_obstacle_standoff_warning_stage_1 := 
			case
				!(fls2bb.active) : var_obstacle_standoff_warning;
				(fls2bb_update_success = FALSE) : var_obstacle_standoff_warning;
				TRUE : var_fls_range = danger_zone;
			esac;
		var_pipe_mapping_enable_stage_1 := 
			case
				!(pipe_mapping_disable_task.active) : var_pipe_mapping_enable;
				TRUE : FALSE;
			esac;
		var_pipe_mapping_enable_stage_2 := 
			case
				!(pipe_mapping_disable_task_1.active) : var_pipe_mapping_enable_stage_1;
				TRUE : FALSE;
			esac;
		var_pipe_mapping_enable_stage_3 := 
			case
				!(pipe_mapping_enable_task.active) : var_pipe_mapping_enable_stage_2;
				TRUE : TRUE;
			esac;
		var_rtreach_long_term_warning_stage_1 := 
			case
				!(rtreach2bb.active) : var_rtreach_long_term_warning;
				(rtreach2bb_update_success = FALSE) : var_rtreach_long_term_warning;
				TRUE : var_rtreach_result = long | var_rtreach_result = short_long;
			esac;
		var_rtreach_warning_stage_1 := 
			case
				!(rtreach2bb.active) : var_rtreach_warning;
				(rtreach2bb_update_success = FALSE) : var_rtreach_warning;
				TRUE : var_rtreach_result = short | var_rtreach_result = short_long;
			esac;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		resume_from_here_in_subtree__priorities : {29, 43, 70, 94, 100};
		BlueROV : composite_parallel_success_on_all_without_memory_5(topics2bb, dd_tasks, mission_server, obstacle_avoidance, priorities);
		battery2bb : battery2bb_module(battery2bb_update_success);
		battery_check : decorator_X_is_Y(battery_check_1, success, failure);
		battery_check_1 : composite_selector_without_memory_2(battery_low_fs, surface_task);
		battery_low_fs : battery_low_fs_module(var_battery_low_warning_stage_1);
		check_geofence : check_geofence_module(var_bb_geofence_warning_stage_1);
		check_lec2am_lp : check_lec2am_lp_module(var_lec2_am_l_pipe_warning_stage_1);
		check_lec2am_ls : check_lec2am_ls_module(var_lec2_am_l_speed_warning_stage_1);
		check_lec2am_rp : check_lec2am_rp_module(var_lec2_am_r_pipe_warning_stage_1);
		check_lec2am_rs : check_lec2am_rs_module(var_lec2_am_r_speed_warning_stage_1);
		check_pipe_post : check_pipe_post_module(var_bb_pipe_lost_warning_stage_1);
		check_rth : check_rth_module(var_bb_rth_warning_stage_2);
		check_sensor_failure : check_sensor_failure_module(var_bb_sensor_failure_warning_stage_1);
		check_surface : check_surface_module(var_bb_home_reached);
		check_waypoints_completed : check_waypoints_completed_module(var_bb_waypoints_completed);
		dd_lec_task : running_DEFAULT_module();
		dd_tasks : composite_selector_without_memory_2(reallocate_check, dd_lec_task);
		ddlec2bb : ddlec2bb_module(ddlec2bb_update_success);
		emergency_stop_check : decorator_X_is_Y(emergency_stop_check_1, success, failure);
		emergency_stop_check_1 : composite_selector_without_memory_2(emergency_stop_fs, emergency_stop_tasks);
		emergency_stop_fs : emergency_stop_fs_module(var_emergency_stop_warning_stage_1);
		emergency_stop_task : success_DEFAULT_module();
		emergency_stop_tasks : composite_sequence_with_memory_2(emergency_stop_task, surface_task_2, child_index_to_resume_from__emergency_stop_tasks);
		fls2bb : fls2bb_module(fls2bb_update_success);
		fls_warning2bb : fls_warning2bb_module(fls_warning2bb_update_success);
		geofence2bb : geofence2bb_module(geofence2bb_update_success);
		geofence_selector : decorator_X_is_Y(geofence_selector_1, success, failure);
		geofence_selector_1 : composite_selector_without_memory_2(check_geofence, rth_par_1);
		home2bb : home2bb_module(home2bb_update_success);
		home2bb_1 : home2bb_1_module(home2bb_1_update_success);
		home_reached_selector : decorator_X_is_Y(home_reached_selector_1, success, failure);
		home_reached_selector_1 : composite_selector_without_memory_2(check_surface, surface_task_3);
		hsd_pipe2bb : hsd_pipe2bb_module(hsd_pipe2bb_update_success);
		hsd_rth2bb : hsd_rth2bb_module(hsd_rth2bb_update_success);
		hsd_surface2bb : hsd_surface2bb_module(hsd_surface2bb_update_success);
		hsd_wp2bb : hsd_wp2bb_module(hsd_wp2bb_update_success);
		is_reallocation_requested : is_reallocation_requested_module(var_dd_xy_axis_degradation_stage_1);
		is_track_pipe_mission_requested : is_track_pipe_mission_requested_module(var_bb_mission);
		is_waypoint_requested : is_waypoint_requested_module(var_bb_mission);
		lec2_am_l_2bb : lec2_am_l_2bb_module(lec2_am_l_2bb_update_success);
		lec2_am_r_2bb : lec2_am_r_2bb_module(lec2_am_r_2bb_update_success);
		lec2am_l_mapping_check : decorator_X_is_Y(lec2am_l_mapping_check_1, success, failure);
		lec2am_l_mapping_check_1 : composite_selector_without_memory_2(check_lec2am_lp, pipe_mapping_disable_task);
		lec2am_l_speed_check : decorator_X_is_Y(lec2am_l_speed_check_1, success, failure);
		lec2am_l_speed_check_1 : composite_selector_without_memory_2(check_lec2am_ls, speed_min_task);
		lec2am_mapping_cmd : composite_selector_without_memory_3(lec2am_l_mapping_check, lec2am_r_mapping_check, pipe_mapping_enable_task);
		lec2am_r_mapping_check : decorator_X_is_Y(lec2am_r_mapping_check_1, success, failure);
		lec2am_r_mapping_check_1 : composite_selector_without_memory_2(check_lec2am_rp, pipe_mapping_disable_task_1);
		lec2am_r_speed_check : decorator_X_is_Y(lec2am_r_speed_check_1, success, failure);
		lec2am_r_speed_check_1 : composite_selector_without_memory_2(check_lec2am_rs, speed_min_task_1);
		lec2am_speed_cmd : composite_selector_without_memory_3(lec2am_l_speed_check, lec2am_r_speed_check, speed_max_task);
		loiter_task : running_DEFAULT_module();
		loiter_task_1 : running_DEFAULT_module();
		loiter_task_2 : running_DEFAULT_module();
		mission2bb : mission2bb_module(mission2bb_update_success);
		mission_server : running_DEFAULT_module();
		next_mission : success_DEFAULT_module();
		obstacle_avoidance : running_DEFAULT_module();
		obstacle_standoff_check : decorator_X_is_Y(obstacle_standoff_check_1, success, failure);
		obstacle_standoff_check_1 : composite_selector_without_memory_2(obstacle_standoff_fs, surface_task_4);
		obstacle_standoff_fs : obstacle_standoff_fs_module(var_obstacle_standoff_warning_stage_1);
		pipe_lost2bb : pipe_lost2bb_module(pipe_lost2bb_update_success);
		pipe_lost_selector : decorator_X_is_Y(pipe_lost_selector_1, success, failure);
		pipe_lost_selector_1 : composite_selector_without_memory_2(check_pipe_post, loiter_task);
		pipe_mapping_disable_task : running_DEFAULT_module();
		pipe_mapping_disable_task_1 : running_DEFAULT_module();
		pipe_mapping_enable_task : success_DEFAULT_module();
		priorities : composite_selector_without_memory_11(battery_check, sensor_failure_selector, emergency_stop_check, home_reached_selector, obstacle_standoff_check, rth_selector, geofence_selector, pipe_lost_selector, track_pipe_mission, waypoint_mission, loiter_task_2);
		reallocate_check : decorator_X_is_Y(reallocate_check_1, success, failure);
		reallocate_check_1 : composite_selector_without_memory_2(is_reallocation_requested, reallocate_task);
		reallocate_task : running_DEFAULT_module();
		rth2bb : rth2bb_module(rth2bb_update_success);
		rth_par : composite_parallel_success_on_all_without_memory_2(rth_task, home2bb);
		rth_par_1 : composite_parallel_success_on_all_without_memory_2(rth_task_1, home2bb_1);
		rth_selector : decorator_X_is_Y(rth_selector_1, success, failure);
		rth_selector_1 : composite_selector_without_memory_2(check_rth, rth_par);
		rth_task : running_DEFAULT_module();
		rth_task_1 : running_DEFAULT_module();
		rtreach2bb : rtreach2bb_module(rtreach2bb_update_success);
		rtreach_index2bb : rtreach_index2bb_module(rtreach_index2bb_update_success);
		rtreach_unsafe_value2bb : rtreach_unsafe_value2bb_module(rtreach_unsafe_value2bb_update_success);
		sensor_failure2bb : sensor_failure2bb_module(sensor_failure2bb_update_success);
		sensor_failure_selector : decorator_X_is_Y(sensor_failure_selector_1, success, failure);
		sensor_failure_selector_1 : composite_selector_without_memory_2(check_sensor_failure, surface_task_1);
		speed_max_task : running_DEFAULT_module();
		speed_min_task : running_DEFAULT_module();
		speed_min_task_1 : running_DEFAULT_module();
		surface_task : running_DEFAULT_module();
		surface_task_1 : running_DEFAULT_module();
		surface_task_2 : running_DEFAULT_module();
		surface_task_3 : running_DEFAULT_module();
		surface_task_4 : running_DEFAULT_module();
		topics2bb : composite_parallel_success_on_all_without_memory_19(battery2bb, rth2bb, geofence2bb, lec2_am_r_2bb, lec2_am_l_2bb, pipe_lost2bb, sensor_failure2bb, waypoints_completed2bb, mission2bb, ddlec2bb, fls2bb, fls_warning2bb, hsd_pipe2bb, hsd_wp2bb, hsd_rth2bb, hsd_surface2bb, rtreach2bb, rtreach_unsafe_value2bb, rtreach_index2bb);
		track_pipe_mission : composite_sequence_with_memory_2(is_track_pipe_mission_requested, tracking, child_index_to_resume_from__track_pipe_mission);
		tracking : composite_parallel_success_on_all_without_memory_3(tracking_task, lec2am_speed_cmd, lec2am_mapping_cmd);
		tracking_task : running_DEFAULT_module();
		waypoint_end : composite_sequence_with_memory_2(next_mission, loiter_task_1, child_index_to_resume_from__waypoint_end);
		waypoint_mission : composite_sequence_with_memory_2(is_waypoint_requested, waypoint_selector, child_index_to_resume_from__waypoint_mission);
		waypoint_selector : composite_selector_without_memory_2(waypoints_sif, waypoint_task);
		waypoint_task : running_DEFAULT_module();
		waypoints_completed2bb : waypoints_completed2bb_module(waypoints_completed2bb_update_success);
		waypoints_sif : decorator_X_is_Y(waypoints_sif_1, success, failure);
		waypoints_sif_1 : composite_selector_without_memory_2(check_waypoints_completed, waypoint_end);
		--START OF BLACKBOARD VARIABLES DECLARATION
		battery2bb_update_success : boolean;
		battery2bb_update_success_stage_1 : boolean;
		ddlec2bb_update_success : boolean;
		ddlec2bb_update_success_stage_1 : boolean;
		fls2bb_update_success : boolean;
		fls2bb_update_success_stage_1 : boolean;
		fls_warning2bb_update_success : boolean;
		fls_warning2bb_update_success_stage_1 : boolean;
		geofence2bb_update_success : boolean;
		geofence2bb_update_success_stage_1 : boolean;
		home2bb_1_update_success : boolean;
		home2bb_1_update_success_stage_1 : boolean;
		home2bb_update_success : boolean;
		home2bb_update_success_stage_1 : boolean;
		hsd_pipe2bb_update_success : boolean;
		hsd_pipe2bb_update_success_stage_1 : boolean;
		hsd_rth2bb_update_success : boolean;
		hsd_rth2bb_update_success_stage_1 : boolean;
		hsd_surface2bb_update_success : boolean;
		hsd_surface2bb_update_success_stage_1 : boolean;
		hsd_wp2bb_update_success : boolean;
		hsd_wp2bb_update_success_stage_1 : boolean;
		lec2_am_l_2bb_update_success : boolean;
		lec2_am_l_2bb_update_success_stage_1 : boolean;
		lec2_am_r_2bb_update_success : boolean;
		lec2_am_r_2bb_update_success_stage_1 : boolean;
		mission2bb_update_success : boolean;
		mission2bb_update_success_stage_1 : boolean;
		pipe_lost2bb_update_success : boolean;
		pipe_lost2bb_update_success_stage_1 : boolean;
		rth2bb_update_success : boolean;
		rth2bb_update_success_stage_1 : boolean;
		rtreach2bb_update_success : boolean;
		rtreach2bb_update_success_stage_1 : boolean;
		rtreach_index2bb_update_success : boolean;
		rtreach_index2bb_update_success_stage_1 : boolean;
		rtreach_unsafe_value2bb_update_success : boolean;
		rtreach_unsafe_value2bb_update_success_stage_1 : boolean;
		sensor_failure2bb_update_success : boolean;
		sensor_failure2bb_update_success_stage_1 : boolean;
		var_HSD_out : {uuv_min_speed, uuv_max_speed};
		var_battery : 0..1;
		var_battery_low_warning : boolean;
		var_bb_fls_warning : boolean;
		var_bb_geofence : boolean;
		var_bb_geofence_warning : boolean;
		var_bb_home_dist : {10, 100};
		var_bb_home_reached : boolean;
		var_bb_mission : {unknown, loitering, pipe_following, waypoint_following, path_following, collision_avoidance, assurance, terminal, e_stop};
		var_bb_obstacle_warning : boolean;
		var_bb_obstacle_warning_stage_1 : boolean;
		var_bb_pipe_lost_warning : boolean;
		var_bb_pipe_mapping_enable : boolean;
		var_bb_pipelost : boolean;
		var_bb_rth : boolean;
		var_bb_rth_warning : boolean;
		var_bb_sensor_failure : boolean;
		var_bb_sensor_failure_warning : boolean;
		var_bb_waypoints_completed : boolean;
		var_cm_hsd_input : {cm_surface_task, cm_rth_task, cm_loiter_task, cm_obstacle_avoidance_task, cm_tracking_task, cm_waypoint_task};
		var_dd_output : {safe, xy_warn, z_warn};
		var_dd_xy_axis_degradation : boolean;
		var_dd_z_axis_warning : boolean;
		var_emergency_stop_warning : boolean;
		var_fls_range : {danger_zone, safe};
		var_lec2_am_l : {safe, speed, pipe, speed_pipe};
		var_lec2_am_l_pipe_warning : boolean;
		var_lec2_am_l_speed_warning : boolean;
		var_lec2_am_r : {safe, speed, pipe, speed_pipe};
		var_lec2_am_r_pipe_warning : boolean;
		var_lec2_am_r_speed_warning : boolean;
		var_lec_dd_am : boolean;
		var_lec_dd_am_warning : boolean;
		var_mission_idx : 0..4;
		var_next_mission : boolean;
		var_obstacle_in_view : boolean;
		var_obstacle_standoff_warning : boolean;
		var_pipe_mapping_enable : boolean;
		var_rtreach_long_term_warning : boolean;
		var_rtreach_result : {safe, short, long, short_long};
		var_rtreach_warning : boolean;
		waypoints_completed2bb_update_success : boolean;
		waypoints_completed2bb_update_success_stage_1 : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		init(resume_from_here_in_subtree__priorities) := 29;
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(var_HSD_out) := 
			case
				TRUE : uuv_min_speed;
			esac;
		init(var_battery) := 
			case
				TRUE : 1;
			esac;
		init(var_battery_low_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_fls_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_geofence) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_geofence_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_home_dist) := 
			case
				TRUE : 10;
			esac;
		init(var_bb_home_reached) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_mission) := 
			case
				TRUE : unknown;
			esac;
		init(var_bb_obstacle_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_pipe_lost_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_pipe_mapping_enable) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_pipelost) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_rth) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_rth_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_sensor_failure) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_sensor_failure_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_bb_waypoints_completed) := 
			case
				TRUE : FALSE;
			esac;
		init(var_cm_hsd_input) := 
			case
				TRUE : cm_surface_task;
			esac;
		init(var_dd_output) := 
			case
				TRUE : safe;
			esac;
		init(var_dd_xy_axis_degradation) := 
			case
				TRUE : FALSE;
			esac;
		init(var_dd_z_axis_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_emergency_stop_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_fls_range) := 
			case
				TRUE : safe;
			esac;
		init(var_lec2_am_l) := 
			case
				TRUE : safe;
			esac;
		init(var_lec2_am_l_pipe_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_lec2_am_l_speed_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_lec2_am_r) := 
			case
				TRUE : safe;
			esac;
		init(var_lec2_am_r_pipe_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_lec2_am_r_speed_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_lec_dd_am) := 
			case
				TRUE : FALSE;
			esac;
		init(var_lec_dd_am_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_mission_idx) := 
			case
				TRUE : 0;
			esac;
		init(var_next_mission) := 
			case
				TRUE : FALSE;
			esac;
		init(var_obstacle_in_view) := 
			case
				TRUE : FALSE;
			esac;
		init(var_obstacle_standoff_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_pipe_mapping_enable) := 
			case
				TRUE : FALSE;
			esac;
		init(var_rtreach_long_term_warning) := 
			case
				TRUE : FALSE;
			esac;
		init(var_rtreach_result) := 
			case
				TRUE : safe;
			esac;
		init(var_rtreach_warning) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		next(resume_from_here_in_subtree__priorities) := 
			case
				(BlueROV.status in {success, failure}) : node_names.priorities;
				(priorities.status in {success, failure}) : node_names.priorities;
				TRUE : max(trace_running_source_priorities, node_names.priorities);
			esac;
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(battery2bb_update_success) := battery2bb_update_success_stage_1;
		battery2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(ddlec2bb_update_success) := ddlec2bb_update_success_stage_1;
		ddlec2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(fls2bb_update_success) := fls2bb_update_success_stage_1;
		fls2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(fls_warning2bb_update_success) := fls_warning2bb_update_success_stage_1;
		fls_warning2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(geofence2bb_update_success) := geofence2bb_update_success_stage_1;
		geofence2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(home2bb_1_update_success) := home2bb_1_update_success_stage_1;
		home2bb_1_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(home2bb_update_success) := home2bb_update_success_stage_1;
		home2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(hsd_pipe2bb_update_success) := hsd_pipe2bb_update_success_stage_1;
		hsd_pipe2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(hsd_rth2bb_update_success) := hsd_rth2bb_update_success_stage_1;
		hsd_rth2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(hsd_surface2bb_update_success) := hsd_surface2bb_update_success_stage_1;
		hsd_surface2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(hsd_wp2bb_update_success) := hsd_wp2bb_update_success_stage_1;
		hsd_wp2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(lec2_am_l_2bb_update_success) := lec2_am_l_2bb_update_success_stage_1;
		lec2_am_l_2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(lec2_am_r_2bb_update_success) := lec2_am_r_2bb_update_success_stage_1;
		lec2_am_r_2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(mission2bb_update_success) := mission2bb_update_success_stage_1;
		mission2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(pipe_lost2bb_update_success) := pipe_lost2bb_update_success_stage_1;
		pipe_lost2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(rth2bb_update_success) := rth2bb_update_success_stage_1;
		rth2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(rtreach2bb_update_success) := rtreach2bb_update_success_stage_1;
		rtreach2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(rtreach_index2bb_update_success) := rtreach_index2bb_update_success_stage_1;
		rtreach_index2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(rtreach_unsafe_value2bb_update_success) := rtreach_unsafe_value2bb_update_success_stage_1;
		rtreach_unsafe_value2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(sensor_failure2bb_update_success) := sensor_failure2bb_update_success_stage_1;
		sensor_failure2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		next(var_HSD_out) := var_HSD_out_stage_3;
		next(var_battery_low_warning) := var_battery_low_warning_stage_1;
		next(var_bb_fls_warning) := var_bb_fls_warning_stage_1;
		next(var_bb_geofence_warning) := var_bb_geofence_warning_stage_1;
		next(var_bb_home_reached) := var_bb_home_reached_stage_2;
		next(var_bb_obstacle_warning) := var_bb_obstacle_warning_stage_1;
		var_bb_obstacle_warning_stage_1 := 
			case
				!(obstacle_avoidance.active) : var_bb_obstacle_warning;
				TRUE : {TRUE, FALSE};
			esac;
		next(var_bb_pipe_lost_warning) := var_bb_pipe_lost_warning_stage_1;
		next(var_bb_rth_warning) := var_bb_rth_warning_stage_2;
		next(var_bb_sensor_failure_warning) := var_bb_sensor_failure_warning_stage_1;
		next(var_cm_hsd_input) := var_cm_hsd_input_stage_13;
		next(var_dd_xy_axis_degradation) := var_dd_xy_axis_degradation_stage_1;
		next(var_dd_z_axis_warning) := var_dd_z_axis_warning_stage_1;
		next(var_emergency_stop_warning) := var_emergency_stop_warning_stage_1;
		next(var_lec2_am_l_pipe_warning) := var_lec2_am_l_pipe_warning_stage_1;
		next(var_lec2_am_l_speed_warning) := var_lec2_am_l_speed_warning_stage_1;
		next(var_lec2_am_r_pipe_warning) := var_lec2_am_r_pipe_warning_stage_1;
		next(var_lec2_am_r_speed_warning) := var_lec2_am_r_speed_warning_stage_1;
		next(var_mission_idx) := var_mission_idx_stage_1;
		next(var_next_mission) := var_next_mission_stage_2;
		next(var_obstacle_standoff_warning) := var_obstacle_standoff_warning_stage_1;
		next(var_pipe_mapping_enable) := var_pipe_mapping_enable_stage_3;
		next(var_rtreach_long_term_warning) := var_rtreach_long_term_warning_stage_1;
		next(var_rtreach_warning) := var_rtreach_warning_stage_1;
		next(waypoints_completed2bb_update_success) := waypoints_completed2bb_update_success_stage_1;
		waypoints_completed2bb_update_success_stage_1 := 
			case
				TRUE : {TRUE, FALSE};
			esac;
		--END OF BLACKBOARD VARIABLES TRANSITION

-- LTLSPEC G (var_battery_low_warning -> (surface_task.active | surface_task_1.active | surface_task_2.active | surface_task_3.active | surface_task_4.active)); -- false
-- LTLSPEC G (var_battery_low_warning_stage_1 -> (surface_task.active | surface_task_1.active | surface_task_2.active | surface_task_3.active | surface_task_4.active)); -- true
-- LTLSPEC G (count(surface_task.active | surface_task_1.active | surface_task_2.active | surface_task_3.active | surface_task_4.active) < 2); -- true
-- LTLSPEC G (speed_max_task.active -> (!(speed_min_task.active) & !(speed_min_task_1.active))); -- true
-- LTLSPEC G (speed_min_task.active -> (!(speed_max_task.active) & !(speed_min_task_1.active))); -- true
-- LTLSPEC G (speed_min_task_1.active -> (!(speed_min_task.active) & !(speed_max_task.active))); -- true
-- LTLSPEC F (var_mission_idx = 4); -- false
-- LTLSPEC G (!(var_battery_low_warning_stage_1 & var_bb_geofence_warning_stage_1)); -- both can be set, this spec should be false.
-- LTLSPEC G (var_bb_geofence_warning_stage_1 -> rth_par_1.active); -- returns False (correct, but kinda slow).

LTLSPEC G (var_battery_low_warning -> G (var_battery_low_warning)); -- this is false, var_battery_low_warning can be unset


-- mission is pipetracking, obstacle avoidance triggered, prove pipetracking/waypoint is resumed?
-- intentionally break trees in order to prove these specs are actually relevant. make more .bt files in order to do this.

-- see what happens if pipe mission actually ends.

-- differentiate between failsafes that end the mission vs bad states that can be recovered from
-- mission endings probably cause the surface and we just end
-- a bad state is something like we have to avoid an obstacle. can we detect end of bad state and continue with mission as intended?


--failsafes:
-- battery_low_warning
-- sensor_failure_warning
-- emergency_stop_warning
-- home reached?????
-- obstacle_standoff_warning???

MODULE define_nodes
	DEFINE
		BlueROV := 0;
		topics2bb := 1;
		battery2bb := 2;
		rth2bb := 3;
		geofence2bb := 4;
		lec2_am_r_2bb := 5;
		lec2_am_l_2bb := 6;
		pipe_lost2bb := 7;
		sensor_failure2bb := 8;
		waypoints_completed2bb := 9;
		mission2bb := 10;
		ddlec2bb := 11;
		fls2bb := 12;
		fls_warning2bb := 13;
		hsd_pipe2bb := 14;
		hsd_wp2bb := 15;
		hsd_rth2bb := 16;
		hsd_surface2bb := 17;
		rtreach2bb := 18;
		rtreach_unsafe_value2bb := 19;
		rtreach_index2bb := 20;
		dd_tasks := 21;
		reallocate_check := 22;
		reallocate_check_1 := 23;
		is_reallocation_requested := 24;
		reallocate_task := 25;
		dd_lec_task := 26;
		mission_server := 27;
		obstacle_avoidance := 28;
		priorities := 29;
		battery_check := 30;
		battery_check_1 := 31;
		battery_low_fs := 32;
		surface_task := 33;
		sensor_failure_selector := 34;
		sensor_failure_selector_1 := 35;
		check_sensor_failure := 36;
		surface_task_1 := 37;
		emergency_stop_check := 38;
		emergency_stop_check_1 := 39;
		emergency_stop_fs := 40;
		emergency_stop_tasks := 41;
		emergency_stop_task := 42;
		surface_task_2 := 43;
		home_reached_selector := 44;
		home_reached_selector_1 := 45;
		check_surface := 46;
		surface_task_3 := 47;
		obstacle_standoff_check := 48;
		obstacle_standoff_check_1 := 49;
		obstacle_standoff_fs := 50;
		surface_task_4 := 51;
		rth_selector := 52;
		rth_selector_1 := 53;
		check_rth := 54;
		rth_par := 55;
		rth_task := 56;
		home2bb := 57;
		geofence_selector := 58;
		geofence_selector_1 := 59;
		check_geofence := 60;
		rth_par_1 := 61;
		rth_task_1 := 62;
		home2bb_1 := 63;
		pipe_lost_selector := 64;
		pipe_lost_selector_1 := 65;
		check_pipe_post := 66;
		loiter_task := 67;
		track_pipe_mission := 68;
		is_track_pipe_mission_requested := 69;
		tracking := 70;
		tracking_task := 71;
		lec2am_speed_cmd := 72;
		lec2am_l_speed_check := 73;
		lec2am_l_speed_check_1 := 74;
		check_lec2am_ls := 75;
		speed_min_task := 76;
		lec2am_r_speed_check := 77;
		lec2am_r_speed_check_1 := 78;
		check_lec2am_rs := 79;
		speed_min_task_1 := 80;
		speed_max_task := 81;
		lec2am_mapping_cmd := 82;
		lec2am_l_mapping_check := 83;
		lec2am_l_mapping_check_1 := 84;
		check_lec2am_lp := 85;
		pipe_mapping_disable_task := 86;
		lec2am_r_mapping_check := 87;
		lec2am_r_mapping_check_1 := 88;
		check_lec2am_rp := 89;
		pipe_mapping_disable_task_1 := 90;
		pipe_mapping_enable_task := 91;
		waypoint_mission := 92;
		is_waypoint_requested := 93;
		waypoint_selector := 94;
		waypoints_sif := 95;
		waypoints_sif_1 := 96;
		check_waypoints_completed := 97;
		waypoint_end := 98;
		next_mission := 99;
		loiter_task_1 := 100;
		waypoint_task := 101;
		loiter_task_2 := 102;
MODULE leaf_module(internal_status_module)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status_module.internal_status : invalid;
MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				child_0.status = incoming_status : outgoing_status;
				TRUE : child_0.status;
			esac;
		child_0.active :=
			case
				!(active) : FALSE;
				TRUE : TRUE;
			esac;
MODULE composite_parallel_success_on_all_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
MODULE composite_selector_without_memory_3(child_0, child_1, child_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				!(child_2.internal_status = failure) : child_2.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
		child_2.active := child_1.status = failure;
MODULE composite_parallel_success_on_all_without_memory_19(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10, child_11, child_12, child_13, child_14, child_15, child_16, child_17, child_18)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				(child_3.internal_status = failure) : failure;
				(child_4.internal_status = failure) : failure;
				(child_5.internal_status = failure) : failure;
				(child_6.internal_status = failure) : failure;
				(child_7.internal_status = failure) : failure;
				(child_8.internal_status = failure) : failure;
				(child_9.internal_status = failure) : failure;
				(child_10.internal_status = failure) : failure;
				(child_11.internal_status = failure) : failure;
				(child_12.internal_status = failure) : failure;
				(child_13.internal_status = failure) : failure;
				(child_14.internal_status = failure) : failure;
				(child_15.internal_status = failure) : failure;
				(child_16.internal_status = failure) : failure;
				(child_17.internal_status = failure) : failure;
				(child_18.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				!(child_3.internal_status = success) : child_3.internal_status;
				!(child_4.internal_status = success) : child_4.internal_status;
				!(child_5.internal_status = success) : child_5.internal_status;
				!(child_6.internal_status = success) : child_6.internal_status;
				!(child_7.internal_status = success) : child_7.internal_status;
				!(child_8.internal_status = success) : child_8.internal_status;
				!(child_9.internal_status = success) : child_9.internal_status;
				!(child_10.internal_status = success) : child_10.internal_status;
				!(child_11.internal_status = success) : child_11.internal_status;
				!(child_12.internal_status = success) : child_12.internal_status;
				!(child_13.internal_status = success) : child_13.internal_status;
				!(child_14.internal_status = success) : child_14.internal_status;
				!(child_15.internal_status = success) : child_15.internal_status;
				!(child_16.internal_status = success) : child_16.internal_status;
				!(child_17.internal_status = success) : child_17.internal_status;
				!(child_18.internal_status = success) : child_18.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
		child_4.active := active;
		child_5.active := active;
		child_6.active := active;
		child_7.active := active;
		child_8.active := active;
		child_9.active := active;
		child_10.active := active;
		child_11.active := active;
		child_12.active := active;
		child_13.active := active;
		child_14.active := active;
		child_15.active := active;
		child_16.active := active;
		child_17.active := active;
		child_18.active := active;
MODULE composite_sequence_with_memory_2(child_0, child_1, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
MODULE composite_parallel_success_on_all_without_memory_5(child_0, child_1, child_2, child_3, child_4)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				(child_3.internal_status = failure) : failure;
				(child_4.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				!(child_3.internal_status = success) : child_3.internal_status;
				!(child_4.internal_status = success) : child_4.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
		child_3.active := active;
		child_4.active := active;
MODULE composite_selector_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE composite_parallel_success_on_all_without_memory_3(child_0, child_1, child_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(child_0.internal_status = failure) : failure;
				(child_1.internal_status = failure) : failure;
				(child_2.internal_status = failure) : failure;
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				!(child_2.internal_status = success) : child_2.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := active;
		child_2.active := active;
MODULE composite_selector_without_memory_11(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				!(child_2.internal_status = failure) : child_2.internal_status;
				!(child_3.internal_status = failure) : child_3.internal_status;
				!(child_4.internal_status = failure) : child_4.internal_status;
				!(child_5.internal_status = failure) : child_5.internal_status;
				!(child_6.internal_status = failure) : child_6.internal_status;
				!(child_7.internal_status = failure) : child_7.internal_status;
				!(child_8.internal_status = failure) : child_8.internal_status;
				!(child_9.internal_status = failure) : child_9.internal_status;
				!(child_10.internal_status = failure) : child_10.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
		child_2.active := child_1.status = failure;
		child_3.active := child_2.status = failure;
		child_4.active := child_3.status = failure;
		child_5.active := child_4.status = failure;
		child_6.active := child_5.status = failure;
		child_7.active := child_6.status = failure;
		child_8.active := child_7.status = failure;
		child_9.active := child_8.status = failure;
		child_10.active := child_9.status = failure;
MODULE battery2bb_module(battery2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := battery2bb_update_success ? success : running;
MODULE battery_low_fs_module(var_battery_low_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_battery_low_warning_stage_1 = FALSE) ? success : failure;
MODULE check_geofence_module(var_bb_geofence_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_geofence_warning_stage_1 = FALSE) ? success : failure;
MODULE check_lec2am_lp_module(var_lec2_am_l_pipe_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_lec2_am_l_pipe_warning_stage_1 = FALSE) ? success : failure;
MODULE check_lec2am_ls_module(var_lec2_am_l_speed_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_lec2_am_l_speed_warning_stage_1 = FALSE) ? success : failure;
MODULE check_lec2am_rp_module(var_lec2_am_r_pipe_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_lec2_am_r_pipe_warning_stage_1 = FALSE) ? success : failure;
MODULE check_lec2am_rs_module(var_lec2_am_r_speed_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_lec2_am_r_speed_warning_stage_1 = FALSE) ? success : failure;
MODULE check_pipe_post_module(var_bb_pipe_lost_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_pipe_lost_warning_stage_1 = FALSE) ? success : failure;
MODULE check_rth_module(var_bb_rth_warning_stage_2)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_rth_warning_stage_2 = FALSE) ? success : failure;
MODULE check_sensor_failure_module(var_bb_sensor_failure_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_sensor_failure_warning_stage_1 = FALSE) ? success : failure;
MODULE check_surface_module(var_bb_home_reached)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_home_reached = FALSE) ? success : failure;
MODULE check_waypoints_completed_module(var_bb_waypoints_completed)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_waypoints_completed = FALSE) ? success : failure;
MODULE ddlec2bb_module(ddlec2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := ddlec2bb_update_success ? success : running;
MODULE emergency_stop_fs_module(var_emergency_stop_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_emergency_stop_warning_stage_1 = FALSE) ? success : failure;
MODULE fls2bb_module(fls2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := fls2bb_update_success ? success : running;
MODULE fls_warning2bb_module(fls_warning2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := fls_warning2bb_update_success ? success : running;
MODULE geofence2bb_module(geofence2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := geofence2bb_update_success ? success : running;
MODULE home2bb_module(home2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := home2bb_update_success ? success : running;
MODULE home2bb_1_module(home2bb_1_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := home2bb_1_update_success ? success : running;
MODULE hsd_pipe2bb_module(hsd_pipe2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := hsd_pipe2bb_update_success ? success : running;
MODULE hsd_rth2bb_module(hsd_rth2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := hsd_rth2bb_update_success ? success : running;
MODULE hsd_surface2bb_module(hsd_surface2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := hsd_surface2bb_update_success ? success : running;
MODULE hsd_wp2bb_module(hsd_wp2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := hsd_wp2bb_update_success ? success : running;
MODULE is_reallocation_requested_module(var_dd_xy_axis_degradation_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_dd_xy_axis_degradation_stage_1 = FALSE) ? success : failure;
MODULE is_track_pipe_mission_requested_module(var_bb_mission)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_mission = pipe_following) ? success : failure;
MODULE is_waypoint_requested_module(var_bb_mission)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_bb_mission = waypoint_following) ? success : failure;
MODULE lec2_am_l_2bb_module(lec2_am_l_2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := lec2_am_l_2bb_update_success ? success : running;
MODULE lec2_am_r_2bb_module(lec2_am_r_2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := lec2_am_r_2bb_update_success ? success : running;
MODULE mission2bb_module(mission2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := mission2bb_update_success ? success : running;
MODULE obstacle_standoff_fs_module(var_obstacle_standoff_warning_stage_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_obstacle_standoff_warning_stage_1 = FALSE) ? success : failure;
MODULE pipe_lost2bb_module(pipe_lost2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := pipe_lost2bb_update_success ? success : running;
MODULE rth2bb_module(rth2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := rth2bb_update_success ? success : running;
MODULE rtreach2bb_module(rtreach2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := rtreach2bb_update_success ? success : running;
MODULE rtreach_index2bb_module(rtreach_index2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := rtreach_index2bb_update_success ? success : running;
MODULE rtreach_unsafe_value2bb_module(rtreach_unsafe_value2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := rtreach_unsafe_value2bb_update_success ? success : running;
MODULE sensor_failure2bb_module(sensor_failure2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := sensor_failure2bb_update_success ? success : running;
MODULE waypoints_completed2bb_module(waypoints_completed2bb_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := waypoints_completed2bb_update_success ? success : running;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
MODULE running_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := running;
