MODULE battery2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE rth2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE geofence2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE lec2_am_r_2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE lec2_am_l_2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE pipe_lost2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE sensor_failure2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE waypoints_completed2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE mission2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE ddlec2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE fls2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status; 
MODULE fls_warning2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_pipe2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_wp2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_rth2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE hsd_surface2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE rtreach2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status; 
MODULE reallocate_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE dd_lec_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE mission_server_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE obstacle_avoidance_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE emergency_stop_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := success;
MODULE surface_task2_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task3_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE surface_task4_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE rth_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE home2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE rth_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE home2bb1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	IVAR
		random_status : {success, running};
	DEFINE
		status := random_status;
MODULE loiter_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE tracking_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE speed_min_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE speed_min_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE speed_max_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE pipe_mapping_disable_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE pipe_mapping_disable_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE pipe_mapping_enable_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE next_mission_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := success;
MODULE loiter_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE waypoint_task_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE loiter_task2_STATUS_module(variables, variable_exists, node_names, variable_names)
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := running;
MODULE is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--dd_xy_axis_degradation is set before this check is made. therefore, we need to use next() value
		result := (next(variables[variable_names.dd_xy_axis_degradation]) = 0);
MODULE battery_low_fs_CHECK_battery_low_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--battery_low_warning is set before this check is made. need next()
		result := (next(variables[variable_names.battery_low_warning]) = 0);
MODULE check_sensor_failure_CHECK_bb_sensor_failure_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--bb_sensor_failure-warning is set before this check. need next()
		result := (next(variables[variable_names.bb_sensor_failure_warning]) = 0);
MODULE emergency_stop_fs_CHECK_emergency_stop_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--fls_warning2bb comes before
		--rtreach2bb comes before
		--mission_server comes before.
		--therefore, the value will be set before we enter this check, and will not be changed afterwards.
		--safe to use next()
		result := (next(variables[variable_names.emergency_stop_warning]) = 0);
MODULE check_surface_CHECK_bb_home_reached_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in home2bb and home2bb1, both of which occur AFTER this check. use value as is. no next()
		result := (variables[variable_names.bb_home_reached] = 0);
MODULE obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in fls2bb, which is before. use next
		result := (next(variables[variable_names.obstacle_standoff_warning]) = 0);
MODULE check_rth_CHECK_bb_rth_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in rth2bb and mission_server. both before check_rth. use next()
		result := (next(variables[variable_names.bb_rth_warning]) = 0);
MODULE check_geofence_CHECK_bb_geofence_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in geofence2bb. occurs before check_geofence. use next() value
		result := (next(variables[variable_names.bb_geofence_warning]) = 0);
MODULE check_pipe_post_CHECK_bb_pipe_lost_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in pipe_lost2bb. occurs before check_pipe_post. use next()
		result := (next(variables[variable_names.bb_pipe_lost_warning]) = 0);
MODULE is_track_pipe_mission_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in mission2bb
		--set in mission_server
		--both occur before this check
		--use next()
		result := (next(variables[variable_names.bb_mission_dot_data]) = 1);
MODULE is_waypoint_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.bb_mission_dot_data]) = 2);
MODULE check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in lec2_am_l_2bb. occurs before this check. use next()
		result := (next(variables[variable_names.lec2_am_l_speed_warning]) = 0);
MODULE check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.lec2_am_r_speed_warning]) = 0);
MODULE check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.lec2_am_l_pipe_warning]) = 0);
MODULE check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--as above
		result := (next(variables[variable_names.lec2_am_r_pipe_warning]) = 0);
MODULE check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data_module(variables, variable_exists, node_names, variable_names)
	DEFINE
		--set in waypoints_completed2bb. occurs before this check. use next()
		result := (next(variables[variable_names.bb_waypoints_completed_dot_data]) = 0);

