configuration {
    #{ Here you specify various configuration options, such as Hypersafety }#
}
enumerations {
    #{ here you specify the enumerations used in the model}#
}
constants {
    #{ constants are used to synchronize values in a .tree file. }#
    #{ example := 0 }#
    #{ to use example elsewhere, simply type 'example' in place of any integer (quotes included) }#
    path_size := 25, x_min := 0, x_max := 19, y_min := 0, y_max := 19, obs_count := 20, final_landmark := 14
} end_constants

variables {
    #{ Variable declarations go here.
	it is suggested, but not required, that the order of declaration be
	Blackboard, Local, Environment.
	If variable B depends on variable A, then variable A MUST be declared before B.
    }#
    variable { bl drone_x VAR [x_min, x_max] assign {result{0}}}
    variable { bl drone_y VAR [y_min, y_max] assign {result{0}}}
    variable { bl landmark_index VAR [1, final_landmark] assign {result {1}}}
    #{
    variable { bl current_landmark_x VAR [x_min, y_min] assign {result{0}}}
    variable { bl current_landmark_y VAR [y_min, y_max] assign {result{0}}}
    }#
    variable { bl obstacles_x array obs_count DEFINE INT default {assign{ result{0}}} constant_index
	index_of {0} assign {result{7}}
	index_of {1} assign {result{2}}
	index_of {2} assign {result{5}}
	index_of {3} assign {result{16}}
	index_of {4} assign {result{5}}
	index_of {5} assign {result{11}}
	index_of {6} assign {result{12}}
	index_of {7} assign {result{7}}
	index_of {8} assign {result{7}}
	index_of {9} assign {result{0}}
	index_of {10} assign {result{15}}
	index_of {11} assign {result{4}}
	index_of {12} assign {result{4}}
	index_of {13} assign {result{9}}
	index_of {14} assign {result{10}}
	index_of {15} assign {result{2}}
	index_of {16} assign {result{8}}
	index_of {17} assign {result{15}}
	index_of {18} assign {result{17}}
	index_of {19} assign {result{12}}
    }
    variable { bl x_sort array obs_count DEFINE INT default  {assign{ result{0}}} constant_index
	index_of {0} assign {result{9}} #{0}#
	index_of {1} assign {result{1}} #{2}#
	index_of {2} assign {result{15}} #{2}#
	index_of {3} assign {result{11}} #{4}#
	index_of {4} assign {result{12}} #{4}#
	index_of {5} assign {result{2}} #{5}#
	index_of {6} assign {result{4}} #{5}#
	index_of {7} assign {result{0}} #{7}#
	index_of {8} assign {result{7}} #{7}#
	index_of {9} assign {result{8}} #{7}#
	index_of {10} assign {result{16}} #{8}#
	index_of {11} assign {result{13}} #{9}#
	index_of {12} assign {result{14}} #{10}#
	index_of {13} assign {result{5}} #{11}#
	index_of {14} assign {result{6}} #{12}#
	index_of {15} assign {result{19}} #{12}#
	index_of {16} assign {result{10}} #{15}#
	index_of {17} assign {result{17}} #{15}#
	index_of {18} assign {result{3}} #{16}#
	index_of {19} assign {result{18}} #{17}#
    }
    variable { bl obstacles_y array obs_count DEFINE INT default {assign {result{0}}} constant_index
	index_of {0} assign {result{0}}
	index_of {1} assign {result{2}}
	index_of {2} assign {result{2}}
	index_of {3} assign {result{2}}
	index_of {4} assign {result{3}}
	index_of {5} assign {result{4}}
	index_of {6} assign {result{4}}
	index_of {7} assign {result{6}}
	index_of {8} assign {result{7}}
	index_of {9} assign {result{8}}
	index_of {10} assign {result{8}}
	index_of {11} assign {result{9}}
	index_of {12} assign {result{10}}
	index_of {13} assign {result{10}}
	index_of {14} assign {result{10}}
	index_of {15} assign {result{14}}
	index_of {16} assign {result{14}}
	index_of {17} assign {result{14}}
	index_of {18} assign {result{17}}
	index_of {19} assign {result{18}}
    }
    #{Don't need y_sort, it's already sorted.}#
    variable { bl waypoint_x VAR [x_min, x_max] assign {result{(loop, loop_var, [x_min, x_max] such_that True, loop_var)}}}
    variable { bl waypoint_y VAR [y_min, y_max] assign {result{(loop, loop_var, [y_min, y_max] such_that
		    (not, (or,
			    (loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
				(and, (eq, (index, obstacles_x, constant_index obs_index), waypoint_x), (eq, (index, obstacles_y, constant_index obs_index), loop_var)))))
		    , loop_var)}}}
    variable { bl landmark_1_x DEFINE INT assign {
	    case {(eq, 0, waypoint_x)} result{0}
	    case {(lt, 0, waypoint_x)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), 0),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), 0),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), 0),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), 0),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	}}
    variable { bl landmark_1_y DEFINE INT assign {result{0}}}
    variable { bl landmark_2_x DEFINE INT assign {result{landmark_1_x}}}
    variable { bl landmark_2_y DEFINE INT assign {
	    case {(eq, landmark_1_y, waypoint_y)} result{landmark_1_y}
	    case {(lt, landmark_1_y, waypoint_y)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_1_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_1_y),
			(lte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_1_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_1_y),
			(gte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	}}
    variable { bl landmark_3_x DEFINE INT assign {
	    case {(and, (eq, landmark_2_x, landmark_1_x), (eq, landmark_2_y, landmark_1_y))} result {
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_2_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_2_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), x_max)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    x_max
		)}
	    case {(eq, landmark_2_x, waypoint_x)} result{landmark_2_x}
	    case {(lt, landmark_2_x, waypoint_x)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_2_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_2_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_2_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_2_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	}}
    variable { bl landmark_3_y DEFINE INT assign {result{landmark_2_y}}}
    variable { bl landmark_4_x DEFINE INT assign {result{landmark_3_x}}}
    variable { bl landmark_4_y DEFINE INT assign {
	    case {(and, (eq, landmark_3_x, landmark_2_x), (eq, landmark_3_y, landmark_2_y))} result {
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_3_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_3_y),
			(lte, (index, obstacles_y, constant_index obs_index), y_max)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    y_max
		)}
	    case {(eq, landmark_3_y, waypoint_y)} result{landmark_3_y}
	    case {(lt, landmark_3_y, waypoint_y)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_3_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_3_y),
			(lte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_3_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_3_y),
			(gte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	}}
    variable { bl landmark_5_x DEFINE INT assign {
	    case {(and, (eq, landmark_4_x, landmark_3_x), (eq, landmark_4_y, landmark_3_y))} result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_4_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_4_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), x_min)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    x_min
		)}
	    case {(eq, landmark_4_x, waypoint_x)} result{landmark_4_x}
	    case {(lt, landmark_4_x, waypoint_x)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_4_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_4_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_4_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_4_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	}}
    variable { bl landmark_5_y DEFINE INT assign {result{landmark_4_y}}}
    variable { bl landmark_6_x DEFINE INT assign {result{landmark_5_x}}}
    variable { bl landmark_6_y DEFINE INT assign {
	    case {(and, (eq, landmark_5_x, landmark_4_x), (eq, landmark_5_y, landmark_4_y))} result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_5_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_5_y),
			(gte, (index, obstacles_y, constant_index obs_index), y_min)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    y_min
		)}
	    case {(eq, landmark_5_y, waypoint_y)} result{landmark_5_y}
	    case {(lt, landmark_5_y, waypoint_y)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_5_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_5_y),
			(lte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_5_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_5_y),
			(gte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	}}
    variable { bl landmark_7_x DEFINE INT assign {
	    case {(and, (eq, landmark_6_x, landmark_5_x), (eq, landmark_6_y, landmark_5_y))} result {
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_6_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_6_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), x_max)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    x_max
		)}
	    case {(eq, landmark_6_x, waypoint_x)} result{landmark_6_x}
	    case {(lt, landmark_6_x, waypoint_x)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_6_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_6_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_6_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_6_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	}}
    variable { bl landmark_7_y DEFINE INT assign {result{landmark_6_y}}}
    variable { bl landmark_8_x DEFINE INT assign {result{landmark_7_x}}}
    variable { bl landmark_8_y DEFINE INT assign {
	    case {(and, (eq, landmark_7_x, landmark_6_x), (eq, landmark_7_y, landmark_6_y))} result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_7_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_7_y),
			(gte, (index, obstacles_y, constant_index obs_index), y_min)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    y_min
		)}
	    case {(eq, landmark_7_y, waypoint_y)} result{landmark_7_y}
	    case {(lt, landmark_7_y, waypoint_y)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_7_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_7_y),
			(lte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_7_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_7_y),
			(gte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	}}
    variable { bl landmark_9_x DEFINE INT assign {
	    case {(and, (eq, landmark_8_x, landmark_7_x), (eq, landmark_8_y, landmark_7_y))} result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_8_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_8_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), x_min)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    x_min
		)}
	    case {(eq, landmark_8_x, waypoint_x)} result{landmark_8_x}
	    case {(lt, landmark_8_x, waypoint_x)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_8_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_8_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_8_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_8_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	}}
    variable { bl landmark_9_y DEFINE INT assign {result{landmark_8_y}}}
    variable { bl landmark_10_x DEFINE INT assign {result{landmark_9_x}}}
    variable { bl landmark_10_y DEFINE INT assign {
	    case {(and, (eq, landmark_9_x, landmark_8_x), (eq, landmark_9_y, landmark_8_y))} result {
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_9_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_9_y),
			(lte, (index, obstacles_y, constant_index obs_index), y_max)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    y_max
		)}
	    case {(eq, landmark_9_y, waypoint_y)} result{landmark_9_y}
	    case {(lt, landmark_9_y, waypoint_y)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_9_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_9_y),
			(lte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	    result {
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_9_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_9_y),
			(gte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	}}
    variable { bl landmark_11_x DEFINE INT assign {
	    case {(and, (eq, landmark_10_x, landmark_9_x), (eq, landmark_10_y, landmark_9_y))} result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_10_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_10_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), x_min)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    x_min
		)}
	    case {(eq, landmark_10_x, waypoint_x)} result{landmark_10_x}
	    case {(lt, landmark_10_x, waypoint_x)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_10_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_10_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_10_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_10_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	}}
    variable { bl landmark_11_y DEFINE INT assign {result{landmark_10_y}}}
    variable { bl landmark_12_x DEFINE INT assign {result{landmark_11_x}}}
    variable { bl landmark_12_y DEFINE INT assign {
	    case {(and, (eq, landmark_11_x, landmark_10_x), (eq, landmark_11_y, landmark_10_y))} result {
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_11_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_11_y),
			(lte, (index, obstacles_y, constant_index obs_index), y_max)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    y_max
		)}
	    case {(eq, landmark_11_y, waypoint_y)} result{landmark_11_y}
	    case {(lt, landmark_11_y, waypoint_y)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_11_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_11_y),
			(lte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	    result {
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_11_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_11_y),
			(gte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	}}
    variable { bl landmark_13_x DEFINE INT assign {
	    case {(and, (eq, landmark_12_x, landmark_11_x), (eq, landmark_12_y, landmark_11_y))} result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_12_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_12_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), x_min)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    x_min
		)}
	    case {(eq, landmark_12_x, waypoint_x)} result{landmark_12_x}
	    case {(lt, landmark_12_x, waypoint_x)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_12_y),
			(gt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_12_x),
			(lte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (sub, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_y, (index, x_sort, obs_index)), landmark_12_y),
			(lt, (index, obstacles_x, (index, x_sort, obs_index)), landmark_12_x),
			(gte, (index, obstacles_x, (index, x_sort, obs_index)), waypoint_x)
		    ),
		    (add, (index, obstacles_x, (index, x_sort, obs_index)), 1),
		    waypoint_x
		)}
	}}
    variable { bl landmark_13_y DEFINE INT assign {result{landmark_12_y}}}
    variable { bl landmark_14_x DEFINE INT assign {result{landmark_13_x}}}
    variable { bl landmark_14_y DEFINE INT assign {
	    case {(and, (eq, landmark_13_x, landmark_12_x), (eq, landmark_13_y, landmark_12_y))} result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_13_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_13_y),
			(gte, (index, obstacles_y, constant_index obs_index), y_min)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    y_min
		)}
	    case {(eq, landmark_13_y, waypoint_y)} result{landmark_13_y}
	    case {(lt, landmark_13_y, waypoint_y)} result{
		(case_loop, obs_index, [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_13_x),
			(gt, (index, obstacles_y, constant_index obs_index), landmark_13_y),
			(lte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (sub, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	    result {
		(case_loop, obs_index, reverse [0, (sub, obs_count, 1)] such_that True,
		    (and,
			(eq, (index, obstacles_x, constant_index obs_index), landmark_13_x),
			(lt, (index, obstacles_y, constant_index obs_index), landmark_13_y),
			(gte, (index, obstacles_y, constant_index obs_index), waypoint_y)
		    ),
		    (add, (index, obstacles_y, constant_index obs_index), 1),
		    waypoint_y
		)}
	}}
    variable { bl current_landmark_x DEFINE INT assign {
	    case {(eq, landmark_index, 1)} result {landmark_1_x}
	    case {(eq, landmark_index, 2)} result {landmark_2_x}
	    case {(eq, landmark_index, 3)} result {landmark_3_x}
	    case {(eq, landmark_index, 4)} result {landmark_4_x}
	    case {(eq, landmark_index, 5)} result {landmark_5_x}
	    case {(eq, landmark_index, 6)} result {landmark_6_x}
	    case {(eq, landmark_index, 7)} result {landmark_7_x}
	    case {(eq, landmark_index, 8)} result {landmark_8_x}
	    case {(eq, landmark_index, 9)} result {landmark_9_x}
	    case {(eq, landmark_index, 10)} result {landmark_10_x}
	    case {(eq, landmark_index, 11)} result {landmark_11_x}
	    case {(eq, landmark_index, 12)} result {landmark_12_x}
	    case {(eq, landmark_index, 13)} result {landmark_13_x}
	    result {landmark_14_x}
	}}
    variable { bl current_landmark_y DEFINE INT assign {
	    case {(eq, landmark_index, 1)} result {landmark_1_y}
	    case {(eq, landmark_index, 2)} result {landmark_2_y}
	    case {(eq, landmark_index, 3)} result {landmark_3_y}
	    case {(eq, landmark_index, 4)} result {landmark_4_y}
	    case {(eq, landmark_index, 5)} result {landmark_5_y}
	    case {(eq, landmark_index, 6)} result {landmark_6_y}
	    case {(eq, landmark_index, 7)} result {landmark_7_y}
	    case {(eq, landmark_index, 8)} result {landmark_8_y}
	    case {(eq, landmark_index, 9)} result {landmark_9_y}
	    case {(eq, landmark_index, 10)} result {landmark_10_y}
	    case {(eq, landmark_index, 11)} result {landmark_11_y}
	    case {(eq, landmark_index, 12)} result {landmark_12_y}
	    case {(eq, landmark_index, 13)} result {landmark_13_y}
	    result {landmark_14_y}
	}}
} end_variables

environment_update {
} end_environment_update

checks {
    check {
	is_path_computed
	arguments {}
	read_variables {}
	condition {True}
    }
    check {
	is_waypoint_reached
	arguments {}
	read_variables {drone_x, drone_y, waypoint_x, waypoint_y}
	condition {(and, (eq, drone_x, waypoint_x), (eq, drone_y, waypoint_y))}
    }
    check {
	is_close_to_landmark
	arguments {}
	read_variables {drone_x, drone_y, current_landmark_x, current_landmark_y}
	condition {(and, (eq, drone_x, current_landmark_x), (eq, drone_y, current_landmark_y))}
    }
} end_checks

environment_checks {
} end_environment_checks

actions {
    action {
	compute_path arguments {} local_variables {}
	read_variables {}
	write_variables{}
	initial_values {}
	update {
	    return_statement {result {success}}
	}
    }
    action {
	get_next_landmark arguments {} local_variables {}
	read_variables {}
	write_variables{landmark_index}
	initial_values {}
	update {
	    variable_statement {
		landmark_index
		assign{result{(min, final_landmark, (add, landmark_index, 1))}}
	    }
	    return_statement { result {success}}
	}
    }
    action {
	get_next_subgoal arguments {} local_variables {}
	read_variables {}
	write_variables{}
	initial_values {}
	update {
	    return_statement { result {success}}
	}
    }
    action {
	move_action arguments {} local_variables {}
	read_variables {current_landmark_x, current_landmark_y}
	write_variables{drone_x, drone_y}
	initial_values {}
	update {
	    variable_statement {
		drone_x
		assign {
		    case {(eq, drone_x, current_landmark_x)} result{drone_x}
		    case {(lt, drone_x, current_landmark_x)} result{(min, x_max, (add, drone_x, 1))}
		    result{(max, x_min, (sub, drone_x, 1))}
		}
	    }
	    variable_statement {
		drone_y
		assign {
		    case {(eq, drone_y, current_landmark_y)} result{drone_y}
		    case {(lt, drone_y, current_landmark_y)} result{(min, y_max, (add, drone_y, 1))}
		    result{(max, y_min, (sub, drone_y, 1))}
		}
	    }
	    return_statement { result {success}}
	}
    }
} end_actions

sub_trees {#{ subtrees go here. }#
    sub_tree {
	INITIAL_SETUP_SUBTREE
	composite {
	    path_selector selector
	    children {
		is_path_computed {}
		compute_path {}
	    }
	}
    }
    sub_tree {
	MAIN_SUBTREE
	composite {
	    main_selector selector
	    children {
		is_waypoint_reached {}
		composite {
		    landmark_sequence sequence children{ is_close_to_landmark {} get_next_landmark {} }
		}
		composite {
		    movement_sequence sequence children{ get_next_subgoal {} move_action {} }
		}
	    }
	}
    }
} end_sub_trees

tree {
    #{ the tree is defined here}#
    composite {
	ebt_root sequence
	children {
	    insert {INITIAL_SETUP_SUBTREE}
	    insert {MAIN_SUBTREE}
	}
    }
} end_tree




tick_prerequisite { (True) } end_tick_prerequisite
#{ if the condition is True, the tree ticks.
    If it is false, everything is done }#

specifications {
    CTLSPEC {(always_finally, (and, (eq, drone_x at -1, waypoint_x at -1), (eq, drone_y at -1, waypoint_y at -1)))}
} end_specifications