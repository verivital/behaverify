variables {
    variable {
        battery
        VAR
        [0, 5]
    } end_variable
    variable {
        battery_low_warning
        VAR
        BOOLEAN
    } end_variable
    variable {
        bb_geofence
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_geofence_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_home_dist
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_home_reached
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_mission
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_mission.data
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_pipe_lost_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_pipelost
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_rth
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_rth_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_sensor_failure
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_sensor_failure_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_waypoints_completed
        VAR
        [0, 1]
    } end_variable
    variable {
        bb_waypoints_completed.data
        VAR
        [0, 1]
    } end_variable
    variable {
        dd_output
        VAR
        {'safe', 'xy_warn', 'z_warn', 'xyz_warn'}
    } end_variable
    variable {
        emergency_stop_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        fls_range
        VAR
        [0, 2]
    } end_variable
    variable {
        hsd_pipeline_mapping
        VAR
        [0, 1]
    } end_variable
    variable {
        hsd_to_rth
        VAR
        [0, 1]
    } end_variable
    variable {
        hsd_to_surface
        VAR
        [0, 1]
    } end_variable
    variable {
        hsd_to_waypoint
        VAR
        [0, 1]
    } end_variable
    variable {
        lec2_am_l
        VAR
        [0, 1]
    } end_variable
    variable {
        lec2_am_l_pipe_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        lec2_am_l_speed_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        lec2_am_r
        VAR
        [0, 1]
    } end_variable
    variable {
        lec2_am_r_pipe_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        lec2_am_r_speed_warning
        VAR
        [0, 1]
    } end_variable
    variable {
        obstacle_in_view
        VAR
        [0, 1]
    } end_variable
    variable {
        obstacle_standoff_warning
        VAR
        BOOLEAN
    } end_variable
    variable {
        rtreach_out
        VAR
        [0, 1]
    } end_variable
    variable {
        dd_z_axis_warning
        VAR
        BOOLEAN
    } end_variable
    variable {
        dd_xy_axis_warning
        VAR
        BOOLEAN
    } end_variable
    variable {
        obstacle_min_standoff
	DEFINE
	[0, 1]
    } end_variable
} end_variables
local_variables {
    variable {
        got_new_value
	VAR
	BOOLEAN
    } end_variable
} end_local_variables
environment_variables {
    variable {
        true_battery
	VAR
	[0, 5]
    } end_variable
} end_environment_variables
environment {
    initial_values {
	    variable_statement {
	        true_battery
		result { 5 } end_result
	    } end_variable_statement
    } end_initial_values
    update_values {
	    variable_statement {
	        true_battery
		result { true_battery, (minus, true_battery, 1), (minus, true_battery, 2) } end_result
	    } end_variable_statement
    } end_update_values
} end_environment
checks {
    check {
        battery_low_fs
        read_variables {battery_low_warning} end_read_variables
        condition { (equal, battery_low_warning, False)  } end_condition
    } end_check
    check {
        check_geofence
        read_variables {bb_geofence_warning} end_read_variables
        condition { (equal, bb_geofence_warning, False) } end_condition
    } end_check
    check {
        check_lec2am_lp
        read_variables {lec2_am_l_pipe_warning} end_read_variables
        condition { (equal, lec2_am_l_pipe_warning, False) } end_condition
    } end_check
    check {
        check_lec2am_ls
        read_variables {lec2_am_l_speed_warning} end_read_variables
        condition { (equal, lec2_am_l_speed_warning, False) } end_condition
    } end_check
    check {
        check_lec2am_rp
        read_variables {lec2_am_r_pipe_warning} end_read_variables
        condition { (equal, lec2_am_r_pipe_warning, False) } end_condition
    } end_check
    check {
        check_lec2am_rs
        read_variables {lec2_am_r_speed_warning} end_read_variables
        condition { (equal, lec2_am_r_pipe_warning, False) } end_condition
    } end_check
    check {
        check_pipe_lost
        read_variables {bb_pipe_lost_warning} end_read_variables
        condition {(equal, bb_pipe_lost_warning, False)} end_condition
    } end_check
    check {
        check_rth
        read_variables {bb_rth_warning} end_read_variables
        condition {(equal, bb_rth_warning, False)} end_condition
    } end_check
    check {
        check_sensor_failure
        read_variables {bb_sensor_failure_warning} end_read_variables
        condition {((equal, bb_sensor_failure_warning, False))} end_condition
    } end_check
    check {
        check_surface
        read_variables {bb_home_reached} end_read_variables
        condition {(equal, bb_home_reached, False)} end_condition
    } end_check
    check {
        check_waypoints_completed
        read_variables {bb_waypoints_completed} end_read_variables
        condition {(equal, bb_waypoints_completed, False)} end_condition
    } end_check
    check {
        emergency_stop_fs
        read_variables {emergency_stop_warning} end_read_variables
        condition {(equal, emergency_stop_warning, False)} end_condition
    } end_check
    check {
        is_reallocation_requested
        read_variables {dd_xy_axis_degradation} end_read_variables
        condition {(equal, dd_xy_axis_degradation, False)} end_condition
    } end_check
    check {
        is_track_pipe_mission_requested
        read_variables {bb_mission} end_read_variables
        condition {(equal, bb_mission, 'pipe_following')} end_condition
    } end_check
    check {
        is_waypoint_requested
        read_variables {bb_mission} end_read_variables
        condition {(equal, bb_mission, 'waypoint_following')} end_condition
    } end_check
    check {
        obstacle_standoff_fs
        read_variables {obstacle_standoff_warning} end_read_variables
        condition {(equal, obstacle_standoff_warning, False)} end_condition
    } end_check
} end_checks
actions {
    action {
        battery2bb
        read_variables {} end_read_variables
        write_variables {battery battery_low_warning} end_write_variables
        init {
	    variable_statement {
	        battery
		result { 5 } end_result
	    } end_variable_statement
	    variable_statement {
	        battery_low_warning
		result { False } end_result
	    } end_variable_statement
	} end_init
        update {
	    variable_statement {
	        local got_new_value
		result { True, False } end_result
	    } end_variable_statement
	    variable_statement {
	        battery
		case { local got_new_value } end_case result { true_battery } end_result
		result { battery } end_result
	    } end_variable_statement
	    variable_statement {
	        battery_low_warning
		case { local got_new_value } end_case result { (less_than, battery, 3) } end_result
		result { battery_low_warning } end_result
	    } end_variable_statement
            return_statement {
	        case {local got_new_value} end_case 
                result {
                    success True
                    failure False
                    running False
                } end_result 
                result {
                    success False
                    failure False
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        dd_lec_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success False
                    failure False
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        ddlec2bb
        read_variables { } end_read_variables
        write_variables {dd_output dd_z_axis_warning dd_xy_axis_warning} end_write_variables
        init {
	    variable_statement {
	        dd_z_axis_warning
		result { False } end_result
	    } end_variable_statement
	    variable_statement {
	        dd_xy_axis_warning
		result { False } end_result
	    } end_variable_statement
	} end_init
        update {
	    variable_statement {
	        local got_new_value
		result { True, False } end_result
	    } end_variable_statement
	    variable_statement {
	        dd_output
		case { local got_new_value } end_case result { 'safe', 'xy_warn', 'z_warn', 'xyz_warn' }
		result { dd_output } end_result
	    } end_variable_statement
	    variable_statement {
	        dd_xy_axis_warning
		case { local got_new_value } end_case result { (or, (equal, dd_output, 'xy_warn'), (equal, dd_output, 'xyz_warn')) } end_result
		result { dd_xy_axis_warning } end_result
	    } end_variable_statement
	    variable_statement {
	        dd_z_axis_warning
		case { local got_new_value } end_case result { (or, (equal, dd_output, 'z_warn'), (equal, dd_output, 'xyz_warn')) } end_result
		result { dd_z_axis_warning } end_result
	    } end_variable_statement
            return_statement {
	        case {local got_new_value} end_case 
                result {
                    success True
                    failure False
                    running False
                } end_result 
                result {
                    success False
                    failure False
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        emergency_stop_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure False
                    running False
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        evaluate
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure False
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        fls2bb
        read_variables { } end_read_variables
        write_variables {fls_range obstacle_standoff_warning obstacle_min_standoff} end_write_variables
        init {
	    variable_statement {
	        obstacle_standoff_warning
		result { False } end_result
	    } end_variable_statement
	    variable_statement {
	        obstacle_min_standoff
		result { 1 } end_result
	    } end_variable_statement
	} end_init
        update {
	    variable_statement {
	        local got_new_value
		result { True, False } end_result
	    } end_variable_statement
	    variable_statement {
	        fls_range
		case { local got_new_value } end_case result { 0, 1, 2 }
		result { dd_output } end_result
	    } end_variable_statement
	    -------------------------RESUME HERE
	    variable_statement {
	        obstacle_standoff_warning
		case { local got_new_value } end_case result { (or, (equal, dd_output, 'xy_warn'), (equal, dd_output, 'xyz_warn')) } end_result
		result { dd_xy_axis_warning } end_result
	    } end_variable_statement
	    variable_statement {
	        dd_z_axis_warning
		case { local got_new_value } end_case result { (or, (equal, dd_output, 'z_warn'), (equal, dd_output, 'xyz_warn')) } end_result
		result { dd_z_axis_warning } end_result
	    } end_variable_statement
            return_statement {
	        case {local got_new_value} end_case 
                result {
                    success True
                    failure False
                    running False
                } end_result 
                result {
                    success False
                    failure False
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        fls_warning2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        geofence2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        home2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        home2bb1
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        hsd_pipe2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        hsd_rth2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        hsd_surface2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        hsd_wp2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        lec2_am_l_2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        lec2_am_r_2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        loiter_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        loiter_task1
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        loiter_task2
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        mission2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        mission_server
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        next_mission
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        obstacle_avoidance
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        pipe_lost2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        pipe_mapping_disable_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        pipe_mapping_disable_task1
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        pipe_mapping_enable_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        reallocate_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        rth2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        rth_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        rth_task1
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        rtreach2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        sensor_failure2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        speed_max_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        speed_min_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        speed_min_task1
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        surface_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        surface_task1
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        surface_task2
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        surface_task3
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        surface_task4
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        tracking_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        waypoint_task
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
    action {
        waypoints_completed2bb
        read_variables { } end_read_variables
        write_variables { } end_write_variables
        init { } end_init
        update {
            return_statement {
                result {
                    success True
                    failure True
                    running True
                } end_result
            } end_return_statement
        } end_update
    } end_action
} end_actions
root_node composite {
    BlueROV
    parallel policy  success_on_all 
    memory False
    children {
        composite {
            topics2bb
            parallel policy  success_on_all 
            memory False
            children {
                battery2bb
                rth2bb
                geofence2bb
                lec2_am_r_2bb
                lec2_am_l_2bb
                pipe_lost2bb
                sensor_failure2bb
                waypoints_completed2bb
                mission2bb
                ddlec2bb
                fls2bb
                fls_warning2bb
                hsd_pipe2bb
                hsd_wp2bb
                hsd_rth2bb
                hsd_surface2bb
                rtreach2bb
		rtreach_unsafe_value2bb
		rtreach_index2bb
            } end_children
        } end_composite
        composite {
            dd_tasks
            selector 
            memory False
            children {
                decorator {
                    reallocate_check_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            reallocate_check
                            selector 
                            memory False
                            children {
                                is_reallocation_requested
                                reallocate_task
                            } end_children
                        } end_composite
                } end_decorator
                dd_lec_task
            } end_children
        } end_composite
        mission_server
        obstacle_avoidance
        composite {
            priorities
            selector 
            memory False
            children {
                decorator {
                    battery_check_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            battery_check
                            selector 
                            memory False
                            children {
                                battery_low_fs
                                surface_task
                            } end_children
                        } end_composite
                } end_decorator
                decorator {
                    sensor_failure_selector_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            sensor_failure_selector
                            selector 
                            memory False
                            children {
                                check_sensor_failure
                                surface_task
                            } end_children
                        } end_composite
                } end_decorator
                decorator {
                    emergency_stop_check_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            emergency_stop_check
                            selector 
                            memory False
                            children {
                                emergency_stop_fs
                                composite {
                                    emergency_stop_tasks
                                    sequence 
                                    memory True
                                    children {
                                        emergency_stop_task
                                        surface_task
                                    } end_children
                                } end_composite
                            } end_children
                        } end_composite
                } end_decorator
                decorator {
                    home_reached_selector_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            home_reached_selector
                            selector 
                            memory False
                            children {
                                check_surface
                                surface_task
                            } end_children
                        } end_composite
                } end_decorator
                decorator {
                    obstacle_standoff_check_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            obstacle_standoff_check
                            selector 
                            memory False
                            children {
                                obstacle_standoff_fs
                                surface_task
                            } end_children
                        } end_composite
                } end_decorator
                decorator {
                    rth_selector_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            rth_selector
                            selector 
                            memory False
                            children {
                                check_rth
                                composite {
                                    rth_par
                                    parallel policy  success_on_all 
                                    memory False
                                    children {
                                        rth_task
                                        home2bb
                                    } end_children
                                } end_composite
                            } end_children
                        } end_composite
                } end_decorator
                decorator {
                    geofence_selector_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            geofence_selector
                            selector 
                            memory False
                            children {
                                check_geofence
                                composite {
                                    rth_par1
                                    parallel policy  success_on_all 
                                    memory False
                                    children {
                                        rth_task
                                        home2bb
                                    } end_children
                                } end_composite
                            } end_children
                        } end_composite
                } end_decorator
                decorator {
                    pipe_lost_selector_SIF
                    X_is_Y
                    X success
                    Y failure
                    child
                        composite {
                            pipe_lost_selector
                            selector 
                            memory False
                            children {
                                check_pipe_lost
                                loiter_task
                            } end_children
                        } end_composite
                } end_decorator
                composite {
                    track_pipe_mission
                    sequence 
                    memory True
                    children {
                        is_track_pipe_mission_requested
                        composite {
                            tracking
                            parallel policy  success_on_all 
                            memory False
                            children {
                                tracking_task
                                composite {
                                    lec2am_speed_cmd
                                    selector 
                                    memory False
                                    children {
                                        decorator {
                                            lec2am_l_speed_check_SIF
                                            X_is_Y
                                            X success
                                            Y failure
                                            child
                                                composite {
                                                    lec2am_l_speed_check
                                                    selector 
                                                    memory False
                                                    children {
                                                        check_lec2am_ls
                                                        speed_min_task
                                                    } end_children
                                                } end_composite
                                        } end_decorator
                                        decorator {
                                            lec2am_r_speed_check_SIF
                                            X_is_Y
                                            X success
                                            Y failure
                                            child
                                                composite {
                                                    lec2am_r_speed_check
                                                    selector 
                                                    memory False
                                                    children {
                                                        check_lec2am_rs
                                                        speed_min_task
                                                    } end_children
                                                } end_composite
                                        } end_decorator
                                        speed_max_task
                                    } end_children
                                } end_composite
                                composite {
                                    lec2am_mapping_cmd
                                    selector 
                                    memory False
                                    children {
                                        decorator {
                                            lec2am_l_mapping_check_SIF
                                            X_is_Y
                                            X success
                                            Y failure
                                            child
                                                composite {
                                                    lec2am_l_mapping_check
                                                    selector 
                                                    memory False
                                                    children {
                                                        check_lec2am_lp
                                                        pipe_mapping_disable_task
                                                    } end_children
                                                } end_composite
                                        } end_decorator
                                        decorator {
                                            lec2am_r_mapping_check_SIF
                                            X_is_Y
                                            X success
                                            Y failure
                                            child
                                                composite {
                                                    lec2am_r_mapping_check
                                                    selector 
                                                    memory False
                                                    children {
                                                        check_lec2am_rp
                                                        pipe_mapping_disable_task1
                                                    } end_children
                                                } end_composite
                                        } end_decorator
                                        pipe_mapping_enable_task
                                    } end_children
                                } end_composite
                            } end_children
                        } end_composite
                        composite {
                            track_pipe_mission_end
			    sequence
                            memory True
			    children {
                                evaluate
			    } end_children
                        } end_composite
                    } end_children
                } end_composite
                composite {
                    waypoint_mission
                    sequence 
                    memory True
                    children {
                        is_waypoint_requested
                        composite {
                            waypoint_selector
                            selector 
                            memory False
                            children {
                                decorator {
                                    waypoints_sif_SIF
                                    X_is_Y
                                    X success
                                    Y failure
                                    child
                                        composite {
                                            waypoints_sif
                                            selector 
                                            memory False
                                            children {
                                                check_waypoints_completed
                                                composite {
                                                    waypoint_end
                                                    sequence 
                                                    memory True
                                                    children {
                                                        next_mission
                                                        loiter_task
                                                    } end_children
                                                } end_composite
                                            } end_children
                                        } end_composite
                                } end_decorator
                                waypoint_task
                            } end_children
                        } end_composite
                    } end_children
                } end_composite
                loiter_task
            } end_children
        } end_composite
    } end_children
} end_composite
