MODULE main
	DEFINE
		max_active_node := 14;
		statuses := [node1.status, node2.status, node9.status, node3.status, node6.status, Dummy.status, Dummy1.status, Dummy2.status, Dummy3.status, node10.status, node13.status, Dummy4.status, Dummy5.status, Dummy6.status, Dummy7.status];
		parents := [-1, 0, 0, 1, 1, 3, 3, 4, 4, 2, 2, 9, 9, 10, 10];
		leafs := {-3, 5, 6, 7, 8, 11, 12, 13, 14};
		selectors := {-3, 1, 2};
		sequences := {-3};
		parallels_synchronised_all := {-3, 0, 3, 4, 9, 10};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3, 0, 3, 4, 9, 10};
		decorators := {-3};
		first_child := [1, 3, 9, 5, 7, -2, -2, -2, -2, 11, 13, -2, -2, -2, -2];
		last_child := [2, 4, 10, 6, 8, -1, -1, -1, -1, 12, 14, -1, -1, -1, -1];
		parallel_resume := [parallel_resume_0, -2, -2, parallel_resume_3, parallel_resume_4, -2, -2, -2, -2, parallel_resume_9, parallel_resume_10, -2, -2, -2, -2];
		parallel_resume_0 := 
			case
				(previous_node < 1) & !(parallel_resume_0_1 = -2) : parallel_resume_0_1;
				(previous_node < 2) & !(parallel_resume_0_2 = -2) : parallel_resume_0_2;
				TRUE : parents[0];
			esac;
		parallel_resume_3 := 
			case
				(previous_node < 5) & !(parallel_resume_3_5 = -2) : parallel_resume_3_5;
				(previous_node < 6) & !(parallel_resume_3_6 = -2) : parallel_resume_3_6;
				TRUE : parents[3];
			esac;
		parallel_resume_4 := 
			case
				(previous_node < 7) & !(parallel_resume_4_7 = -2) : parallel_resume_4_7;
				(previous_node < 8) & !(parallel_resume_4_8 = -2) : parallel_resume_4_8;
				TRUE : parents[4];
			esac;
		parallel_resume_9 := 
			case
				(previous_node < 11) & !(parallel_resume_9_11 = -2) : parallel_resume_9_11;
				(previous_node < 12) & !(parallel_resume_9_12 = -2) : parallel_resume_9_12;
				TRUE : parents[9];
			esac;
		parallel_resume_10 := 
			case
				(previous_node < 13) & !(parallel_resume_10_13 = -2) : parallel_resume_10_13;
				(previous_node < 14) & !(parallel_resume_10_14 = -2) : parallel_resume_10_14;
				TRUE : parents[10];
			esac;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		resume_node : -1..max_active_node;
		previous_status : {running, success, failure, invalid};
		parallel_resume_0_1 : {-2, 1, 3, 4};
		parallel_resume_0_2 : {-2, 2, 9, 10};
		parallel_resume_3_5 : {-2, 5};
		parallel_resume_3_6 : {-2, 6};
		parallel_resume_4_7 : {-2, 7};
		parallel_resume_4_8 : {-2, 8};
		parallel_resume_9_11 : {-2, 11};
		parallel_resume_9_12 : {-2, 12};
		parallel_resume_10_13 : {-2, 13};
		parallel_resume_10_14 : {-2, 14};
		node1 : node_parallel(active_node, 0, previous_status, 2, previous_node, TRUE, TRUE, parallel_resume_0);
		node2 : node_selector(active_node, 1, previous_status, 4, previous_node);
		node9 : node_selector(active_node, 2, previous_status, 10, previous_node);
		node3 : node_parallel(active_node, 3, previous_status, 6, previous_node, TRUE, TRUE, parallel_resume_3);
		node6 : node_parallel(active_node, 4, previous_status, 8, previous_node, TRUE, TRUE, parallel_resume_4);
		Dummy : node_default(active_node, 5);
		Dummy1 : node_default(active_node, 6);
		Dummy2 : node_default(active_node, 7);
		Dummy3 : node_default(active_node, 8);
		node10 : node_parallel(active_node, 9, previous_status, 12, previous_node, TRUE, TRUE, parallel_resume_9);
		node13 : node_parallel(active_node, 10, previous_status, 14, previous_node, TRUE, TRUE, parallel_resume_10);
		Dummy4 : node_default(active_node, 11);
		Dummy5 : node_default(active_node, 12);
		Dummy6 : node_default(active_node, 13);
		Dummy7 : node_default(active_node, 14);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(resume_node) := -1;
		init(previous_status) := invalid;
		init(parallel_resume_0_1) := 1;
		init(parallel_resume_0_2) := 2;
		init(parallel_resume_3_5) := 5;
		init(parallel_resume_3_6) := 6;
		init(parallel_resume_4_7) := 7;
		init(parallel_resume_4_8) := 8;
		init(parallel_resume_9_11) := 11;
		init(parallel_resume_9_12) := 12;
		init(parallel_resume_10_13) := 13;
		init(parallel_resume_10_14) := 14;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(resume_node) :=
			case
				(previous_node < 0) : resume_node;
				!(previous_status = running) : -1;
				(resume_node = -1) : previous_node;
				(previous_node in parallels) : previous_node;
				TRUE : resume_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) & (resume_node = -1) : 0;
				(active_node = -1) & !(resume_node = -1) : resume_node;
				(active_node in leafs) : parents[active_node];
				(previous_status = invalid) : first_child[active_node];
				(previous_node = last_child[active_node]) : parents[active_node];
				(active_node in parallels) : parallel_resume[active_node];
				(active_node in sequences) & (previous_status = success) : min(max_active_node, previous_node + 1);
				(active_node in selectors) & (previous_status = failure) : min(max_active_node, previous_node + 1);
				TRUE : parents[active_node];
			esac;
		next(parallel_resume_0_1) :=
			case
				(parallel_resume_0_1 = 1) & (previous_node in {-2, 1, 3, 4}) & (previous_status = running) : previous_node;
				(previous_node = 1) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 1;
				TRUE : parallel_resume_0_1;
			esac;

		next(parallel_resume_0_2) :=
			case
				(parallel_resume_0_2 = 2) & (previous_node in {-2, 2, 9, 10}) & (previous_status = running) : previous_node;
				(previous_node = 2) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 2;
				TRUE : parallel_resume_0_2;
			esac;

		next(parallel_resume_3_5) :=
			case
				(parallel_resume_3_5 = 5) & (previous_node in {-2, 5}) & (previous_status = running) : previous_node;
				(previous_node = 5) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 5;
				TRUE : parallel_resume_3_5;
			esac;

		next(parallel_resume_3_6) :=
			case
				(parallel_resume_3_6 = 6) & (previous_node in {-2, 6}) & (previous_status = running) : previous_node;
				(previous_node = 6) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 6;
				TRUE : parallel_resume_3_6;
			esac;

		next(parallel_resume_4_7) :=
			case
				(parallel_resume_4_7 = 7) & (previous_node in {-2, 7}) & (previous_status = running) : previous_node;
				(previous_node = 7) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 7;
				TRUE : parallel_resume_4_7;
			esac;

		next(parallel_resume_4_8) :=
			case
				(parallel_resume_4_8 = 8) & (previous_node in {-2, 8}) & (previous_status = running) : previous_node;
				(previous_node = 8) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 8;
				TRUE : parallel_resume_4_8;
			esac;

		next(parallel_resume_9_11) :=
			case
				(parallel_resume_9_11 = 11) & (previous_node in {-2, 11}) & (previous_status = running) : previous_node;
				(previous_node = 11) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 11;
				TRUE : parallel_resume_9_11;
			esac;

		next(parallel_resume_9_12) :=
			case
				(parallel_resume_9_12 = 12) & (previous_node in {-2, 12}) & (previous_status = running) : previous_node;
				(previous_node = 12) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 12;
				TRUE : parallel_resume_9_12;
			esac;

		next(parallel_resume_10_13) :=
			case
				(parallel_resume_10_13 = 13) & (previous_node in {-2, 13}) & (previous_status = running) : previous_node;
				(previous_node = 13) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 13;
				TRUE : parallel_resume_10_13;
			esac;

		next(parallel_resume_10_14) :=
			case
				(parallel_resume_10_14 = 14) & (previous_node in {-2, 14}) & (previous_status = running) : previous_node;
				(previous_node = 14) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 14;
				TRUE : parallel_resume_10_14;
			esac;

MODULE node_parallel(active_node, id, previous_status, last_child, previous_node, synchronized, parallel_policy_all, resumer)
	DEFINE
		status :=
			case
				(id = active_node) & (resumer > id) : invalid;
				(id = active_node) & ((cur_status = failure) | (previous_status = failure)) : failure;
				(id = active_node) & (cur_status = running) & (previous_status = running) : running;
				(id = active_node) & !(parallel_policy_all) : success;
				(id = active_node) & (cur_status = success) & (previous_status = success) : success;
				(id = active_node) : running;
				TRUE : invalid;
			esac;
	VAR
		cur_status : {failure, running, success};
	ASSIGN
		init(cur_status) :=
			case
				(parallel_policy_all) : success;
				TRUE : running;
			esac;
		next(cur_status) :=
			case
				(id = active_node) & ((previous_status = failure) | (cur_status = failure)) : failure;
				(id = active_node) & (parallel_policy_all) & (previous_status = success) : cur_status;
				(id = active_node) & (parallel_policy_all) & (previous_status = running) : running;
				(id = active_node) & !(parallel_policy_all) & (previous_status = success) : success;
				(id = active_node) & !(parallel_policy_all) & (previous_status = running) : cur_status;
				(active_node = -1) & synchronized & (parallel_policy_all) & !(previous_status = running) : success;
				(active_node = -1) & synchronized & !(parallel_policy_all) & !(previous_status = running) : running;
				(active_node = -1) & !(synchronized) & (parallel_policy_all) : success;
				(active_node = -1) & !(synchronized) & !(parallel_policy_all) : running;
				TRUE : cur_status;
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		node1 := 0;
		node2 := 1;
		node9 := 2;
		node3 := 3;
		node6 := 4;
		Dummy := 5;
		Dummy1 := 6;
		Dummy2 := 7;
		Dummy3 := 8;
		node10 := 9;
		node13 := 10;
		Dummy4 := 11;
		Dummy5 := 12;
		Dummy6 := 13;
		Dummy7 := 14;

