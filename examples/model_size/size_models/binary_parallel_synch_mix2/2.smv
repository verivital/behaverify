MODULE main
	DEFINE
		max_active_node := 6;
		statuses := [node1.status, node2.status, node5.status, Dummy.status, Dummy1.status, Dummy2.status, Dummy3.status];
		parents := [-1, 0, 0, 1, 1, 2, 2];
		leafs := {-3, 3, 4, 5, 6};
		selectors := {-3, 0};
		sequences := {-3};
		parallels_synchronised_all := {-3, 1, 2};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3, 1, 2};
		decorators := {-3};
		first_child := [1, 3, 5, -2, -2, -2, -2];
		last_child := [2, 4, 6, -1, -1, -1, -1];
		parallel_resume := [-2, parallel_resume_1, parallel_resume_2, -2, -2, -2, -2];
		parallel_resume_1 := 
			case
				(previous_node < 3) & !(parallel_resume_1_3 = -2) : parallel_resume_1_3;
				(previous_node < 4) & !(parallel_resume_1_4 = -2) : parallel_resume_1_4;
				TRUE : parents[1];
			esac;
		parallel_resume_2 := 
			case
				(previous_node < 5) & !(parallel_resume_2_5 = -2) : parallel_resume_2_5;
				(previous_node < 6) & !(parallel_resume_2_6 = -2) : parallel_resume_2_6;
				TRUE : parents[2];
			esac;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		resume_node : -1..max_active_node;
		previous_status : {running, success, failure, invalid};
		parallel_resume_1_3 : {-2, 3};
		parallel_resume_1_4 : {-2, 4};
		parallel_resume_2_5 : {-2, 5};
		parallel_resume_2_6 : {-2, 6};
		node1 : node_selector(active_node, 0, previous_status, 2, previous_node);
		node2 : node_parallel(active_node, 1, previous_status, 4, previous_node, TRUE, TRUE, parallel_resume_1);
		node5 : node_parallel(active_node, 2, previous_status, 6, previous_node, TRUE, TRUE, parallel_resume_2);
		Dummy : node_default(active_node, 3);
		Dummy1 : node_default(active_node, 4);
		Dummy2 : node_default(active_node, 5);
		Dummy3 : node_default(active_node, 6);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(resume_node) := -1;
		init(previous_status) := invalid;
		init(parallel_resume_1_3) := 3;
		init(parallel_resume_1_4) := 4;
		init(parallel_resume_2_5) := 5;
		init(parallel_resume_2_6) := 6;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(resume_node) :=
			case
				(previous_node < 0) : resume_node;
				!(previous_status = running) : -1;
				(resume_node = -1) : previous_node;
				(previous_node in parallels) : previous_node;
				TRUE : resume_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) & (resume_node = -1) : 0;
				(active_node = -1) & !(resume_node = -1) : resume_node;
				(active_node in leafs) : parents[active_node];
				(previous_status = invalid) : first_child[active_node];
				(previous_node = last_child[active_node]) : parents[active_node];
				(active_node in parallels) : parallel_resume[active_node];
				(active_node in sequences) & (previous_status = success) : min(max_active_node, previous_node + 1);
				(active_node in selectors) & (previous_status = failure) : min(max_active_node, previous_node + 1);
				TRUE : parents[active_node];
			esac;
		next(parallel_resume_1_3) :=
			case
				(parallel_resume_1_3 = 3) & (previous_node in {-2, 3}) & (previous_status = running) : previous_node;
				(previous_node = 3) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 3;
				TRUE : parallel_resume_1_3;
			esac;

		next(parallel_resume_1_4) :=
			case
				(parallel_resume_1_4 = 4) & (previous_node in {-2, 4}) & (previous_status = running) : previous_node;
				(previous_node = 4) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 4;
				TRUE : parallel_resume_1_4;
			esac;

		next(parallel_resume_2_5) :=
			case
				(parallel_resume_2_5 = 5) & (previous_node in {-2, 5}) & (previous_status = running) : previous_node;
				(previous_node = 5) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 5;
				TRUE : parallel_resume_2_5;
			esac;

		next(parallel_resume_2_6) :=
			case
				(parallel_resume_2_6 = 6) & (previous_node in {-2, 6}) & (previous_status = running) : previous_node;
				(previous_node = 6) & (previous_status = success | previous_status = failure) : -2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 6;
				TRUE : parallel_resume_2_6;
			esac;

MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_parallel(active_node, id, previous_status, last_child, previous_node, synchronized, parallel_policy_all, resumer)
	DEFINE
		status :=
			case
				(id = active_node) & (resumer > id) : invalid;
				(id = active_node) & ((cur_status = failure) | (previous_status = failure)) : failure;
				(id = active_node) & (cur_status = running) & (previous_status = running) : running;
				(id = active_node) & !(parallel_policy_all) : success;
				(id = active_node) & (cur_status = success) & (previous_status = success) : success;
				(id = active_node) : running;
				TRUE : invalid;
			esac;
	VAR
		cur_status : {failure, running, success};
	ASSIGN
		init(cur_status) :=
			case
				(parallel_policy_all) : success;
				TRUE : running;
			esac;
		next(cur_status) :=
			case
				(id = active_node) & ((previous_status = failure) | (cur_status = failure)) : failure;
				(id = active_node) & (parallel_policy_all) & (previous_status = success) : cur_status;
				(id = active_node) & (parallel_policy_all) & (previous_status = running) : running;
				(id = active_node) & !(parallel_policy_all) & (previous_status = success) : success;
				(id = active_node) & !(parallel_policy_all) & (previous_status = running) : cur_status;
				(active_node = -1) & synchronized & (parallel_policy_all) & !(previous_status = running) : success;
				(active_node = -1) & synchronized & !(parallel_policy_all) & !(previous_status = running) : running;
				(active_node = -1) & !(synchronized) & (parallel_policy_all) : success;
				(active_node = -1) & !(synchronized) & !(parallel_policy_all) : running;
				TRUE : cur_status;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		node1 := 0;
		node2 := 1;
		node5 := 2;
		Dummy := 3;
		Dummy1 := 4;
		Dummy2 := 5;
		Dummy3 := 6;

