MODULE main
	DEFINE
		max_active_node := 14;
		statuses := [node1.status, node2.status, node9.status, node3.status, node6.status, Dummy.status, Dummy1.status, Dummy2.status, Dummy3.status, node10.status, node13.status, Dummy4.status, Dummy5.status, Dummy6.status, Dummy7.status];
		parents := [-1, 0, 0, 1, 1, 3, 3, 4, 4, 2, 2, 9, 9, 10, 10];
		leafs := {-3, 5, 6, 7, 8, 11, 12, 13, 14};
		selectors := {-3, 0, 1, 2, 3, 4, 9, 10};
		sequences := {-3};
		parallels_synchronised_all := {-3};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3};
		decorators := {-3};
		first_child := [1, 3, 9, 5, 7, -2, -2, -2, -2, 11, 13, -2, -2, -2, -2];
		last_child := [2, 4, 10, 6, 8, -1, -1, -1, -1, 12, 14, -1, -1, -1, -1];
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		resume_node : -1..max_active_node;
		previous_status : {running, success, failure, invalid};
		node1 : node_selector(active_node, 0, previous_status, 2, previous_node);
		node2 : node_selector(active_node, 1, previous_status, 4, previous_node);
		node9 : node_selector(active_node, 2, previous_status, 10, previous_node);
		node3 : node_selector(active_node, 3, previous_status, 6, previous_node);
		node6 : node_selector(active_node, 4, previous_status, 8, previous_node);
		Dummy : node_default(active_node, 5);
		Dummy1 : node_default(active_node, 6);
		Dummy2 : node_default(active_node, 7);
		Dummy3 : node_default(active_node, 8);
		node10 : node_selector(active_node, 9, previous_status, 12, previous_node);
		node13 : node_selector(active_node, 10, previous_status, 14, previous_node);
		Dummy4 : node_default(active_node, 11);
		Dummy5 : node_default(active_node, 12);
		Dummy6 : node_default(active_node, 13);
		Dummy7 : node_default(active_node, 14);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(resume_node) := -1;
		init(previous_status) := invalid;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(resume_node) :=
			case
				(previous_node < 0) : resume_node;
				!(previous_status = running) : -1;
				(resume_node = -1) : previous_node;
				(previous_node in parallels) | (previous_node in selectors) : previous_node;
				TRUE : resume_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) & (resume_node = -1) : 0;
				(active_node = -1) & !(resume_node = -1) : resume_node;
				(active_node in leafs) : parents[active_node];
				(previous_status = invalid) : first_child[active_node];
				(previous_node = last_child[active_node]) : parents[active_node];
				(active_node in sequences) & (previous_status = success) : min(max_active_node, previous_node + 1);
				(active_node in selectors) & (previous_status = failure) : min(max_active_node, previous_node + 1);
				TRUE : parents[active_node];
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		node1 := 0;
		node2 := 1;
		node9 := 2;
		node3 := 3;
		node6 := 4;
		Dummy := 5;
		Dummy1 := 6;
		Dummy2 := 7;
		Dummy3 := 8;
		node10 := 9;
		node13 := 10;
		Dummy4 := 11;
		Dummy5 := 12;
		Dummy6 := 13;
		Dummy7 := 14;
