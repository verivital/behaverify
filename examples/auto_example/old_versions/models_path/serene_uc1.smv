MODULE main
	DEFINE
		max_active_node := 12;
		statuses := [bt_root.status, do_pour_drink_in_kitchen.status, skill_ask_for_help.status, skill_goto_kitchen.status, do_pour_drink.status, do_bottle_and_glass.status, skill_pour_drink.status, do_bottle.status, do_glass.status, skill_find_bottle.status, skill_fetch_bottle.status, skill_find_glass.status, skill_fetch_glass.status];
		parents := [-1, 0, 0, 1, 1, 4, 4, 5, 5, 7, 7, 8, 8];
		leafs := {-3, 2, 3, 6, 9, 10, 11, 12};
		selectors := {-3, 0};
		sequences := {-3, 1, 4, 5, 7, 8};
		parallels_synchronised_all := {-3};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3};
		decorators := {-3};
		first_child := [1, 3, -2, -2, 5, 7, -2, 9, 11, -2, -2, -2, -2];
		last_child := [2, 4, -1, -1, 6, 8, -1, 10, 12, -1, -1, -1, -1];
		next_node := [next_node_0, next_node_1, next_node_2, next_node_3, next_node_4, next_node_5, next_node_6, next_node_7, next_node_8, next_node_9, next_node_10, next_node_11, next_node_12];
		next_node_0 := 
			case
				(previous_status = running | previous_status = success) & (active_node = 0) : parents[0];
				(previous_node <1) : next_node_1;
				(previous_node <2) : next_node_2;
				TRUE : parents[0];
			esac;
		next_node_1 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 1) : parents[1];
				(resume_status_0 = 9) : next_node_9;
				(resume_status_0 = 10) : next_node_10;
				(resume_status_0 = 11) : next_node_11;
				(resume_status_0 = 12) : next_node_12;
				(resume_status_0 = 6) : next_node_6;
				(previous_node <3) : next_node_3;
				(previous_node <4) : next_node_4;
				TRUE : parents[1];
			esac;
		next_node_2 := 
			case
				!(active_node = 2) : 2;
				TRUE : parents[2];
			esac;
		next_node_3 := 
			case
				!(active_node = 3) : 3;
				TRUE : parents[3];
			esac;
		next_node_4 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 4) : parents[4];
				(resume_status_0 = 10) : next_node_10;
				(resume_status_0 = 11) : next_node_11;
				(resume_status_0 = 12) : next_node_12;
				(resume_status_0 = 6) : next_node_6;
				(previous_node <5) : next_node_5;
				(previous_node <6) : next_node_6;
				TRUE : parents[4];
			esac;
		next_node_5 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 5) : parents[5];
				(resume_status_0 = 10) : next_node_10;
				(resume_status_0 = 11) : next_node_11;
				(resume_status_0 = 12) : next_node_12;
				(previous_node <7) : next_node_7;
				(previous_node <8) : next_node_8;
				TRUE : parents[5];
			esac;
		next_node_6 := 
			case
				!(active_node = 6) : 6;
				TRUE : parents[6];
			esac;
		next_node_7 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 7) : parents[7];
				(resume_status_0 = 10) : next_node_10;
				(previous_node <9) : next_node_9;
				(previous_node <10) : next_node_10;
				TRUE : parents[7];
			esac;
		next_node_8 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 8) : parents[8];
				(resume_status_0 = 12) : next_node_12;
				(previous_node <11) : next_node_11;
				(previous_node <12) : next_node_12;
				TRUE : parents[8];
			esac;
		next_node_9 := 
			case
				!(active_node = 9) : 9;
				TRUE : parents[9];
			esac;
		next_node_10 := 
			case
				!(active_node = 10) : 10;
				TRUE : parents[10];
			esac;
		next_node_11 := 
			case
				!(active_node = 11) : 11;
				TRUE : parents[11];
			esac;
		next_node_12 := 
			case
				!(active_node = 12) : 12;
				TRUE : parents[12];
			esac;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		previous_status : {running, success, failure, invalid};
		resume_status_0 : {9, 10, 11, 12, 6, 0};
		bt_root : node_selector(active_node, 0, previous_status, 2, previous_node);
		do_pour_drink_in_kitchen : node_sequence(active_node, 1, previous_status, 4, previous_node);
		skill_ask_for_help : node_default(active_node, 2);
		skill_goto_kitchen : node_default(active_node, 3);
		do_pour_drink : node_sequence(active_node, 4, previous_status, 6, previous_node);
		do_bottle_and_glass : node_sequence(active_node, 5, previous_status, 8, previous_node);
		skill_pour_drink : node_default(active_node, 6);
		do_bottle : node_sequence(active_node, 7, previous_status, 10, previous_node);
		do_glass : node_sequence(active_node, 8, previous_status, 12, previous_node);
		skill_find_bottle : node_default(active_node, 9);
		skill_fetch_bottle : node_default(active_node, 10);
		skill_find_glass : node_default(active_node, 11);
		skill_fetch_glass : node_default(active_node, 12);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(previous_status) := invalid;
		init(resume_status_0) := 0;
		next(resume_status_0 ) := 
			case
				(resume_status_0= 0) & (previous_node in {9, 10, 11, 12, 6, 0}) & (previous_status = running) : previous_node;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 0;
				 (previous_node in {9, 10, 11, 12, 6, 0}) & (previous_status = success | previous_status = failure) : 0;
				(previous_node = parents[0]) & (previous_status = failure | previous_status = success) : 0;
				(previous_node = 0) & (previous_status = failure | previous_status = success) : 0;
				TRUE : resume_status_0;
			esac;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) : 0;
				TRUE : next_node[active_node];
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_sequence(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = failure) : failure;
				(id = active_node) & (last_child = previous_node) : success;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		bt_root := 0;
		do_pour_drink_in_kitchen := 1;
		skill_ask_for_help := 2;
		skill_goto_kitchen := 3;
		do_pour_drink := 4;
		do_bottle_and_glass := 5;
		skill_pour_drink := 6;
		do_bottle := 7;
		do_glass := 8;
		skill_find_bottle := 9;
		skill_fetch_bottle := 10;
		skill_find_glass := 11;
		skill_fetch_glass := 12;
