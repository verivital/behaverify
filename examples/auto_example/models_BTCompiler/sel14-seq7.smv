MODULE main
	VAR
		sel_root : bt_fallback(sel13, sel12);
		sel13 : bt_fallback(sel11, sel10);
		sel11 : bt_fallback(seq7, sel7);
		seq7 : bt_sequence_with_memory(seq3, sel3);
		seq3 : bt_sequence_with_memory(leaf10, leaf11);
		leaf10 : bt_skill;
		leaf11 : bt_skill;
		sel3 : bt_fallback(leaf12, leaf13);
		leaf12 : bt_skill;
		leaf13 : bt_skill;
		sel7 : bt_fallback(seq2, sel2);
		seq2 : bt_sequence_with_memory(leaf14, leaf15);
		leaf14 : bt_skill;
		leaf15 : bt_skill;
		sel2 : bt_fallback(leaf16, leaf17);
		leaf16 : bt_skill;
		leaf17 : bt_skill;
		sel10 : bt_fallback(seq6, sel6);
		seq6 : bt_sequence_with_memory(seq1, sel1);
		seq1 : bt_sequence_with_memory(leaf18, leaf19);
		leaf18 : bt_skill;
		leaf19 : bt_skill;
		sel1 : bt_fallback(leaf20, leaf21);
		leaf20 : bt_skill;
		leaf21 : bt_skill;
		sel6 : bt_fallback(leaf0, leaf1);
		leaf0 : bt_skill;
		leaf1 : bt_skill;
		sel12 : bt_fallback(sel9, sel8);
		sel9 : bt_fallback(seq5, sel5);
		seq5 : bt_sequence_with_memory(leaf2, leaf3);
		leaf2 : bt_skill;
		leaf3 : bt_skill;
		sel5 : bt_fallback(leaf4, leaf5);
		leaf4 : bt_skill;
		leaf5 : bt_skill;
		sel8 : bt_fallback(seq4, sel4);
		seq4 : bt_sequence_with_memory(leaf6, leaf7);
		leaf6 : bt_skill;
		leaf7 : bt_skill;
		sel4 : bt_fallback(leaf8, leaf9);
		leaf8 : bt_skill;
		leaf9 : bt_skill;
		tick_generator : bt_tick_generator(sel_root);
MODULE fake_node()
	CONSTANTS
		success, failure, running, invalid, error;
	DEFINE
		status := error;
MODULE bt_fallback(left_bt, right_bt)
	VAR
		enable : boolean;
	ASSIGN
		left_bt.enable := enable;
		right_bt.enable := (left_bt.output = bt_output_false);
	DEFINE
		output :=
			case
				left_bt.output in { bt_output_running, bt_output_true } : left_bt.output;
				TRUE : right_bt.output;
			esac;
MODULE bt_skill
	IVAR
		input : { bt_input_running, bt_input_false, bt_input_true };
	VAR
		output : { bt_output_none, bt_output_running, bt_output_false, bt_output_true};
		enable : boolean;
	ASSIGN
		init(output) := bt_output_none;
		next(output) :=
			case
				! enable : bt_output_none;
				input = bt_input_running : bt_output_running;
				input = bt_input_false : bt_output_false;
				input = bt_input_true : bt_output_true;
			esac;
MODULE bt_sequence_with_memory(left_bt, right_bt)
	VAR
		enable : boolean;
		has_left_bt_succeded : boolean;
	ASSIGN
		init(has_left_bt_succeded) := FALSE;
		next(has_left_bt_succeded) :=
			case
				right_bt.output in { bt_output_true, bt_output_false } : FALSE; -- Reset.
				left_bt.output = bt_output_true : TRUE; -- Engage.
				TRUE : has_left_bt_succeded; -- Hold.
			esac;
		left_bt.enable := enable & !has_left_bt_succeded;
		right_bt.enable := (left_bt.output = bt_output_true) | (enable & has_left_bt_succeded);
	DEFINE
		output :=
			case
				left_bt.output in { bt_output_running, bt_output_false } : left_bt.output;
				TRUE : right_bt.output;
			esac;
MODULE bt_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := (top_level_bt.output != bt_output_none);
MODULE bt_single_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := FALSE;
