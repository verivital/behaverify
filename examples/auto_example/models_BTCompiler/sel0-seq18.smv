MODULE main
	VAR
		root : bt_sequence_with_memory(seq0, seq010);
		seq0 : bt_sequence_with_memory(seq01, seq07);
		seq01 : bt_sequence_with_memory(seq02, seq05);
		seq02 : bt_sequence_with_memory(seq03, seq04);
		seq03 : bt_sequence_with_memory(leaf13, leaf14);
		leaf13 : bt_skill;
		leaf14 : bt_skill;
		seq04 : bt_sequence_with_memory(leaf15, leaf16);
		leaf15 : bt_skill;
		leaf16 : bt_skill;
		seq05 : bt_sequence_with_memory(seq06, leaf0);
		seq06 : bt_sequence_with_memory(leaf17, leaf18);
		leaf17 : bt_skill;
		leaf18 : bt_skill;
		leaf0 : bt_skill;
		seq07 : bt_sequence_with_memory(seq08, seq09);
		seq08 : bt_sequence_with_memory(leaf1, leaf2);
		leaf1 : bt_skill;
		leaf2 : bt_skill;
		seq09 : bt_sequence_with_memory(leaf3, leaf4);
		leaf3 : bt_skill;
		leaf4 : bt_skill;
		seq010 : bt_sequence_with_memory(seq011, seq014);
		seq011 : bt_sequence_with_memory(seq012, seq013);
		seq012 : bt_sequence_with_memory(leaf5, leaf6);
		leaf5 : bt_skill;
		leaf6 : bt_skill;
		seq013 : bt_sequence_with_memory(leaf7, leaf8);
		leaf7 : bt_skill;
		leaf8 : bt_skill;
		seq014 : bt_sequence_with_memory(seq015, seq016);
		seq015 : bt_sequence_with_memory(leaf9, leaf10);
		leaf9 : bt_skill;
		leaf10 : bt_skill;
		seq016 : bt_sequence_with_memory(leaf11, leaf12);
		leaf11 : bt_skill;
		leaf12 : bt_skill;
		tick_generator : bt_tick_generator(root);
MODULE bt_sequence_with_memory(left_bt, right_bt)
	VAR
		enable : boolean;
		has_left_bt_succeded : boolean;
	ASSIGN
		init(has_left_bt_succeded) := FALSE;
		next(has_left_bt_succeded) :=
			case
				right_bt.output in { bt_output_true, bt_output_false } : FALSE; -- Reset.
				left_bt.output = bt_output_true : TRUE; -- Engage.
				TRUE : has_left_bt_succeded; -- Hold.
			esac;
		left_bt.enable := enable & !has_left_bt_succeded;
		right_bt.enable := (left_bt.output = bt_output_true) | (enable & has_left_bt_succeded);
	DEFINE
		output :=
			case
				left_bt.output in { bt_output_running, bt_output_false } : left_bt.output;
				TRUE : right_bt.output;
			esac;
MODULE bt_skill
	IVAR
		input : { bt_input_running, bt_input_false, bt_input_true };
	VAR
		output : { bt_output_none, bt_output_running, bt_output_false, bt_output_true};
		enable : boolean;
	ASSIGN
		init(output) := bt_output_none;
		next(output) :=
			case
				! enable : bt_output_none;
				input = bt_input_running : bt_output_running;
				input = bt_input_false : bt_output_false;
				input = bt_input_true : bt_output_true;
			esac;
MODULE bt_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := (top_level_bt.output != bt_output_none);
MODULE bt_single_tick_generator(top_level_bt)
	ASSIGN
		init(top_level_bt.enable) := TRUE;
		next(top_level_bt.enable) := FALSE;
