MODULE a_SET_module(active_node, nodes_with_access, variables, variable_exists, node_names, variable_names, previous_status)
	FROZENVAR
		a : 1..8;
	VAR
		a_exists : boolean;
	ASSIGN
		init(a_exists) := FALSE;
		next(a_exists) :=
			case
				(active_node in nodes_with_access) : TRUE;
				TRUE : a_exists;
			esac;
MODULE b_SET_module(active_node, nodes_with_access, variables, variable_exists, node_names, variable_names, previous_status)
	FROZENVAR
		b : 1..8;
	VAR
		b_exists : boolean;
	ASSIGN
		init(b_exists) := FALSE;
		next(b_exists) :=
			case
				(active_node in nodes_with_access) : TRUE;
				TRUE : b_exists;
			esac;
MODULE r_SET_module(active_node, nodes_with_access, variables, variable_exists, node_names, variable_names, previous_status)
	DEFINE
		--r := 0;
		r_exists := TRUE;
	VAR
		r : -1..8;
	ASSIGN
		init(r) := -1;
		next(r) :=
			case
				(active_node = node_names.update_r) & (r = -1) : max(variables[variable_names.a], variables[variable_names.b]); --initial value
				(active_node = node_names.update_r) : variables[variable_names.q];
				(active_node = node_names.r_minus_q) : min(8, max(0, r - variables[variable_names.q]));
				TRUE : r;
			esac;
				
MODULE temp_SET_module(active_node, nodes_with_access, variables, variable_exists, node_names, variable_names, previous_status)
	DEFINE
		temp_exists := TRUE;
	VAR
		temp : 0..8;
	ASSIGN
		init(temp) := 0;
		next(temp) :=
			case
				(active_node = node_names.store_r) : max(0, variables[variable_names.r]);
				TRUE : temp;
			esac;
MODULE q_SET_module(active_node, nodes_with_access, variables, variable_exists, node_names, variable_names, previous_status)
	DEFINE
		q_exists := TRUE;
	VAR
		q : -1..8;
	ASSIGN
		init(q) := -1;
		next(q) :=
			case
				(active_node = node_names.update_q) & (q = -1) : min(variables[variable_names.a], variables[variable_names.b]);
				(active_node = node_names.update_q) : variables[variable_names.temp];
				TRUE : q;
			esac;
MODULE init_a_SET_status_module(active_node, id, variables, variable_exists, node_names, variable_names)
	DEFINE
		status := 
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE init_b_SET_status_module(active_node, id, variables, variable_exists, node_names, variable_names)
	DEFINE
		status := 
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE r_minus_q_SET_status_module(active_node, id, variables, variable_exists, node_names, variable_names)
	DEFINE
		status := 
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE store_r_SET_status_module(active_node, id, variables, variable_exists, node_names, variable_names)
	DEFINE
		status := 
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE update_r_SET_status_module(active_node, id, variables, variable_exists, node_names, variable_names)
	DEFINE
		status := 
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE update_q_SET_status_module(active_node, id, variables, variable_exists, node_names, variable_names)
	DEFINE
		status := 
			case
				(active_node = id) : success;
				TRUE : invalid;
			esac;
MODULE check_r_gt_q_CHECK_r_module(active_node, id, variables, variable_exists, node_names, variable_names)
	DEFINE
		result := ((variables[variable_names.r] > -1) &(variables[variable_names.r] >= variables[variable_names.q]));

