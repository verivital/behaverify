configuration {}
enumerations {}
constants {}

variables {
    variable { bl goals VAR BOOLEAN assign{result{False}}} #{An array of tuples marking where we want to go}#
    variable { bl goal_index VAR [0, 1] assign{result{0}}} #{This stores where we are in the goal array}#
    variable { bl obstacle_map VAR BOOLEAN assign{result{False}}} #{a dictionary of obstacle presence as x, y}#
    variable { bl cost_graph VAR BOOLEAN assign{result{False}}} #{}#
    variable { bl path VAR BOOLEAN assign{result{False}}} #{list of cells to reach that lead to the current goal index}#
    variable { bl path_segment VAR BOOLEAN assign{result{False}}} #{current segment of the path (all same height)}#
    variable { bl path_segment_sent VAR BOOLEAN assign{result{False}}} #{have we sent this segment?}#
    variable { bl position VAR BOOLEAN assign{result{False}}} #{An array of tuples marking where we want to go}#

    variable { local read_success VAR BOOLEAN assign{result{False}}}
    
    variable { env fake VAR [0, 1] assign{result{0}}}
}

environment_update {}

checks {
    check {
	not_near_goal_index
	arguments{}
	read_variables{goals, goal_index, position}
	condition{position}
    }
    check {
	not_near_path_segment_end
	arguments{}
	read_variables{path_segment, position}
	condition{position}
    }
    check {
	obstacle_map_exists_check
	arguments {}
	read_variables{obstacle_map}
	condition{obstacle_map}
    }
    check {
	path_exists_check
	arguments{}
	read_variables{path}
	condition{path}
    }
    check {
	path_segment_exists_check
	arguments{}
	read_variables{path_segment}
	condition{path_segment}
    }
    check {
	path_valid_check
	arguments{}
	read_variables{path, obstacle_map}
	condition{path}
    }
    check {
	sent_path_segment_check
	arguments{}
	read_variables{path_segment_sent}
	condition{path_segment_sent}
    }
}

environment_checks {}

actions {
    action {
	compute_path
	arguments{}
	local_variables{}
	read_variables{position, goals, goal_index}
	write_variables{cost_graph, path, path_segment, path_segment_sent}
	initial_values{}
	update{
	    return_statement{result{success}}
	}
    }
    action {
	compute_path_segment
	arguments{}
	local_variables{}
	read_variables{path}
	write_variables{path_segment, path_segment_sent}
	initial_values{}
	update{
	    return_statement{result{success}}
	}
    }
    action {
	handle_error
	arguments {}
	local_variables {}
	read_variables {}
	write_variables {goal_index, path, path_segment, path_segment_sent}
	initial_values {}
	update {
	    return_statement{result{failure}}
	}
    }
    action {
	read_goals
	arguments{}
	local_variables{}
	read_variables{}
	write_variables{goals}
	initial_values{}
	update{
	    return_statement{
		result{success}
	    }
	}
    }
    action {
	read_initial_obstacle_map
	arguments{}
	local_variables{}
	read_variables{}
	write_variables{obstacle_map, cost_graph}
	initial_values{}
	update{
	    return_statement{
		case{obstacle_map}result{success}result{failure}
	    }
	}
    }
    action {
	read_obstacle_map
	arguments{}
	local_variables{}
	read_variables{position}
	write_variables{obstacle_map, cost_graph}
	initial_values{}
	update{
	    return_statement{
		result{success}
	    }
	}
    }
    action {
	read_position
	arguments{}
	local_variables{read_success}
	read_variables{}
	write_variables{position}
	initial_values{}
	update{
	    return_statement{
		case{read_success}result{success}result{failure}
	    }
	}
    }
    action {
	send_path_segment
	arguments {}
	local_variables {}
	read_variables {path_segment}
	write_variables {path_segment_sent}
	initial_values{}
	update{
	    return_statement{result{success}}
	}
    }
    action {
	update_cost_graph
	arguments{}
	local_variables{}
	read_variables{obstacle_map}
	write_variables{cost_graph}
	initial_values{}
	update{
	    return_statement{result{success}}
	}
    }
    action {
	update_goal_index
	arguments{}
	local_variables{}
	read_variables{}
	write_variables{goal_index, path, path_segment, path_segment_sent}
	initial_values{}
	update{
	    variable_statement{
		goal_index
		assign{result{(add, 1, goal_index)}}
	    }
	    variable_statement{
		path_segment_sent
		assign{result{False}}
	    }
	    return_statement{result{success}}
	}
    }
}
sub_trees {
        sub_tree {
	compute_path_sub_tree
	composite {
	    compute_path_selector selector children {
		path_exists_check {}
		composite {
		    compute_path_sequence sequence children {
			compute_path_0 : compute_path {}
			path_valid_check_0 : path_valid_check {}
		    }
		}
		composite {
		    compute_path_with_map_update_sequence sequence children {
			update_cost_graph {}
			compute_path_1 : compute_path {}
			path_valid_check_1 : path_valid_check {}
		    }
		}
		handle_error {}
	    }
	}
    }
    sub_tree {
	compute_path_segment_sub_tree
	composite {
	    compute_path_segment_selector selector children {
		composite {
		    compute_path_segment_sequence sequence children {
			path_segment_exists_check {}
			not_near_path_segment_end {}
		    }
		}
		compute_path_segment {}
	    }
	}
    }
    sub_tree {
	send_path_segment_sub_tree
	composite {
	    send_path_segment_selector selector children {
		sent_path_segment_check {}
		send_path_segment {}
	    }
	}
    }	
    sub_tree {
	update_goal_index_sub_tree
	composite { update_goal_index_selector selector children { not_near_goal_index {} update_goal_index {}}}
    }
}

tree {
    composite{ drone_control sequence children{
	    composite {
		initial_map_selector selector children {
		    obstacle_map_exists_check {}
		    read_initial_obstacle_map {}
		}
	    }
	    read_goals {}
	    read_position {}
	    read_obstacle_map {}
	    insert {update_goal_index_sub_tree}
	    insert {compute_path_sub_tree}
	    insert {compute_path_segment_sub_tree}
	    insert {send_path_segment_sub_tree}
	}
    }
}

tick_prerequisite {
    True
}

specifications {
}