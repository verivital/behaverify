configuration {
}
enumerations {
}

constants {
    x_max := 399, y_max := 399, z_max := 25
}

variables {
    variable { bl goal VAR [0, x_max] array 3 default{assign{result{0}}}}
    variable { bl goal_requested VAR BOOLEAN assign{result{False}}}
    variable { bl map_exists VAR BOOLEAN assign{result{False}}}
    variable { bl position VAR [0, x_max] array 3 default{assign{result{0}}}}
    variable { bl valid_goal VAR BOOLEAN assign{result{False}}}
    variable { bl valid_position VAR BOOLEAN assign{result{False}}}
    variable { bl waypoint VAR [0, x_max] array 3 default{assign{result{0}}}}

    variable { local success_read VAR BOOLEAN assign{result{False}}}
    
    variable { env fake VAR [0, 1] assign{result{0}}}
}

environment_update {
}

checks {
    check {
	goal_requested_check
	arguments {}
	read_variables{goal_requested}
	condition{goal_requested}
    }
    check {
	not_at_goal
	arguments{}
	read_variables {position, goal}
	condition {
	    (not, 
		(and,
		    (loop, loop_var, [0, 2] such_that True, 
			(eq, (index, position, constant_index loop_var), (index, goal, constant_index loop_var))
		    )
		)
	    )
	}
    }
    check {
	valid_goal_check
	arguments {}
	read_variables{valid_goal}
	condition{valid_goal}
    }
    check {
	valid_position_check
	arguments {}
	read_variables{valid_position}
	condition{valid_position}
    }
    
}

environment_checks {
}

actions {
    action {
	compute_waypoint
	arguments{}
	local_variables{}
	read_variables{position}
	write_variables{waypoint, valid_goal}
	initial_values{}
	update{
	    read_environment{
		compute_waypoint_function
		condition_variable {valid_goal}
		condition {True}
		variable_statement {
		    waypoint
		    constant_index
		    index_of{0}assign{result{0}}
		}
	    }
	    return_statement{case{valid_goal}result{success}result{failure}}
	}
    }
    action {
	read_goal
	arguments{}
	local_variables{}
	read_variables{}
	write_variables{goal, goal_requested, valid_goal}
	initial_values{}
	update{
	    read_environment {
		read_goal_function
		condition{True}
		variable_statement{
		    goal
		    constant_index
		    index_of{0}assign{result{0}}
		}
		variable_statement{
		    goal_requested
		    assign{result{False}}
		}
		variable_statement{
		    valid_goal
		    assign{result{True}}
		}
	    }
	    return_statement{
		case{valid_goal}result{success}result{failure}
	    }
	}
    }
    action {
	read_map
	arguments{}
	local_variables{success_read}
	read_variables{valid_position}
	write_variables{map_exists}
	initial_values{}
	update{
	    read_environment {
		read_map_function
		condition {True}
		variable_statement{
		    map_exists
		    assign{result{True}}
		}
	    }
	    return_statement{
		case{map_exists}result{success}result{failure}
	    }
	}
    }
    action {
	read_position
	arguments{}
	local_variables{}
	read_variables{}
	write_variables{position, valid_position}
	initial_values{}
	update{
	    read_environment {
		read_position_function
		condition_variable {valid_position}
		condition {True}
		variable_statement{
		    position
		    constant_index
		    index_of{0}assign{result{0}}
		}
	    }
	    return_statement{result{success}}
	}
    }
    action {
	send_invalid_goal_request
	arguments{}
	local_variables{}
	read_variables{}
	write_variables{goal_requested}
	initial_values{}
	update{
	    write_environment {
		send_invalid_goal_request_function
		variable_statement {
		    instant
		    fake
		    assign{result{0}}
		}
	    }
	    variable_statement {
		goal_requested
		assign{result{False}} #{Have to actually request a goal as usual.}#
	    }
	    return_statement{
		result{failure}
	    }
	}
    }
    action {
	send_next_goal_request
	arguments{}
	local_variables{}
	read_variables{}
	write_variables{goal_requested}
	initial_values{}
	update{
	    variable_statement {
		goal_requested
		assign{result{True}}
	    }
	    write_environment {
		send_next_goal_request_function
		variable_statement {
		    instant
		    fake
		    assign{result{0}}
		}
	    }
	    return_statement{
		result{failure}
	    }
	}
    }
    action {
	send_waypoint
	arguments{}
	local_variables{}
	read_variables{waypoint}
	write_variables{}
	initial_values{}
	update{
	    write_environment{
		send_waypoint_function
		variable_statement{
		    instant
		    fake
		    assign{result{0}}
		}
	    }
	    return_statement{result{success}}
	}
    }
}
sub_trees {
}

tree {
    composite{ drone_control sequence children{
	    #{}#read_position {} #{success, always.}#
	    composite{ map_and_goal parallel policy success_on_all children{
		    composite{ validate_goal selector children{
			    #{
				four options
				1. current goal is fine (we are not at the goal, and it is a valid goal)
				2. we received a new goal (might be unreachable, but we'll check that later)
				3. we've asked for a new goal
				4. we ask for a new goal
			    }#
			    composite{ current_goal sequence children {
				    #{}#not_at_goal {}
				    #{}#valid_goal_check {}
				}
			    }
			    #{}#read_goal {} #{
				if goal received -> valid_goal -> true (might be invalidated later), waypoints_plotted -> false, goal_requested -> false
				if valid_goal -> success
				failure otherwise
			    }#
			    decorator { cannot_continue X_is_Y X success Y failure child {
				    composite{ new_goal selector children{
					    #{}#goal_requested_check {}
					    #{}#send_next_goal_request {} #{returns failure, always}#
					}
				    }
				}
			    }
			}
		    }
		    #{}#read_map {} #{success if map exists, failure otherwise}#
		}
	    }
	    #{}#valid_position_check{}
	    composite{ plot_waypoint selector children{
		    #{}#compute_waypoint {} #{success if course plotted, failure otherwise}#
		    #{}#send_invalid_goal_request {} #{returns failure, always}#
		}
	    }   
	    #{}#send_waypoint {}
	}
    }
}

tick_prerequisite {
    True
}

specifications {
}