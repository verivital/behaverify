MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		active := [collatz.active, not_finished.active, next_value.active];
		resume_from_here_in_subtree__collatz := -3;
		collatz.active := TRUE;
	VAR
		node_names : define_nodes;
		blackboard : blackboard_module(node_names, active);
		collatz : composite_sequence_without_memory_2(not_finished, next_value);
		next_value : success_DEFAULT_module();
		not_finished : not_finished_module(blackboard);
	ASSIGN
MODULE define_nodes
	DEFINE
		collatz := 0;
		not_finished := 1;
		next_value := 2;
MODULE leaf_module(internal_status_module)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status_module.internal_status : invalid;
MODULE composite_sequence_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = success) : child_0.internal_status;
				!(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = success;
MODULE not_finished_module(blackboard)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (!(blackboard.finished) & !(blackboard.overflow_failure)) ? success : failure;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
MODULE blackboard_module(node_names, active)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		finished := finished_stage_1;
		finished_exists := TRUE;
		finished_stage_1_exists := TRUE;
		overflow_failure := overflow_failure_stage_1;
		overflow_failure_exists := TRUE;
		overflow_failure_stage_1_exists := TRUE;
		value := value_stage_1;
		value_exists := TRUE;
		value_stage_1_exists := TRUE;
	FROZENVAR
	VAR
		finished_stage_1 : boolean;
		overflow_failure_stage_1 : boolean;
		value_stage_1 : 1..1000;
	ASSIGN
		init(finished_stage_1) := 
			case
				TRUE : FALSE;
			esac;
		next(finished_stage_1) := 
			case
				!(active[node_names.next_value]) : finished;
				TRUE : next(value_stage_1) = 1;
			esac;
		init(overflow_failure_stage_1) := 
			case
				TRUE : FALSE;
			esac;
		next(overflow_failure_stage_1) := 
			case
				!(active[node_names.next_value]) : overflow_failure;
				TRUE : next(value_stage_1) = 1000;
			esac;
		init(value_stage_1) := 
			case
				TRUE : {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};
			esac;
		next(value_stage_1) := 
			case
				!(active[node_names.next_value]) : value;
				value mod 2 = 0 : value / 2;
				TRUE : min(value * 3 + 1, 1000);
			esac;

