variables {
	variable {
		value
		VAR
		[1, 1000]
	} end_variable
	variable {
		finished
		VAR
		BOOLEAN
	} end_variable
	variable {
		overflow_failure
		VAR
		BOOLEAN
	} end_variable
} end_variables

local_variables { } end_local_variables

environment_variables { } end_environment_variables

environment { initial_values { } end_initial_values update_values { } end_update_values } end_environment

checks {
	check {
		not_finished
		read_variables { finished overflow_failure } end_read_variables
		condition { (and, (not, finished), (not, overflow_failure)) } end_condition
	} end_check
} end_checks

actions {
	action {
		next_value
		read_variables {} end_read_variables
		write_variables { value finished overflow_failure } end_write_variables
		init {
			variable_statement {
				finished result { False } end_result
			} end_variable_statement
			variable_statement {
				overflow_failure result { False } end_result
			} end_variable_statement
			variable_statement {
				value result { 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 } end_result
			} end_variable_statement
		} end_init
		update {
			variable_statement {
				value
				case { (equal, (mod, value, 2), 0) } end_case
				result { (division, value, 2) } end_result
				result { (min, (addition, (multiplication, value, 3), 1), 1000) } end_result
			} end_variable_statement
			variable_statement {
				finished result { (equal, value, 1) } end_result
			} end_variable_statement
			variable_statement {
				overflow_failure result { (equal, value, 1000) } end_result
			} end_variable_statement
			return_statement {
				result { success True failure False running False } end_result
			} end_return_statement
		} end_update
	} end_action
} end_actions

root_node composite {
	collatz
	sequence memory False
	children { not_finished next_value } end_children
} end_composite