MODULE main
	DEFINE
		max_active_node := 5;
		statuses := [example_1_seq1.status, node_z.status, sel1.status, node_x.status, node_y.status, current_node.status];
		parents := [-1, 0, 0, 2, 2, 2];
		leafs := {-3, 1, 3, 4, 5};
		selectors := {-3, 2};
		selectors_parallel := {-3};
		selectors_non_parallel := {-3, 2};
		sequences := {-3, 0};
		parallels_synchronised_all := {-3};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3};
		decorators := {-3};
		first_child := [1, -2, 3, -2, -2, -2];
		last_child := [2, -1, 5, -1, -1, -1];
		advanced_resume := [-2, -2, advanced_resume_2, -2, -2, -2];
		advanced_resume_2 := 
			case
				(2 in selectors) & (previous_status = success | previous_status = running) : parents[active_node];
				(previous_node < 3) & (advanced_resume_non_parallel_2 in {3}) : advanced_resume_non_parallel_2;
				(previous_node < 3) : 3;
				(previous_node < 4) & (advanced_resume_non_parallel_2 in {4}) : advanced_resume_non_parallel_2;
				(previous_node < 4) : 4;
				(previous_node < 5) & (advanced_resume_non_parallel_2 in {5}) : advanced_resume_non_parallel_2;
				(previous_node < 5) : 5;
				TRUE : parents[2];
			esac;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		resume_node : {1, 2};
		previous_status : {running, success, failure, invalid};
		advanced_resume_non_parallel_2 : {3, 4, 5};
		example_1_seq1 : node_sequence(active_node, 0, previous_status, 2, previous_node);
		node_z : node_default(active_node, 1);
		sel1 : node_selector(active_node, 2, previous_status, 5, previous_node);
		node_x : node_default(active_node, 3);
		node_y : node_default(active_node, 4);
		current_node : node_default(active_node, 5);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(resume_node) := 1;
		init(previous_status) := invalid;
		init(advanced_resume_non_parallel_2) := 3;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(resume_node) :=
			case
				(previous_node < 0) : resume_node;
				!(previous_status = running) : 1;
				(previous_node in{1, 2}) : previous_node;
				TRUE : resume_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) : resume_node;
				(active_node in leafs) : parents[active_node];
				(previous_node = last_child[active_node]) : parents[active_node];
				(active_node in (parallels union selectors)) : advanced_resume[active_node];
				(previous_status = invalid) : first_child[active_node];
				(active_node in sequences) & (previous_status = success) : min(max_active_node, previous_node + 1);
				TRUE : parents[active_node];
			esac;
		next(advanced_resume_non_parallel_2) := 
			case
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 3;
				(previous_node in {3, 4, 5}) & (previous_status = running) : previous_node;
				TRUE : advanced_resume_non_parallel_2;
			esac;
MODULE node_sequence(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = failure) : failure;
				(id = active_node) & (last_child = previous_node) : success;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		example_1_seq1 := 0;
		node_z := 1;
		sel1 := 2;
		node_x := 3;
		node_y := 4;
		current_node := 5;
