MODULE main
	DEFINE
		max_active_node := 14;
		statuses := [example_5_sel1.status, seq1.status, seq2.status, seq3.status, seq4.status, leaf_1.status, leaf_2.status, leaf_3.status, leaf_4.status, seq5.status, seq6.status, leaf_5.status, leaf_6.status, leaf_7.status, leaf_8.status];
		parents := [-1, 0, 0, 1, 1, 3, 3, 4, 4, 2, 2, 9, 9, 10, 10];
		leafs := {-3, 5, 6, 7, 8, 11, 12, 13, 14};
		selectors := {-3, 0};
		selectors_parallel := {-3, 0};
		selectors_non_parallel := {-3};
		sequences := {-3, 1, 2, 3, 4, 9, 10};
		parallels_synchronised_all := {-3};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3};
		decorators := {-3};
		first_child := [1, 3, 9, 5, 7, -2, -2, -2, -2, 11, 13, -2, -2, -2, -2];
		last_child := [2, 4, 10, 6, 8, -1, -1, -1, -1, 12, 14, -1, -1, -1, -1];
		advanced_resume := [advanced_resume_0, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2];
		advanced_resume_0 := 
			case
				(0 in selectors) & (previous_status = success | previous_status = running) : parents[active_node];
				(previous_node < 1) & !(advanced_resume_0_1 = -2) : advanced_resume_0_1;
				(previous_node < 2) & !(advanced_resume_0_2 = -2) : advanced_resume_0_2;
				TRUE : parents[0];
			esac;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		resume_node : {-1, 0};
		previous_status : {running, success, failure, invalid};
		advanced_resume_0_1 : {1,5, 6, 7, 8};
		advanced_resume_0_2 : {2,11, 12, 13, 14};
		example_5_sel1 : node_selector(active_node, 0, previous_status, 2, previous_node);
		seq1 : node_sequence(active_node, 1, previous_status, 4, previous_node);
		seq2 : node_sequence(active_node, 2, previous_status, 10, previous_node);
		seq3 : node_sequence(active_node, 3, previous_status, 6, previous_node);
		seq4 : node_sequence(active_node, 4, previous_status, 8, previous_node);
		leaf_1 : node_default(active_node, 5);
		leaf_2 : node_default(active_node, 6);
		leaf_3 : node_default(active_node, 7);
		leaf_4 : node_default(active_node, 8);
		seq5 : node_sequence(active_node, 9, previous_status, 12, previous_node);
		seq6 : node_sequence(active_node, 10, previous_status, 14, previous_node);
		leaf_5 : node_default(active_node, 11);
		leaf_6 : node_default(active_node, 12);
		leaf_7 : node_default(active_node, 13);
		leaf_8 : node_default(active_node, 14);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(resume_node) := -1;
		init(previous_status) := invalid;
		init(advanced_resume_0_1) := 1;
		init(advanced_resume_0_2) := 2;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(resume_node) :=
			case
				(previous_node < 0) : resume_node;
				!(previous_status = running) : -1;
				(previous_node in{0}) : previous_node;
				TRUE : resume_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) & (resume_node = -1) : 0;
				(active_node = -1) & !(resume_node = -1) : resume_node;
				(active_node in leafs) : parents[active_node];
				(previous_node = last_child[active_node]) : parents[active_node];
				(active_node in (parallels union selectors)) : advanced_resume[active_node];
				(previous_status = invalid) : first_child[active_node];
				(active_node in sequences) & (previous_status = success) : min(max_active_node, previous_node + 1);
				TRUE : parents[active_node];
			esac;
		next(advanced_resume_0_1) :=
			case
				(previous_node = 0) & (previous_status = failure | previous_status = success) : 1;
				(advanced_resume_0_1 = 1) & (previous_node in {5, 6, 7, 8}) & (previous_status = running) : previous_node;
				(previous_node = 1) & (previous_status = failure | previous_status = success) : 1;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 1;
				TRUE : advanced_resume_0_1;
			esac;

		next(advanced_resume_0_2) :=
			case
				(previous_node = 0) & (previous_status = failure | previous_status = success) : 2;
				(advanced_resume_0_2 = 2) & (previous_node in {11, 12, 13, 14}) & (previous_status = running) : previous_node;
				(previous_node = 2) & (previous_status = failure | previous_status = success) : 2;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 2;
				TRUE : advanced_resume_0_2;
			esac;

MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_sequence(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = failure) : failure;
				(id = active_node) & (last_child = previous_node) : success;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		example_5_sel1 := 0;
		seq1 := 1;
		seq2 := 2;
		seq3 := 3;
		seq4 := 4;
		leaf_1 := 5;
		leaf_2 := 6;
		leaf_3 := 7;
		leaf_4 := 8;
		seq5 := 9;
		seq6 := 10;
		leaf_5 := 11;
		leaf_6 := 12;
		leaf_7 := 13;
		leaf_8 := 14;
