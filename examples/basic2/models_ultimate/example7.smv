MODULE main
	DEFINE
		max_active_node := 15;
		statuses := [example_7_sel1.status, seq1.status, seq2.status, leaf_1.status, leaf_2.status, leaf_3.status, leaf_4.status, leaf_5.status, sel2.status, seq3.status, leaf_6.status, seq4.status, leaf_7.status, leaf_8.status, leaf_9.status, leaf_10.status];
		parents := [-1, 0, 0, 1, 1, 1, 1, 2, 2, 2, 8, 8, 11, 11, 9, 9];
		leafs := {-3, 3, 4, 5, 6, 7, 10, 12, 13, 14, 15};
		selectors := {-3, 0, 8};
		sequences := {-3, 1, 2, 9, 11};
		parallels_synchronised_all := {-3};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3};
		decorators := {-3};
		first_child := [1, 3, 7, -2, -2, -2, -2, -2, 10, 14, -2, 12, -2, -2, -2, -2];
		last_child := [2, 6, 9, -1, -1, -1, -1, -1, 11, 15, -1, 13, -1, -1, -1, -1];
		next_node := [next_node_0, next_node_1, next_node_2, next_node_3, next_node_4, next_node_5, next_node_6, next_node_7, next_node_8, next_node_9, next_node_10, next_node_11, next_node_12, next_node_13, next_node_14, next_node_15];
		next_node_0 := 
			case
				(previous_status = running | previous_status = success) & (active_node = 0) : parents[0];
				(previous_node <1) : next_node_1;
				(previous_node <2) : next_node_2;
				TRUE : parents[0];
			esac;
		next_node_1 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 1) : parents[1];
				(resume_status_0 = 4) : next_node_4;
				(resume_status_0 = 5) : next_node_5;
				(resume_status_0 = 6) : next_node_6;
				(previous_node <3) : next_node_3;
				(previous_node <4) : next_node_4;
				(previous_node <5) : next_node_5;
				(previous_node <6) : next_node_6;
				TRUE : parents[1];
			esac;
		next_node_2 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 2) : parents[2];
				(resume_status_0 = 8) : next_node_8;
				(resume_status_0 = 15) : next_node_15;
				(previous_node <7) : next_node_7;
				(previous_node <8) : next_node_8;
				(previous_node <9) : next_node_9;
				TRUE : parents[2];
			esac;
		next_node_3 := 
			case
				!(active_node = 3) : 3;
				TRUE : parents[3];
			esac;
		next_node_4 := 
			case
				!(active_node = 4) : 4;
				TRUE : parents[4];
			esac;
		next_node_5 := 
			case
				!(active_node = 5) : 5;
				TRUE : parents[5];
			esac;
		next_node_6 := 
			case
				!(active_node = 6) : 6;
				TRUE : parents[6];
			esac;
		next_node_7 := 
			case
				!(active_node = 7) : 7;
				TRUE : parents[7];
			esac;
		next_node_8 := 
			case
				(previous_status = running | previous_status = success) & (active_node = 8) : parents[8];
				(previous_node <10) : next_node_10;
				(previous_node <11) : next_node_11;
				TRUE : parents[8];
			esac;
		next_node_9 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 9) : parents[9];
				(resume_status_0 = 15) : next_node_15;
				(previous_node <14) : next_node_14;
				(previous_node <15) : next_node_15;
				TRUE : parents[9];
			esac;
		next_node_10 := 
			case
				!(active_node = 10) : 10;
				TRUE : parents[10];
			esac;
		next_node_11 := 
			case
				(previous_status = running | previous_status = failure) & (active_node = 11) : parents[11];
				(resume_status_0 = 13) : next_node_13;
				(previous_node <12) : next_node_12;
				(previous_node <13) : next_node_13;
				TRUE : parents[11];
			esac;
		next_node_12 := 
			case
				!(active_node = 12) : 12;
				TRUE : parents[12];
			esac;
		next_node_13 := 
			case
				!(active_node = 13) : 13;
				TRUE : parents[13];
			esac;
		next_node_14 := 
			case
				!(active_node = 14) : 14;
				TRUE : parents[14];
			esac;
		next_node_15 := 
			case
				!(active_node = 15) : 15;
				TRUE : parents[15];
			esac;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		previous_status : {running, success, failure, invalid};
		resume_status_0 : {4, 5, 6, 8, 13, 15, 0};
		example_7_sel1 : node_selector(active_node, 0, previous_status, 2, previous_node);
		seq1 : node_sequence(active_node, 1, previous_status, 6, previous_node);
		seq2 : node_sequence(active_node, 2, previous_status, 9, previous_node);
		leaf_1 : node_default(active_node, 3);
		leaf_2 : node_default(active_node, 4);
		leaf_3 : node_default(active_node, 5);
		leaf_4 : node_default(active_node, 6);
		leaf_5 : node_default(active_node, 7);
		sel2 : node_selector(active_node, 8, previous_status, 11, previous_node);
		seq3 : node_sequence(active_node, 9, previous_status, 15, previous_node);
		leaf_6 : node_default(active_node, 10);
		seq4 : node_sequence(active_node, 11, previous_status, 13, previous_node);
		leaf_7 : node_default(active_node, 12);
		leaf_8 : node_default(active_node, 13);
		leaf_9 : node_default(active_node, 14);
		leaf_10 : node_default(active_node, 15);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(previous_status) := invalid;
		init(resume_status_0) := 0;
		next(resume_status_0 ) := 
			case
				(resume_status_0= 0) & (previous_node in {4, 5, 6, 8, 13, 15, 0}) & (previous_status = running) : previous_node;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 0;
				 (previous_node in {4, 5, 6, 8, 13, 15, 0}) & (previous_status = success | previous_status = failure) : 0;
				(previous_node = parents[0]) & (previous_status = failure | previous_status = success) : 0;
				(previous_node = 0) & (previous_status = failure | previous_status = success) : 0;
				TRUE : resume_status_0;
			esac;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) : 0;
				TRUE : next_node[active_node];
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_sequence(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = failure) : failure;
				(id = active_node) & (last_child = previous_node) : success;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		example_7_sel1 := 0;
		seq1 := 1;
		seq2 := 2;
		leaf_1 := 3;
		leaf_2 := 4;
		leaf_3 := 5;
		leaf_4 := 6;
		leaf_5 := 7;
		sel2 := 8;
		seq3 := 9;
		leaf_6 := 10;
		seq4 := 11;
		leaf_7 := 12;
		leaf_8 := 13;
		leaf_9 := 14;
		leaf_10 := 15;
