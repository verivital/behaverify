MODULE main
	DEFINE
		max_active_node := 24;
		statuses := [example_6_seq1.status, sel1.status, sel2.status, leaf_1.status, leaf_2.status, leaf_3.status, leaf_4.status, leaf_5.status, leaf_6.status, leaf_7.status, leaf_8.status, seq2.status, seq3.status, seq4.status, seq5.status, leaf_9.status, leaf_10.status, leaf_11.status, leaf_12.status, seq6.status, seq7.status, leaf_13.status, leaf_14.status, leaf_15.status, leaf_16.status];
		parents := [-1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 11, 11, 13, 13, 14, 14, 12, 12, 19, 19, 20, 20];
		leafs := {-3, 3, 4, 5, 6, 7, 8, 9, 10, 15, 16, 17, 18, 21, 22, 23, 24};
		selectors := {-3, 1, 2};
		selectors_parallel := {-3, 1, 2};
		selectors_non_parallel := {-3};
		sequences := {-3, 0, 11, 12, 13, 14, 19, 20};
		parallels_synchronised_all := {-3};
		parallels_unsynchronised_all := {-3};
		parallels_synchronised_one := {-3};
		parallels_unsynchronised_one := {-3};
		parallels := {-3};
		decorators := {-3};
		first_child := [1, 3, 11, -2, -2, -2, -2, -2, -2, -2, -2, 13, 19, 15, 17, -2, -2, -2, -2, 21, 23, -2, -2, -2, -2];
		last_child := [2, 10, 12, -1, -1, -1, -1, -1, -1, -1, -1, 14, 20, 16, 18, -1, -1, -1, -1, 22, 24, -1, -1, -1, -1];
		advanced_resume := [-2, advanced_resume_1, advanced_resume_2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2];
		advanced_resume_1 := 
			case
				(1 in selectors) & (previous_status = success | previous_status = running) : parents[active_node];
				(previous_node < 3) & !(advanced_resume_1_3 = -2) : advanced_resume_1_3;
				(previous_node < 4) & !(advanced_resume_1_4 = -2) : advanced_resume_1_4;
				(previous_node < 5) & !(advanced_resume_1_5 = -2) : advanced_resume_1_5;
				(previous_node < 6) & !(advanced_resume_1_6 = -2) : advanced_resume_1_6;
				(previous_node < 7) & !(advanced_resume_1_7 = -2) : advanced_resume_1_7;
				(previous_node < 8) & !(advanced_resume_1_8 = -2) : advanced_resume_1_8;
				(previous_node < 9) & !(advanced_resume_1_9 = -2) : advanced_resume_1_9;
				(previous_node < 10) & !(advanced_resume_1_10 = -2) : advanced_resume_1_10;
				TRUE : parents[1];
			esac;
		advanced_resume_2 := 
			case
				(2 in selectors) & (previous_status = success | previous_status = running) : parents[active_node];
				(previous_node < 11) & !(advanced_resume_2_11 = -2) : advanced_resume_2_11;
				(previous_node < 12) & !(advanced_resume_2_12 = -2) : advanced_resume_2_12;
				TRUE : parents[2];
			esac;
		advanced_resume_1_3 := 3;
		advanced_resume_1_4 := 4;
		advanced_resume_1_5 := 5;
		advanced_resume_1_6 := 6;
		advanced_resume_1_7 := 7;
		advanced_resume_1_8 := 8;
		advanced_resume_1_9 := 9;
		advanced_resume_1_10 := 10;
	VAR
		active_node : -2..max_active_node;
		previous_node : -1..max_active_node;
		resume_node : {-1, 1, 2};
		previous_status : {running, success, failure, invalid};
		advanced_resume_2_11 : {11,15, 16, 17, 18};
		advanced_resume_2_12 : {12,21, 22, 23, 24};
		example_6_seq1 : node_sequence(active_node, 0, previous_status, 2, previous_node);
		sel1 : node_selector(active_node, 1, previous_status, 10, previous_node);
		sel2 : node_selector(active_node, 2, previous_status, 12, previous_node);
		leaf_1 : node_default(active_node, 3);
		leaf_2 : node_default(active_node, 4);
		leaf_3 : node_default(active_node, 5);
		leaf_4 : node_default(active_node, 6);
		leaf_5 : node_default(active_node, 7);
		leaf_6 : node_default(active_node, 8);
		leaf_7 : node_default(active_node, 9);
		leaf_8 : node_default(active_node, 10);
		seq2 : node_sequence(active_node, 11, previous_status, 14, previous_node);
		seq3 : node_sequence(active_node, 12, previous_status, 20, previous_node);
		seq4 : node_sequence(active_node, 13, previous_status, 16, previous_node);
		seq5 : node_sequence(active_node, 14, previous_status, 18, previous_node);
		leaf_9 : node_default(active_node, 15);
		leaf_10 : node_default(active_node, 16);
		leaf_11 : node_default(active_node, 17);
		leaf_12 : node_default(active_node, 18);
		seq6 : node_sequence(active_node, 19, previous_status, 22, previous_node);
		seq7 : node_sequence(active_node, 20, previous_status, 24, previous_node);
		leaf_13 : node_default(active_node, 21);
		leaf_14 : node_default(active_node, 22);
		leaf_15 : node_default(active_node, 23);
		leaf_16 : node_default(active_node, 24);
		node_names : define_nodes;
	ASSIGN
		init(active_node) := -1;
		init(previous_node) := -1;
		init(resume_node) := -1;
		init(previous_status) := invalid;
		init(advanced_resume_2_11) := 11;
		init(advanced_resume_2_12) := 12;
		next(previous_node) :=
			case
				(active_node < 0) : -1;
				TRUE : active_node;
			esac;
		next(resume_node) :=
			case
				(previous_node < 0) : resume_node;
				!(previous_status = running) : -1;
				(previous_node in{1, 2}) : previous_node;
				TRUE : resume_node;
			esac;
		next(previous_status) :=
			case
				(active_node < 0) : invalid;
				TRUE : statuses[active_node];
			esac;
		next(active_node) :=
			case
				(active_node = -2) : -2;
				(active_node = -1) & (resume_node = -1) : 0;
				(active_node = -1) & !(resume_node = -1) : resume_node;
				(active_node in leafs) : parents[active_node];
				(previous_node = last_child[active_node]) : parents[active_node];
				(active_node in (parallels union selectors)) : advanced_resume[active_node];
				(previous_status = invalid) : first_child[active_node];
				(active_node in sequences) & (previous_status = success) : min(max_active_node, previous_node + 1);
				TRUE : parents[active_node];
			esac;
		next(advanced_resume_2_11) :=
			case
				(previous_node = 2) & (previous_status = failure | previous_status = success) : 11;
				(advanced_resume_2_11 = 11) & (previous_node in {15, 16, 17, 18}) & (previous_status = running) : previous_node;
				(previous_node = 11) & (previous_status = failure | previous_status = success) : 11;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 11;
				TRUE : advanced_resume_2_11;
			esac;

		next(advanced_resume_2_12) :=
			case
				(previous_node = 2) & (previous_status = failure | previous_status = success) : 12;
				(advanced_resume_2_12 = 12) & (previous_node in {21, 22, 23, 24}) & (previous_status = running) : previous_node;
				(previous_node = 12) & (previous_status = failure | previous_status = success) : 12;
				(previous_node = 0) & (previous_status = success | previous_status = failure) : 12;
				TRUE : advanced_resume_2_12;
			esac;

MODULE node_sequence(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = failure) : failure;
				(id = active_node) & (last_child = previous_node) : success;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_selector(active_node, id, previous_status, last_child, previous_node)
	DEFINE
		status :=
			case
				(id = active_node) & (previous_status = invalid) : invalid;
				(id = active_node) & (previous_status = running) : running;
				(id = active_node) & (previous_status = success) : success;
				(id = active_node) & (last_child = previous_node) : failure;
				(id = active_node) : invalid;
				TRUE : invalid;
			esac;
MODULE node_default(active_node, id)
	DEFINE
		status :=
			case
				(id = active_node) : {success, failure, running};
				TRUE : invalid;
			esac;
MODULE define_nodes
	DEFINE
		example_6_seq1 := 0;
		sel1 := 1;
		sel2 := 2;
		leaf_1 := 3;
		leaf_2 := 4;
		leaf_3 := 5;
		leaf_4 := 6;
		leaf_5 := 7;
		leaf_6 := 8;
		leaf_7 := 9;
		leaf_8 := 10;
		seq2 := 11;
		seq3 := 12;
		seq4 := 13;
		seq5 := 14;
		leaf_9 := 15;
		leaf_10 := 16;
		leaf_11 := 17;
		leaf_12 := 18;
		seq6 := 19;
		seq7 := 20;
		leaf_13 := 21;
		leaf_14 := 22;
		leaf_15 := 23;
		leaf_16 := 24;
