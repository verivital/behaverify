configuration{}
constants {
	MIN_VAL = 2
	MAX_VAL = 5
}
variables { 
	variable { bl blVAR0 array 2 VAR BOOLEAN
		per_index
		assign {
			result {(xor, True, True)}
		}
		assign {
			result {False}
		}
	}
	variable { env envVAR1 array 3 VAR {'yes', 'no', 'both'}
		per_index
		assign {
			case {(xnor, (xnor, (index, blVAR0, 1), False), (not_equal, (greater_than_or_equal, 83, -8), (equal, 'no', 'no')))} result { 'yes'}
			result {'no'}
		}
		assign {
			case {(xnor, (index, blVAR0, 1), False)} result { 'yes'}
			result {'both'}
		}
		assign {
			case {True} result { 'yes'}
			result {'no'}
		}
	}
	variable { env envVAR2 VAR UNBOUND
		assign {
			case {(implies, (implies, True, (index, blVAR0, 0)), True)} result { (addition, 31, -3, 3, -90)}
			result {(min, (count, (implies, False, True), (xnor, (index, blVAR0, 1), (index, blVAR0, 1)), (less_than_or_equal, 80, -44), (not_equal, 4, -2)), -88)}
		}
	}
	variable { env envDEFINE3 DEFINE BOOLEAN
		assign {
			result {(and, (index, blVAR0, 1), (index, blVAR0, 1))}
		}
	}
	variable { env envDEFINE4 DEFINE ENUM
		assign {
			result {(index, envVAR1, 0)}
		}
	}
	variable { local localDEFINE5 DEFINE INT
		assign {
			case {(and, (index, blVAR0, 0), (index, blVAR0, 0))} result { (min, -2, (max, -5, (multiplication, (abs, 53), (subtraction, 2, 4), (subtraction, -36, -39), (max, -49, 67))))}
			result {(min, -2, (max, -5, 31))}
		}
	}
	variable { env envDEFINE6 array 2 DEFINE BOOLEAN
		range
		assign {
			case {(xnor, (implies, (index, blVAR0, 1), (index, blVAR0, 0)), (index, blVAR0, 1))} result { (less_than, envVAR2, envVAR2)}
			case {(xor, (xnor, (index, blVAR0, 0), (index, blVAR0, 1)), (index, blVAR0, 1))} result { (not_equal, 'yes', 'yes')}
			result {(not_equal, envDEFINE4, (index, envVAR1, 0))}
		}
	}
}
environment_update {
	variable_statement{ envVAR1
		per_index
		index_of { (min, 2, (max, 0, (subtraction, 79, (addition, 1, envVAR2))))}
		assign {
			case {(and, (less_than, 33, envVAR2), True)} result { 'both'}
			result {(index, envVAR1, 0)}
		}
		index_of { (min, 2, (max, 0, -50))}
		assign {
			case {(equal, 'no', 'both')} result { 'both'}
			result {envDEFINE4}
		}
	}
	variable_statement{ envVAR2
	assign {
		result {(negative, (multiplication, (max, envVAR2, -93), envVAR2, envVAR2, (multiplication, 13, envVAR2, -78)))}
	}
	}
	variable_statement{ envVAR2
	assign {
		case {(greater_than, envVAR2, (count, (equal, envDEFINE4, 'no'), (less_than_or_equal, envVAR2, -65), (less_than_or_equal, 68, -65)))} result { (addition, -77, envVAR2)}
		case {(less_than_or_equal, (multiplication, (max, envVAR2, envVAR2), envVAR2, envVAR2), (max, envVAR2, (min, envVAR2, -86)))} result { (min, -83, envVAR2)}
		result {(negative, 78)}
	}
	}
	variable_statement{ envVAR2
	assign {
		result {(negative, envVAR2)}
	}
	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0}
		condition{(equal, True, (index, blVAR0, 1))}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0}
		condition{False}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {localDEFINE5}
		read_variables { }
		write_variables {blVAR0}
		initial_values {

		}
		update {
			return_statement {
				result {running}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localDEFINE5}
		read_variables { }
		write_variables {blVAR0}
		initial_values {

		}
		update {
			variable_statement{ blVAR0
				per_index
				index_of { (min, 1, (max, 0, (count, (equal, (index, blVAR0, 1), True), (not_equal, 'no', 'both'))))}
				assign {
					case {(index, blVAR0, 0)} result { (greater_than_or_equal, (multiplication, localDEFINE5, localDEFINE5, 69), localDEFINE5)}
					case {(less_than, (count, (less_than_or_equal, localDEFINE5, (abs, 76)), (greater_than_or_equal, (multiplication, 27, localDEFINE5, localDEFINE5), localDEFINE5), (less_than, (max, -82, localDEFINE5), (abs, 47))), (count, (less_than_or_equal, localDEFINE5, (addition, localDEFINE5, localDEFINE5, localDEFINE5)), (less_than, (multiplication, localDEFINE5, localDEFINE5, -38), 65)))} result { (index, blVAR0, 1)}
					result {(index, blVAR0, 1)}
				}
			}
			return_statement {
				result {failure}
			}
			write_environment {
				a2_write_after_0
				variable_statement{ instant envVAR1
					per_index
					index_of { (min, 2, (max, 0, envVAR2))}
					assign {
						case {(equal, False, (index, envDEFINE6, 1))} result { (index, envVAR1, 1)}
						result {'both'}
					}
				}
				variable_statement{ envVAR2
				assign {
					case {(not_equal, (or, True, (index, blVAR0, 1)), (greater_than_or_equal, localDEFINE5, localDEFINE5))} result { (max, (count, (xnor, (index, envDEFINE6, 0), (equal, True, envDEFINE3)), (xnor, envDEFINE3, False)), (max, envVAR2, 40))}
					case {(less_than_or_equal, envVAR2, (abs, (abs, envVAR2)))} result { (abs, 31)}
					result {(max, -75, 48)}
				}
				}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localDEFINE5}
		read_variables { }
		write_variables {blVAR0}
		initial_values {
			variable_statement{ localDEFINE5
			assign {
				result {(min, -2, (max, -5, (negative, (multiplication, 84, -23, 3, 82))))}
			}
			}

		}
		update {
			return_statement {
				case { (less_than_or_equal, localDEFINE5, 83)} result { failure}
				case { (less_than_or_equal, localDEFINE5, -53)} result { failure}
				case { (greater_than_or_equal, 33, localDEFINE5)} result { failure}
				result {running}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0}
		initial_values {

		}
		update {
			return_statement {
				case { (and, (greater_than_or_equal, -4, -4), (index, blVAR0, 1))} result { running}
				case { (and, False, False)} result { running}
				case { (xnor, (index, blVAR0, 1), (index, blVAR0, 0))} result { success}
				result {running}
			}
			read_environment {
				a4_read_after_1
				condition {(xor, (index, blVAR0, 1), (less_than_or_equal, envVAR2, envVAR2))}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (abs, envVAR2)))}
					assign {
						case {(less_than_or_equal, 6, -30)} result { (greater_than, -83, (abs, envVAR2))}
						result {(implies, (less_than, envVAR2, 14), (xor, (index, blVAR0, 0), envDEFINE3))}
					}
				}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (max, (max, (subtraction, -93, envVAR2), (max, envVAR2, -43)), 98)))}
					assign {
						case {(xor, (index, blVAR0, 0), False)} result { (greater_than, (multiplication, -15, 67, envVAR2), envVAR2)}
						case {(or, (index, envDEFINE6, 0), True)} result { (greater_than, envVAR2, (max, envVAR2, envVAR2))}
						result {(index, blVAR0, 1)}
					}
				}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (min, envVAR2, -28)))}
					assign {
						result {(not_equal, 'yes', (index, envVAR1, 0))}
					}
				}
			}
			read_environment {
				a4_read_after_0
				condition {(less_than_or_equal, (negative, envVAR2), -78)}
				variable_statement{ blVAR0
					per_index
					index_of { (min, 1, (max, 0, (max, (subtraction, -78, 44), -24)))}
					assign {
						result {(greater_than, (negative, envVAR2), -30)}
					}
					index_of { (min, 1, (max, 0, (subtraction, 66, envVAR2)))}
					assign {
						result {(implies, False, (greater_than, 15, envVAR2))}
					}
				}
			}
		}
	}
}
sub_trees{}
tree {
	c2{}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications