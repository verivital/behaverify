configuration{}
enumerations {
	'yes', 'no', 'both'
}
constants {
	MIN_VAL := 2,
	MAX_VAL := 5
}
variables { 
	variable { bl blVAR0 VAR BOOLEAN
assign {case {(xor, False, True)} result { True}case {False} result { (lt, ((min, 50, (max, -50, (abs, 4)))), ((min, 50, (max, -50, (min, (loop, loop_0, {False, (and, False, False)} such_that True, 5))))))}result {(lte, ((min, 50, (max, -50, (add, -7, 4)))), ((min, 50, (max, -50, (neg, 40)))))}}	}
	variable { env envVAR1 VAR [-5, -2]
assign {case {(gt, (if, (gt, 25, -35), -5, -3), ((min, 50, (max, -50, (add, 29, 5, 11)))))} result { (min, -2, (max, -5, ((min, 50, (max, -50, (neg, ((min, 50, (max, -50, (min, ((min, 50, (max, -50, (mult, (loop, loop_0, {'no', 'no'} such_that True, 28), 44, -2)))), -3))))))))))}case {True} result { (min, -2, (max, -5, -3))}result {(min, -2, (max, -5, ((min, 50, (max, -50, (add, -16, -41))))))}}	}
	variable { local localVAR2 array 3 VAR [-5, -2]
default {assign {case {(xor, True, (gte, 3, 2))} result { (min, -2, (max, -5, ((min, 50, (max, -50, (sub, ((min, 50, (max, -50, (add, (loop, loop_0, {blVAR0, blVAR0} such_that True, 5))))), ((min, 50, (max, -50, (min, (loop, loop_0, {(lt, ((min, 50, (max, -50, (add, (loop, loop_0, {'yes', 'yes'} such_that True, 5), 25)))), -3), False} such_that True, -4)))))))))))}case {True} result { (min, -2, (max, -5, ((min, 50, (max, -50, (max, (loop, loop_0, {((min, 50, (max, -50, (add, (loop, loop_0, {'yes', 'no', 'no'} such_that True, 5))))), ((min, 50, (max, -50, (neg, 4))))} such_that True, -50)))))))}result {(min, -2, (max, -5, ((min, 50, (max, -50, (min, -4, 30))))))}}}constant_index index_of {0, 1}assign {case {False} result { (min, -2, (max, -5, 7))}case {(and, (xnor, True, blVAR0), blVAR0)} result { (min, -2, (max, -5, (if, (xnor, (lte, -15, -6), (gte, -27, 13)), ((min, 50, (max, -50, (max, (loop, loop_0, {(lt, 27, -41), (gt, (count, (neq, True, (neq, -15, -4)), (lte, ((min, 50, (max, -50, (min, (loop, loop_0, {(neq, 31, ((min, 50, (max, -50, (min, -2, 13))))), (gte, -44, 0)} such_that True, -19))))), ((min, 50, (max, -50, (neg, -11))))), (implies, True, (equivalent, True, False))), -15)} such_that True, 22))))), ((min, 50, (max, -50, (add, (loop, loop_0, {((min, 50, (max, -50, (add, (if, (xnor, (gt, 45, 4), (gt, 1, -25)), (count, (or, True, False), (lte, -38, 2)), (if, (or, False, False), -3, -43)), ((min, 50, (max, -50, (min, (loop, loop_0, {'yes', 'both'} such_that True, 3))))))))), (if, (or, (equivalent, True, False), (or, False, False)), (if, (lte, -2, -4), -18, 2), ((min, 50, (max, -50, (min, 37, -11))))), 20} such_that True, -46))))))))}result {(min, -2, (max, -5, -1))}}	}
	variable { local localVAR3 array 2 VAR BOOLEAN
default {assign {case {blVAR0} result { (implies, (lte, 8, 37), (xor, True, blVAR0))}case {blVAR0} result { (or, blVAR0, False)}result {(xnor, (lt, (count, (neq, 3, 4), (lte, -4, 3), (implies, False, True), (and, blVAR0, blVAR0)), 16), blVAR0)}}}index_of {(max, 0, (min, 1, -50))}assign {case {blVAR0} result { (lte, 4, ((min, 50, (max, -50, (sub, -45, 3)))))}result {(lte, (count, (lte, -3, ((min, 50, (max, -50, (add, (loop, loop_0, {(xor, True, True), (eq, (lt, -2, 5), True), False} such_that True, 6), 4))))), (gte, ((min, 50, (max, -50, (add, -7, -5)))), -44), (xor, False, True), (lte, -37, ((min, 50, (max, -50, (mult, 4, -42)))))), 0)}}	}
	variable { env envVAR4 VAR [2, 5]
assign {case {False} result { (min, 5, (max, 2, 16))}result {(min, 5, (max, 2, ((min, 50, (max, -50, (sub, envVAR1, ((min, 50, (max, -50, (sub, (loop, loop_0, {envVAR1, envVAR1} such_that True, envVAR1)))))))))))}}	}
	variable { bl blDEFINE5 DEFINE INT
assign {case {(lte, 2, -2)} result { (min, 5, (max, 2, 33))}result {(min, 5, (max, 2, (if, (neq, -9, (if, (xor, True, blVAR0), -20, 3)), ((min, 50, (max, -50, (max, 25, 5)))), ((min, 50, (max, -50, (add, (loop, loop_0, {'yes', 'yes'} such_that True, -1))))))))}}	}
	variable { bl blDEFINE6 array 3 DEFINE INT
default {assign {case {(xnor, True, blVAR0)} result { (min, 5, (max, 2, ((min, 50, (max, -50, (abs, (if, (neq, False, True), blDEFINE5, blDEFINE5)))))))}result {(min, 5, (max, 2, ((min, 50, (max, -50, (sub, (loop, loop_0, {blVAR0, blVAR0} such_that True, blDEFINE5)))))))}}}(loop, loop_0, {'no', 'both'} such_that True, (loop, loop_1, {35, ((min, 50, (max, -50, (mult, (loop, loop_1, {'both', 'no', 'yes', 'no'} such_that True, ((min, 50, (max, -50, (mult, (loop, loop_2, {(count, (gt, -4, -3), (implies, True, False), (gte, 5, -40), (and, False, False)), ((min, 50, (max, -50, (abs, ((min, 50, (max, -50, (sub, 13, -27))))))))} such_that True, 5), (count, (equivalent, False, False), (equivalent, False, False), (lte, 4, -3), (gte, 3, -4)), -2)))))))))} such_that True, index_of {(max, 0, (min, 2, ((min, 50, (max, -50, (sub, (loop, loop_2, {(count, (xor, (xor, False, True), (implies, True, False)), (xor, False, (gte, 3, -4))), ((min, 50, (max, -50, (mult, (loop, loop_2, {'both', 'yes'} such_that True, 4), 3))))} such_that True, blDEFINE5))))))), (max, 0, (min, 2, blDEFINE5))}assign {case {(and, blVAR0, False)} result { (min, 5, (max, 2, 36))}case {(eq, blDEFINE5, blDEFINE5)} result { (min, 5, (max, 2, ((min, 50, (max, -50, (max, (loop, loop_2, {((min, 50, (max, -50, (max, (loop, loop_2, {'no', 'yes'} such_that True, -5))))), ((min, 50, (max, -50, (add, ((min, 50, (max, -50, (mult, (loop, loop_2, {((min, 50, (max, -50, (max, 3, (if, (neq, True, False), -2, -46))))), ((min, 50, (max, -50, (neg, -5))))} such_that True, -50))))), (loop, loop_2, {((min, 50, (max, -50, (sub, (loop, loop_2, {'yes', 'no'} such_that True, 41))))), -6} such_that True, -24)))))} such_that True, (if, (gte, blDEFINE5, blDEFINE5), (if, (neq, blVAR0, blVAR0), blDEFINE5, 16), ((min, 50, (max, -50, (neg, -7))))))))))))}result {(min, 5, (max, 2, 31))}}))	}
	variable { env envDEFINE7 DEFINE BOOLEAN
assign {result {(equivalent, (implies, blVAR0, True), blVAR0)}}	}
	variable { bl blDEFINE8 DEFINE INT
assign {case {(equivalent, blVAR0, (implies, False, True))} result { (min, -2, (max, -5, ((min, 50, (max, -50, (min, (loop, loop_0, {((min, 50, (max, -50, (add, (loop, loop_0, {((min, 50, (max, -50, (abs, 3)))), -36, (if, (xor, False, (or, True, False)), (count, (eq, (gt, -26, 5), True), (implies, False, (eq, True, True)), (or, (and, False, False), True), (gt, ((min, 50, (max, -50, (mult, (loop, loop_0, {'yes', 'both', 'yes'} such_that True, 50))))), ((min, 50, (max, -50, (max, 40, -2)))))), (if, (gt, 4, 4), (if, (or, False, True), 28, 17), ((min, 50, (max, -50, (min, (loop, loop_0, {'no', 'yes'} such_that True, -20))))))), ((min, 50, (max, -50, (add, (loop, loop_0, {True, (xnor, False, (and, True, True))} such_that True, (if, (eq, 5, 46), 5, 5)), 3))))} such_that True, ((min, 50, (max, -50, (sub, (loop, loop_1, {((min, 50, (max, -50, (neg, 47)))), 2} such_that True, -4)))))))))), ((min, 50, (max, -50, (sub, 4, -2))))} such_that True, ((min, 50, (max, -50, (add, -29, -43)))))))))))}result {(min, -2, (max, -5, ((min, 50, (max, -50, (sub, (loop, loop_0, {blVAR0, blVAR0} such_that True, 23)))))))}}	}
}
environment_update {
	variable_statement{ envVAR4
assign {case {(and, envDEFINE7, (xor, False, blVAR0))} result { (min, 5, (max, 2, (index, blDEFINE6, (max, 0, (min, 2, -45)))))}case {(lte, ((min, 50, (max, -50, (sub, (loop, loop_0, {(count, (or, True, (xor, False, True)), (implies, True, (and, False, False)), (equivalent, (gte, 3, -4), (neq, True, True)), (gt, ((min, 50, (max, -50, (abs, 21)))), -2)), (if, (eq, ((min, 50, (max, -50, (abs, -50)))), (if, (lte, 4, 46), -2, -4)), ((min, 50, (max, -50, (mult, (loop, loop_0, {(gt, 12, 4), (lte, ((min, 50, (max, -50, (max, (loop, loop_0, {'yes', 'yes'} such_that True, -7))))), ((min, 50, (max, -50, (sub, (loop, loop_0, {'both', 'yes'} such_that True, -5)))))), (xor, True, False)} such_that True, 48), -4)))), ((min, 50, (max, -50, (add, (loop, loop_0, {(if, (eq, -4, -5), -5, -40), ((min, 50, (max, -50, (min, -2, -4))))} such_that True, 45))))))} such_that True, blDEFINE8))))), ((min, 50, (max, -50, (add, (loop, loop_0, {'yes', 'no'} such_that True, blDEFINE5), 9, 27)))))} result { (min, 5, (max, 2, ((min, 50, (max, -50, (neg, -15))))))}result {(min, 5, (max, 2, ((min, 50, (max, -50, (add, (loop, loop_0, {(implies, (eq, -18, 29), True), (or, False, False)} such_that True, envVAR4), ((min, 50, (max, -50, (sub, (loop, loop_0, {((min, 50, (max, -50, (min, (loop, loop_0, {((min, 50, (max, -50, (min, (loop, loop_0, {'yes', 'yes'} such_that True, -39))))), ((min, 50, (max, -50, (neg, ((min, 50, (max, -50, (sub, (loop, loop_0, {'yes', 'both'} such_that True, 6)))))))))} such_that True, ((min, 50, (max, -50, (abs, 5))))))))), ((min, 50, (max, -50, (max, (loop, loop_0, {'both', 'both'} such_that True, ((min, 50, (max, -50, (neg, 26)))))))))} such_that True, (if, (and, blVAR0, envDEFINE7), -5, blDEFINE8)))))), 2))))))}}	}
	variable_statement{ envVAR1
assign {result {(min, -2, (max, -5, -33))}}	}
	variable_statement{ envVAR1
assign {case {(xor, (and, True, False), envDEFINE7)} result { (min, -2, (max, -5, (count, (equivalent, envDEFINE7, (lte, 13, -44)), (gt, ((min, 50, (max, -50, (mult, (loop, loop_0, {(if, (eq, (gt, -29, 5), (neq, ((min, 50, (max, -50, (sub, 2, -5)))), 40)), ((min, 50, (max, -50, (neg, 4)))), (if, (implies, False, False), (count, (eq, 4, -4), (and, False, False), (implies, False, True)), ((min, 50, (max, -50, (abs, -2)))))), ((min, 50, (max, -50, (sub, -44, 46)))), (if, (neq, ((min, 50, (max, -50, (sub, (loop, loop_0, {'no', 'no'} such_that True, 39))))), (count, (implies, True, True), (eq, -7, -3), (and, True, False), (implies, True, True))), ((min, 50, (max, -50, (mult, 5, (loop, loop_0, {(xnor, True, False), (gte, -14, -2)} such_that True, 7), 50)))), ((min, 50, (max, -50, (sub, -5, 5)))))} such_that True, (index, blDEFINE6, (max, 0, (min, 2, blDEFINE8)))))))), ((min, 50, (max, -50, (sub, (loop, loop_0, {((min, 50, (max, -50, (abs, ((min, 50, (max, -50, (abs, 2)))))))), ((min, 50, (max, -50, (min, (loop, loop_0, {((min, 50, (max, -50, (sub, (loop, loop_0, {(if, (or, True, False), -2, -19), (if, (implies, (or, (gte, -1, -4), (gte, -5, -28)), True), ((min, 50, (max, -50, (mult, (loop, loop_0, {((min, 50, (max, -50, (neg, 28)))), ((min, 50, (max, -50, (mult, (count, (xor, False, False), (neq, True, False), (neq, False, True)), 5))))} such_that True, ((min, 50, (max, -50, (neg, 26))))), 3)))), ((min, 50, (max, -50, (sub, (loop, loop_0, {'yes', 'both'} such_that True, -3))))))} such_that True, 2))))), -5} such_that True, 3)))))} such_that True, -12)))))), (xor, True, envDEFINE7))))}case {(gte, blDEFINE8, blDEFINE5)} result { (min, -2, (max, -5, 31))}result {(min, -2, (max, -5, (if, (gt, ((min, 50, (max, -50, (max, (loop, loop_0, {47, 8} such_that True, envVAR1))))), (if, (eq, (gte, 17, 20), (lt, envVAR1, blDEFINE5)), ((min, 50, (max, -50, (sub, (loop, loop_0, {envDEFINE7, envDEFINE7} such_that True, 42))))), (if, (gte, envVAR4, 10), envVAR4, -2))), (count, (lte, 2, 14), (equivalent, envDEFINE7, blVAR0), (xor, (equivalent, envDEFINE7, blVAR0), (eq, -2, -46))), ((min, 50, (max, -50, (min, (count, (xnor, False, blVAR0), (neq, -17, -10), (lte, 16, envVAR4), (or, False, envDEFINE7)), blDEFINE8)))))))}}	}
}
checks{
	check {
		c1
		arguments{}
		read_variables {blVAR0, blDEFINE5, blDEFINE6, blDEFINE8}
		condition{True}
	}
	check {
		c2
		arguments{}
		read_variables {blVAR0, blDEFINE5, blDEFINE6, blDEFINE8}
		condition{(and, (lt, 20, -27), blVAR0)}
	}
}
environment_checks {}
actions{
	action {
		a1
		arguments{}
		local_variables {}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE6, blDEFINE8}
		initial_values {

		}
		update {
			read_environment {
				a1_read_before_0
				condition {envDEFINE7}
				variable_statement{ blVAR0
assign {case {(lt, 11, 8)} result { (gt, ((min, 50, (max, -50, (max, -23, 16)))), blDEFINE8)}case {(neq, ((min, 50, (max, -50, (max, 20, blDEFINE5)))), ((min, 50, (max, -50, (max, (loop, loop_0, {'no', 'no'} such_that True, envVAR1))))))} result { (lt, 37, (index, blDEFINE6, (max, 0, (min, 2, -39))))}result {(neq, -2, envVAR1)}}				}
				variable_statement{ blVAR0
assign {case {(equivalent, (eq, blDEFINE8, -16), (and, (gte, (index, blDEFINE6, (max, 0, (min, 2, blDEFINE5))), 3), (equivalent, blVAR0, envDEFINE7)))} result { (lte, blDEFINE5, ((min, 50, (max, -50, (min, (loop, loop_0, {((min, 50, (max, -50, (min, (loop, loop_0, {(if, (equivalent, (eq, ((min, 50, (max, -50, (mult, (loop, loop_0, {'both', 'no', 'no'} such_that True, -3), -3)))), ((min, 50, (max, -50, (min, (loop, loop_0, {(eq, -4, -3), (gte, 31, -2)} such_that True, 5)))))), (gte, -3, ((min, 50, (max, -50, (neg, 8)))))), (if, (gte, ((min, 50, (max, -50, (abs, 4)))), 14), ((min, 50, (max, -50, (mult, (loop, loop_0, {'both', 'both', 'no'} such_that True, -6))))), ((min, 50, (max, -50, (sub, (loop, loop_0, {(gt, (if, (xor, True, False), ((min, 50, (max, -50, (mult, (loop, loop_0, {'yes', 'no'} such_that True, 2))))), ((min, 50, (max, -50, (max, 32, -37))))), (if, (implies, True, False), (if, (or, True, False), -13, -46), ((min, 50, (max, -50, (add, (loop, loop_0, {5, -2, ((min, 50, (max, -50, (add, (loop, loop_0, {(if, (neq, (or, (gte, 25, 17), (gt, 2, -18)), (xor, False, (and, True, True))), ((min, 50, (max, -50, (abs, ((min, 50, (max, -50, (max, 48, 4)))))))), ((min, 50, (max, -50, (min, (loop, loop_0, {((min, 50, (max, -50, (min, (loop, loop_0, {'both', 'yes'} such_that True, -5))))), -9} such_that True, ((min, 50, (max, -50, (abs, 18)))))))))), ((min, 50, (max, -50, (mult, 4, 2))))} such_that True, -3))))), 18} such_that True, -50))))))), (lt, 7, 38)} such_that True, 2)))))), ((min, 50, (max, -50, (max, (loop, loop_0, {'both', 'no'} such_that True, ((min, 50, (max, -50, (sub, (loop, loop_1, {'both', 'both'} such_that True, 49))))))))))), -32} such_that True, 4))))), ((min, 50, (max, -50, (min, ((min, 50, (max, -50, (min, (loop, loop_0, {'both', 'yes'} such_that True, 5))))), ((min, 50, (max, -50, (max, (loop, loop_0, {(equivalent, True, False), (gt, -27, ((min, 50, (max, -50, (mult, ((min, 50, (max, -50, (max, 4, 37)))), 4, -49)))))} such_that True, 3)))))))))} such_that True, blDEFINE8))))))}case {(gt, envVAR1, -21)} result { True}result {envDEFINE7}}				}
				variable_statement{ blVAR0
assign {case {(lt, 20, -34)} result { (xnor, False, (xnor, False, False))}case {(and, envDEFINE7, blVAR0)} result { (neq, ((min, 50, (max, -50, (add, (loop, loop_0, {blDEFINE5, blDEFINE5, blDEFINE5} such_that True, -17))))), -1)}result {(gte, envVAR1, blDEFINE5)}}				}
			}
			return_statement {
				case { (gte, ((min, 50, (max, -50, (sub, (loop, loop_0, {blVAR0, blVAR0} such_that True, blDEFINE8))))), ((min, 50, (max, -50, (add, (loop, loop_0, {blDEFINE5, blDEFINE8, blDEFINE8} such_that True, blDEFINE5))))))} result { running}
				case { (gte, ((min, 50, (max, -50, (abs, blDEFINE5)))), blDEFINE5)} result { running}
				result {failure}
			}
		}
	}
	action {
		a2
		arguments{}
		local_variables {localVAR2}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE6, blDEFINE8}
		initial_values {

		}
		update {
			return_statement {
				case { (gt, ((min, 50, (max, -50, (max, 34, 5)))), ((min, 50, (max, -50, (max, (loop, loop_0, {blVAR0, blVAR0} such_that True, 3))))))} result { success}
				case { blVAR0} result { running}
				case { (lt, 33, ((min, 50, (max, -50, (add, (loop, loop_0, {'yes', 'yes'} such_that True, -40))))))} result { success}
				result {running}
			}
			write_environment {
				a2_write_after_0
				variable_statement{ envVAR1
assign {case {(xnor, blVAR0, (gt, (if, (and, blVAR0, True), envVAR4, envVAR1), 16))} result { (min, -2, (max, -5, -10))}case {(gte, ((min, 50, (max, -50, (max, (loop, loop_0, {((min, 50, (max, -50, (add, ((min, 50, (max, -50, (max, (loop, loop_0, {(xnor, (xnor, False, False), True), (xor, (lt, -2, -2), (and, True, (xnor, True, True)))} such_that True, -4))))), ((min, 50, (max, -50, (mult, (loop, loop_0, {((min, 50, (max, -50, (min, (loop, loop_0, {(if, (xnor, (lte, -3, -5), (lt, -33, -5)), (count, (and, True, (equivalent, False, True)), (lte, -4, (count, (eq, True, False), (and, False, False))), (and, True, (and, True, False)), (neq, (equivalent, False, True), (xnor, False, False))), ((min, 50, (max, -50, (neg, (count, (xor, True, True), (or, True, True), (xnor, False, True), (lt, 2, 5))))))), ((min, 50, (max, -50, (add, (if, (lte, -5, 3), 3, 1), (loop, loop_0, {'no', 'no'} such_that True, (if, (xor, True, True), -3, -40)), ((min, 50, (max, -50, (mult, (loop, loop_0, {(xnor, True, False), (or, False, True), (neq, 17, -4)} such_that True, 5), -42))))))))} such_that True, 5))))), ((min, 50, (max, -50, (min, ((min, 50, (max, -50, (mult, -3, 13, 34)))), -3)))), 3} such_that True, 3), -46)))), (loop, loop_0, {-24, (if, (eq, 27, ((min, 50, (max, -50, (sub, 3, -2))))), ((min, 50, (max, -50, (abs, ((min, 50, (max, -50, (sub, (loop, loop_0, {(gte, (count, (implies, False, False), (eq, 38, -5), (gt, -3, -34), (eq, True, True)), (if, (equivalent, False, False), -26, 13)), True} such_that True, -11))))))))), (if, (xor, (eq, True, True), True), ((min, 50, (max, -50, (max, 4, 2)))), ((min, 50, (max, -50, (max, -27, 3))))))} such_that True, ((min, 50, (max, -50, (max, 2, 2))))))))), ((min, 50, (max, -50, (add, (loop, loop_0, {(if, (xnor, (eq, True, False), (xnor, (gte, 2, -31), (xnor, True, False))), (if, (and, (and, False, False), (or, False, True)), ((min, 50, (max, -50, (mult, (loop, loop_0, {False, (gt, 40, 5)} such_that True, 7), 47, 12)))), ((min, 50, (max, -50, (mult, (loop, loop_0, {'yes', 'no'} such_that True, 33), -3, 22))))), ((min, 50, (max, -50, (neg, 25))))), 8} such_that True, -2)))))} such_that True, blDEFINE5))))), (if, (neq, blVAR0, False), 8, envVAR1))} result { (min, -2, (max, -5, 15))}result {(min, -2, (max, -5, (count, (xnor, False, blVAR0), (eq, (index, blDEFINE6, (max, 0, (min, 2, -48))), envVAR4), (or, blVAR0, True))))}}				}
				variable_statement{ instant envVAR1
assign {case {(lte, ((min, 50, (max, -50, (add, blDEFINE5, (loop, loop_0, {envVAR4, envVAR4} such_that True, -24))))), -18)} result { (min, -2, (max, -5, (count, (or, envDEFINE7, blVAR0), (lte, envVAR4, -17), (equivalent, blVAR0, blVAR0), (and, envDEFINE7, True))))}case {(lte, (count, (lte, (if, (equivalent, True, blVAR0), 10, -18), ((min, 50, (max, -50, (mult, (loop, loop_0, {'both', 'no'} such_that True, blDEFINE8), (loop, loop_0, {41, 14} such_that True, 2)))))), (implies, (equivalent, False, blVAR0), blVAR0), (eq, 26, blDEFINE5)), blDEFINE5)} result { (min, -2, (max, -5, ((min, 50, (max, -50, (neg, ((min, 50, (max, -50, (abs, -36))))))))))}result {(min, -2, (max, -5, ((min, 50, (max, -50, (add, (if, (lt, blDEFINE5, blDEFINE5), -39, 15), (loop, loop_0, {'both', 'no'} such_that True, ((min, 50, (max, -50, (mult, (loop, loop_1, {envDEFINE7, blVAR0, blVAR0} such_that True, (index, blDEFINE6, (max, 0, (min, 2, -39)))))))))))))))}}				}
				variable_statement{ envVAR4
assign {result {(min, 5, (max, 2, (count, (and, (lte, blDEFINE8, (index, localVAR2, (max, 0, (min, 2, envVAR1)))), True), (eq, (gte, envVAR4, blDEFINE5), False), (equivalent, (gt, -7, envVAR4), (gte, 31, -40)))))}}				}
			}
		}
	}
	action {
		a3
		arguments{}
		local_variables {localVAR2}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE6, blDEFINE8}
		initial_values {
			variable_statement{ localVAR2
default{assign {result {(min, -2, (max, -5, blDEFINE5))}}}(loop, loop_0, {((min, 50, (max, -50, (mult, (loop, loop_0, {'both', 'yes'} such_that True, ((min, 50, (max, -50, (sub, (loop, loop_1, {(if, (xor, False, False), (count, (xor, True, True), (equivalent, True, True)), ((min, 50, (max, -50, (abs, (if, (lte, 3, 5), 47, 4)))))), -47} such_that True, 5)))))))))), ((min, 50, (max, -50, (abs, 2))))} such_that True, index_of {(max, 0, (min, 2, ((min, 50, (max, -50, (mult, (loop, loop_1, {((min, 50, (max, -50, (add, (loop, loop_1, {(count, (eq, -3, 3), (or, True, False), (gte, -3, -5), (equivalent, True, True)), ((min, 50, (max, -50, (mult, (loop, loop_1, {((min, 50, (max, -50, (add, (loop, loop_1, {False, (gte, 50, -4)} such_that True, 2))))), (if, (eq, 2, 4), -5, -3)} such_that True, 37), (loop, loop_1, {'both', 'both'} such_that True, 30))))), ((min, 50, (max, -50, (add, (loop, loop_1, {(eq, -3, 2), (equivalent, (implies, False, False), False)} such_that True, -3)))))} such_that True, -5))))), ((min, 50, (max, -50, (abs, 5))))} such_that True, 16), 16))))))}assign {case {(xnor, True, True)} result { (min, -2, (max, -5, -41))}result {(min, -2, (max, -5, ((min, 50, (max, -50, (neg, (index, blDEFINE6, (max, 0, (min, 2, -3)))))))))}})(loop, loop_0, {blVAR0, blVAR0, blVAR0, blVAR0} such_that True, index_of {(max, 0, (min, 2, ((min, 50, (max, -50, (mult, (loop, loop_1, {(lt, -4, -2), (and, (equivalent, True, True), (and, True, False))} such_that True, ((min, 50, (max, -50, (min, -4, -5))))), (count, (implies, blVAR0, False), (xnor, False, False)), 3))))))}assign {case {(or, blVAR0, False)} result { (min, -2, (max, -5, ((min, 50, (max, -50, (sub, (loop, loop_1, {((min, 50, (max, -50, (abs, -49)))), ((min, 50, (max, -50, (add, (loop, loop_1, {'yes', 'both'} such_that True, ((min, 50, (max, -50, (sub, (loop, loop_2, {((min, 50, (max, -50, (sub, 4, ((min, 50, (max, -50, (mult, (loop, loop_2, {((min, 50, (max, -50, (min, (loop, loop_2, {'no', 'both'} such_that True, -2))))), (if, (lt, -3, -28), 4, 36)} such_that True, 49), -5)))))))), (if, (lte, ((min, 50, (max, -50, (neg, -28)))), (count, (eq, -4, 4), (gte, -20, 5), (equivalent, True, False), (neq, -43, 28))), ((min, 50, (max, -50, (sub, (loop, loop_2, {'both', 'yes'} such_that True, -9))))), ((min, 50, (max, -50, (abs, 5)))))} such_that True, 2))))))))))} such_that True, 34)))))))}case {blVAR0} result { (min, -2, (max, -5, blDEFINE5))}result {(min, -2, (max, -5, blDEFINE5))}})			}

		}
		update {
			return_statement {
				case { True} result { running}
				result {running}
			}
			read_environment {
				a3_read_after_0
				condition {(xnor, True, blVAR0)}
				variable_statement{ localVAR2
constant_index index_of {0, 1}assign {case {(and, blVAR0, (neq, blVAR0, (eq, 28, blDEFINE5)))} result { (min, -2, (max, -5, ((min, 50, (max, -50, (max, 14, ((min, 50, (max, -50, (max, (loop, loop_0, {'yes', 'yes'} such_that True, 47)))))))))))}case {(and, (equivalent, False, False), envDEFINE7)} result { (min, -2, (max, -5, ((min, 50, (max, -50, (add, (loop, loop_0, {blVAR0, envDEFINE7} such_that True, ((min, 50, (max, -50, (mult, (loop, loop_1, {envDEFINE7, envDEFINE7} such_that True, 3), 24))))), ((min, 50, (max, -50, (mult, (loop, loop_0, {blVAR0, blVAR0, blVAR0} such_that True, -6))))), ((min, 50, (max, -50, (sub, (index, localVAR2, (max, 0, (min, 2, 22))), -29))))))))))}result {(min, -2, (max, -5, ((min, 50, (max, -50, (neg, blDEFINE5))))))}}				}
			}
		}
	}
	action {
		a4
		arguments{}
		local_variables {localVAR2}
		read_variables { }
		write_variables {blVAR0, blDEFINE5, blDEFINE6, blDEFINE8}
		initial_values {

		}
		update {
			return_statement {
				case { (implies, False, True)} result { running}
				case { (eq, ((min, 50, (max, -50, (abs, 11)))), ((min, 50, (max, -50, (add, -47, -10, -45, blDEFINE8)))))} result { success}
				result {success}
			}
			write_environment {
				a4_write_after_0
				variable_statement{ instant envVAR1
assign {case {(lt, -49, -20)} result { (min, -2, (max, -5, (index, blDEFINE6, (max, 0, (min, 2, -20)))))}case {(implies, (equivalent, False, blVAR0), (xor, (equivalent, blVAR0, envDEFINE7), blVAR0))} result { (min, -2, (max, -5, ((min, 50, (max, -50, (max, -28, blDEFINE8))))))}result {(min, -2, (max, -5, ((min, 50, (max, -50, (neg, envVAR1))))))}}				}
				variable_statement{ instant envVAR4
assign {case {(gte, 23, ((min, 50, (max, -50, (neg, 14)))))} result { (min, 5, (max, 2, ((min, 50, (max, -50, (sub, (loop, loop_0, {blDEFINE8, blDEFINE8} such_that True, ((min, 50, (max, -50, (sub, -43, -31)))))))))))}case {(gte, ((min, 50, (max, -50, (max, blDEFINE8, -10)))), (index, localVAR2, (max, 0, (min, 2, -2))))} result { (min, 5, (max, 2, -41))}result {(min, 5, (max, 2, -36))}}				}
			}
		}
	}
}
sub_trees{}
tree {
	composite {
		p_one0
		parallel policy success_on_one
		
		children {
			composite {
				p_one1
				parallel policy success_on_one
				
				children {
					a1{}
					decorator {
						dec_inv2
						inverter
						child {
							a2{}
						}
					}
					decorator {
						dec_rf3
						X_is_Y X running Y failure
						child {
							a4{}
						}
					}
				}
			}
			c1{}
		}
	}
}
tick_prerequisite{True}
specifications { #{ INVAR, LTL, and CTL specs go here }# } end_specifications