constants {
	#comment# constants are used to synchronize values in a .tree file. #end_comment#
	#comment# example = 0 #end_comment#
	#comment# to use example elsewhere, simply type 'example' in place of any integer (quotes included) #end_comment#
	x_min = 0
	x_max = 3
	y_min = 0
	y_max = 3
	reset = -1
	left = 0
	down = 1
	right = 2
	up = 3
} end_constants

blackboard_variables {
	#comment# Blackboard Variable declarations go here #end_comment#
	blackboard_variable { t00 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t01 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t02 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t03 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t10 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t11 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t12 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t13 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t20 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t21 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t22 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t23 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t30 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t31 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t32 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable { t33 VAR {'unknown', 'safe', 'hole', 'goal'} initial_value { result {'unknown'} end_result } end_initial_value } end_blackboard_variable
	blackboard_variable {
		x_loc
		VAR
		['x_min', 'x_max']
		initial_value { result { 'x_min' } end_result } end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		y_loc
		VAR
		['y_min', 'y_max']
		initial_value { result { 'y_min } end_result } end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		x_cur_target
		VAR
		['x_min', 'x_max']
		initial_value { result { 'x_min' } end_result } end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		y_cur_target
		VAR
		['y_min', 'y_max']
		initial_value { result { 'y_min' } end_result } end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		selected_action
		VAR
		{'reset', 'left', 'down', right', 'up'}
		initial_value { result { 'left' } end_result } end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		reached_left
		VAR
		BOOLEAN
		initial_value { result { FALSE } end_result } end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		reached_top
		VAR
		BOOLEAN
		initial_value { result { FALSE } end_result } end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		state_right
		DEFINE ENUM
		initial_value {
			case { (and, (equal, (addition, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t00 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t01 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t02 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t03 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t10 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t11 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t12 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t13 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t20 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t21 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t22 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t23 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t30 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t31 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t32 } end_result
			case { (and, (equal, (addition, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t33 } end_result
			result { 'hole' } end_result
		} end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		state_left
		DEFINE ENUM
		initial_value {
			case { (and, (equal, (subtraction, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t00 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t01 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t02 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t03 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t10 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t11 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t12 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t13 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t20 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t21 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t22 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t23 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 0), (equal, bl y_loc, 0)) } end_case result { bl t30 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 1), (equal, bl y_loc, 1)) } end_case result { bl t31 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 2), (equal, bl y_loc, 2)) } end_case result { bl t32 } end_result
			case { (and, (equal, (subtraction, bl x_loc, 1), 3), (equal, bl y_loc, 3)) } end_case result { bl t33 } end_result
			result { 'hole' } end_result
		} end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		state_up
		DEFINE ENUM
		initial_value {
			case { (and, (equal, bl x_loc, 0), (equal, (subtraction, bl y_loc, 1), 0)) } end_case result { bl t00 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (subtraction, bl y_loc, 1), 1)) } end_case result { bl t01 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (subtraction, bl y_loc, 1), 2)) } end_case result { bl t02 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (subtraction, bl y_loc, 1), 3)) } end_case result { bl t03 } end_result
			case { (and, (equal, bl x_loc, 0), (equal, (subtraction, bl y_loc, 1), 0)) } end_case result { bl t10 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (subtraction, bl y_loc, 1), 1)) } end_case result { bl t11 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (subtraction, bl y_loc, 1), 2)) } end_case result { bl t12 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (subtraction, bl y_loc, 1), 3)) } end_case result { bl t13 } end_result
			case { (and, (equal, bl x_loc, 0), (equal, (subtraction, bl y_loc, 1), 0)) } end_case result { bl t20 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (subtraction, bl y_loc, 1), 1)) } end_case result { bl t21 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (subtraction, bl y_loc, 1), 2)) } end_case result { bl t22 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (subtraction, bl y_loc, 1), 3)) } end_case result { bl t23 } end_result
			case { (and, (equal, bl x_loc, 0), (equal, (subtraction, bl y_loc, 1), 0)) } end_case result { bl t30 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (subtraction, bl y_loc, 1), 1)) } end_case result { bl t31 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (subtraction, bl y_loc, 1), 2)) } end_case result { bl t32 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (subtraction, bl y_loc, 1), 3)) } end_case result { bl t33 } end_result
			result { 'hole' } end_result
		} end_initial_value
	} end_blackboard_variable
	blackboard_variable {
		state_down
		DEFINE ENUM
		initial_value {
			case { (and, (equal, bl x_loc, 0), (equal, (addition, bl y_loc, 1), 0)) } end_case result { bl t00 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (addition, bl y_loc, 1), 1)) } end_case result { bl t01 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (addition, bl y_loc, 1), 2)) } end_case result { bl t02 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (addition, bl y_loc, 1), 3)) } end_case result { bl t03 } end_result
			case { (and, (equal, bl x_loc, 0), (equal, (addition, bl y_loc, 1), 0)) } end_case result { bl t10 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (addition, bl y_loc, 1), 1)) } end_case result { bl t11 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (addition, bl y_loc, 1), 2)) } end_case result { bl t12 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (addition, bl y_loc, 1), 3)) } end_case result { bl t13 } end_result
			case { (and, (equal, bl x_loc, 0), (equal, (addition, bl y_loc, 1), 0)) } end_case result { bl t20 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (addition, bl y_loc, 1), 1)) } end_case result { bl t21 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (addition, bl y_loc, 1), 2)) } end_case result { bl t22 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (addition, bl y_loc, 1), 3)) } end_case result { bl t23 } end_result
			case { (and, (equal, bl x_loc, 0), (equal, (addition, bl y_loc, 1), 0)) } end_case result { bl t30 } end_result
			case { (and, (equal, bl x_loc, 1), (equal, (addition, bl y_loc, 1), 1)) } end_case result { bl t31 } end_result
			case { (and, (equal, bl x_loc, 2), (equal, (addition, bl y_loc, 1), 2)) } end_case result { bl t32 } end_result
			case { (and, (equal, bl x_loc, 3), (equal, (addition, bl y_loc, 1), 3)) } end_case result { bl t33 } end_result
			result { 'hole' } end_result
		} end_initial_value
	} end_blackboard_variable
} end_blackboard_variables

local_variables {
} end_local_variables

environment {
	environment_variables {
		environment_variable {
			start_x_loc
			FROZENVAR
			['x_min', 'x_max']
			initial_value { result {range, 'x_min', 'x_max', True } end_result } end_initial_value
		} end_environment_variable
		environment_variable {
			start_y_loc
			FROZENVAR
			['y_min', 'y_max']
			initial_value { result {range, 'y_min', 'y_max', True  } end_result } end_initial_value
		} end_environment_variable
		environment_variable {
			goal_x_loc
			FROZENVAR
			['x_min', 'x_max']
			initial_value { result {range, 'x_min', 'x_max', True } end_result } end_initial_value
		} end_environment_variable
		environment_variable {
			goal_y_loc
			FROZENVAR
			['y_min', 'y_max']
			initial_value { result {range, 'y_min', 'y_max', True } end_result } end_initial_value
		} end_environment_variable
		environment_variable {
			true_x_loc
			VAR
			['x_min', 'x_max']
			initial_value { result {env start_x_loc} end_result } end_initial_value
		} end_environment_variable
		environment_variable {
			true_y_loc
			VAR
			['y_min', 'y_max']
			initial_value { result {env start_y_loc }end_result } end_initial_value
		} end_environment_variable
		environment_variable { true_t00 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 0), (equal, env goal_y_loc, 0))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 0), (equal, env start_y_loc, 0)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t01 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 0), (equal, env goal_y_loc, 1))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 0), (equal, env start_y_loc, 1)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t02 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 0), (equal, env goal_y_loc, 2))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 0), (equal, env start_y_loc, 2)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t03 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 0), (equal, env goal_y_loc, 3))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 0), (equal, env start_y_loc, 3)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t10 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 1), (equal, env goal_y_loc, 0))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 1), (equal, env start_y_loc, 0)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t11 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 1), (equal, env goal_y_loc, 1))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 1), (equal, env start_y_loc, 1)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t12 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 1), (equal, env goal_y_loc, 2))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 1), (equal, env start_y_loc, 2)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t13 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 1), (equal, env goal_y_loc, 3))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 1), (equal, env start_y_loc, 3)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t20 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 2), (equal, env goal_y_loc, 0))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 2), (equal, env start_y_loc, 0)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t21 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 2), (equal, env goal_y_loc, 1))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 2), (equal, env start_y_loc, 1)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t22 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 2), (equal, env goal_y_loc, 2))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 2), (equal, env start_y_loc, 2)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t23 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 2), (equal, env goal_y_loc, 3))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 2), (equal, env start_y_loc, 3)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t30 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 3), (equal, env goal_y_loc, 0))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 3), (equal, env start_y_loc, 0)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t31 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 3), (equal, env goal_y_loc, 1))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 3), (equal, env start_y_loc, 1)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t32 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 3), (equal, env goal_y_loc, 2))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 3), (equal, env start_y_loc, 2)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
		environment_variable { true_t33 FROZENVAR {'safe', 'hole', 'goal'} 
			initial_value {
				case { (and, (equal, env goal_x_loc, 3), (equal, env goal_y_loc, 3))  } end_case result { 'goal' } end_result
				case { (and, (equal, env start_x_loc, 3), (equal, env start_y_loc, 3)) } end_case result { 'safe' } end_result
				result { 'safe', 'hole'} end_result
			} end_initial_value 
		} end_environment_variable
	} end_environment_variables
	update_values {
	} end_update_values
} end_environment

checks {
	check {
		fell_in_hole
		read_variables { x_loc y_loc t00 t01 t02 t03 t10 t11 t12 t13 t20 t21 t22 t23 t30 t31 t32 t33} end_read_variables
		condition {
			(or,
				(and, (equal, bl x_loc, 0), (equal, bl y_loc, 0), (equal, bl t00, 'hole')),
				(and, (equal, bl x_loc, 0), (equal, bl y_loc, 1), (equal, bl t01, 'hole')),
				(and, (equal, bl x_loc, 0), (equal, bl y_loc, 2), (equal, bl t02, 'hole')),
				(and, (equal, bl x_loc, 0), (equal, bl y_loc, 3), (equal, bl t03, 'hole')),
				(and, (equal, bl x_loc, 1), (equal, bl y_loc, 0), (equal, bl t10, 'hole')),
				(and, (equal, bl x_loc, 1), (equal, bl y_loc, 1), (equal, bl t11, 'hole')),
				(and, (equal, bl x_loc, 1), (equal, bl y_loc, 2), (equal, bl t12, 'hole')),
				(and, (equal, bl x_loc, 1), (equal, bl y_loc, 3), (equal, bl t13, 'hole')),
				(and, (equal, bl x_loc, 2), (equal, bl y_loc, 0), (equal, bl t20, 'hole')),
				(and, (equal, bl x_loc, 2), (equal, bl y_loc, 1), (equal, bl t21, 'hole')),
				(and, (equal, bl x_loc, 2), (equal, bl y_loc, 2), (equal, bl t22, 'hole')),
				(and, (equal, bl x_loc, 2), (equal, bl y_loc, 3), (equal, bl t23, 'hole')),
				(and, (equal, bl x_loc, 3), (equal, bl y_loc, 0), (equal, bl t30, 'hole')),
				(and, (equal, bl x_loc, 3), (equal, bl y_loc, 1), (equal, bl t31, 'hole')),
				(and, (equal, bl x_loc, 3), (equal, bl y_loc, 2), (equal, bl t32, 'hole')),
				(and, (equal, bl x_loc, 3), (equal, bl y_loc, 3), (equal, bl t33, 'hole'))
			)
		} end_condition
	} end_check
} end_checks

environment_checks {
	#comment# check environment nodes are defined here #end_comment#
	#comment#
	environment_check {
		z_idk
		read_variables {} end_read_variables
		condition { env z } end_condition
	} end_environment_check
	#end_comment#
} end_environment_checks

actions {
	action {
		get_info
		local_variables {} end_local_variables
		read_variables {} end_read_variables
		write_variables { loc t0 t1 t2 t3 t4 t5 t6 t7 t8 t9 t10 t11 t12 t13 t14 t15 } end_write_variables
		initial_values {} end_initial_values
		update {
			read_environment {
				get_info_func
				condition { True } end_condition
				variable_statement { bl loc result { env true_loc } end_result } end_variable_statement
				variable_statement { bl t0 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t0 } end_result } end_variable_statement
				variable_statement { bl t1 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t1 } end_result } end_variable_statement
				variable_statement { bl t2 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t2 } end_result } end_variable_statement
				variable_statement { bl t3 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t3 } end_result } end_variable_statement
				variable_statement { bl t4 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t4 } end_result } end_variable_statement
				variable_statement { bl t5 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t5 } end_result } end_variable_statement
				variable_statement { bl t6 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t6 } end_result } end_variable_statement
				variable_statement { bl t7 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t7 } end_result } end_variable_statement
				variable_statement { bl t8 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t8 } end_result } end_variable_statement
				variable_statement { bl t9 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t9 } end_result } end_variable_statement
				variable_statement { bl t10 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t10 } end_result } end_variable_statement
				variable_statement { bl t11 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t11 } end_result } end_variable_statement
				variable_statement { bl t12 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t12 } end_result } end_variable_statement
				variable_statement { bl t13 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t13 } end_result } end_variable_statement
				variable_statement { bl t14 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t14 } end_result } end_variable_statement
				variable_statement { bl t15 case { (equal, 0, env true_loc) } end_case result { env true_t0 } end_result result { bl t15 } end_result } end_variable_statement
			} end_read_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action
	action {
		move
		local_variables {} end_local_variables
		read_variables {selected_action} end_read_variables
		write_variabes {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
				move_func
				update_values {
					environment_statement {
						env true_x_loc
						case { (equal, bl selected_action, 'up') } end_case
						result { env true_x_loc } end_result
						case { (equal, bl selected_action, 'down') } end_case
						result { env true_x_loc } end_result
						case { (equal, bl selected_action, 'left') } end_case
						result { (max, 'x_min', (subtraction, env true_x_loc, 1)) } end_result
						case { (equal, bl selected_action, 'right') } end_case
						result { (min, 'x_max', (addition, env true_x_loc, 1)) } end_result
						result { env start_x_loc } end_result
					} end_environment_statement
					environment_statement {
						env true_y_loc
						case { (equal, bl selected_action, 'up') } end_case
						result { (max, 'y_min', (subtraction, env true_y_loc, 1)) } end_result
						case { (equal, bl selected_action, 'down') } end_case
						result { (min, 'y_may', (addition, env true_y_loc, 1)) } end_result
						case { (equal, bl selected_action, 'left') } end_case
						result { env true_y_loc } end_result
						case { (equal, bl selected_action, 'right') } end_case
						result { env true_y_loc } end_result
						result { env start_y_loc } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action
	action {
		adjacent_unknown
		local_variables {} end_local_variables
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			variable_statement {
				selected_action
				case { (equal, bl state_right, 'unknown') } end_case result { 'right' } end_result
				case { (equal, bl state_left, 'unknown') } end_case result { 'left' } end_result
				case { (equal, bl state_up, 'unknown') } end_case result { 'up' } end_result
				case { (equal, bl state_down, 'unknown') } end_case result { 'down' } end_result
				result { bl selected_action } end_result
			} end_variable_statement
			return_statement {
				case { (or,
					(equal, bl state_right, 'unknown'),
					(equal, bl state_left, 'unknown'),
					(equal, bl state_up, 'unknown'),
					(equal, bl state_down, 'unknown')) } end_case result { success } end_result
				result { failure } end_result
			} end_return_statement
		} end_update
	} end_action
	action {
		grid_search
		local_variables {} end_local_variables
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			variable_statement {
				selected_action
				case { (equal, bl state_right, 'unknown') } end_case result { 'right' } end_result
				case { (equal, bl state_left, 'unknown') } end_case result { 'left' } end_result
				case { (equal, bl state_up, 'unknown') } end_case result { 'up' } end_result
				case { (equal, bl state_down, 'unknown') } end_case result { 'down' } end_result
				result { bl selected_action } end_result
			} end_variable_statement
			return_statement {
				case { (or,
					(equal, bl state_right, 'unknown'),
					(equal, bl state_left, 'unknown'),
					(equal, bl state_up, 'unknown'),
					(equal, bl state_down, 'unknown')) } end_case result { success } end_result
				result { failure } end_result
			} end_return_statement
		} end_update
	} end_action
} end_actions

sub_trees {#comment# subtrees go here. #end_comment#} end_sub_trees

tree {
	#comment# the tree is defined here#end_comment#
	composite {
		execution_sequence
		sequence
		children {
			insert { UPDATE_DATA } end_insert
		} end_children
	} end_composite
} end_tree


#comment# this section is optional. you may remove it #end_comment#
tick_prerequisite { #comment# if the condition is True, the tree ticks.
If it is false, everything is done #end_comment# } end_tick_prerequisite


specifications { #comment# INVAR, LTL, and CTL specs go here #end_comment# } end_specifications