variables {
	variable { on_a_mission VAR BOOLEAN } end_variable 
	#comment# We will use this variable to store if we are on a mission, which we will store as a Boolean #end_comment#
} end_variables
local_variables {} end_local_variables #comment# no local variables for this example #end_comment#
environment {
	environment_variables {
		environment_variable { cookies_requested VAR BOOLEAN } end_environment_variable
		environment_variable { num_cookies VAR [0, 3] } end_environment_variable
		#comment# we will use this to track the number of cookies #end_comment#
	} end_environment_variables
	initial_values {
		#comment# we don't set an initial value for cookies_requested. #end_comment#
		#comment# we don't set an initial value for num_cookies. this represents the possibility of there already being cookies in the house. #end_comment#
	} end_initial_values
	update_values {
		environment_statement {
			env cookies_requested
			case { env cookies_requested} end_case result { True } end_result
			result {True, False} end_result
		} end_environment_statement
		#comment# cookies can be requsted at any point, but once requested, can't be unrequsted #end_comment#
		#comment# we assume that cookies don't appear or disappear in general, so we need to clarify that #end_comment#
	} end_update_values
} end_environment

#comment#
at this point, all of our variables have been declared.
#end_comment#

checks {
	check {
		#comment# this will just check if we're on a mission #end_comment#
		on_mission
		read_variables { on_a_mission } end_read_variables
		condition { on_a_mission } end_condition
	} end_check
} end_checks
environment_checks {
	check_environment {
		#comment# this will just check if a mission was requested #end_comment#
		mission_called
		imports { 'cookie_robot_interface' } end_imports
		python_function { 'cookie_robot_interace.cookies_requested()' } end_python_function
		condition { env cookies_requested } end_condition
	} end_check_environment
	check_environment {
		#comment# checks if cookies already exist #end_comment#
		cookies_present
		imports { 'cookie_robot_interface' } end_imports
		python_function { 'cookie_robot_interace.cookies_present()' } end_python_function
		condition { (greater_than, env num_cookies, 0) } end_condition
	} end_check_environment
} end_environment_checks
actions {
	action {
		#comment# this will set the mission variable to true #end_comment#
		set_mission
		read_variables {} end_read_variables
		write_variables { on_a_mission } end_write_variables
		initial_values {
			#comment# here we initialize on_a_mission to False #end_comment#
			variable_statement {
				on_a_mission
				result { False } end_result
			} end_variable_statement
		} end_initial_values
		update {
			#comment# if we run this action, we set on_a_mission to True #end_comment#
			variable_statement {
				on_a_mission
				result { True } end_result
			} end_variable_statement
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action
	action {
		#comment# this will bake cookies #end_comment#
		bake_cookies
		imports { 'cookie_robot_interface' } end_imports
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		#comment# note that since we are only changing environemnt variables via a write statement,
		we don't need to mark anything for write or read #end_comment#
		initial_values {} end_initial_values
		update {
			write_environment {
				#comment# when we bake, we can end up with 0 cookies (meaning baking isn't finished), or any number of positive cookies #end_comment#
				python_function { 'cookie_robot_interface.bake()' } end_python_function
				update_values {
					environment_statement {
						env num_cookies
						result { 0, 1, 2, 3 } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement { result { running } end_result } end_return_statement
		} end_update
	} end_action
	action {
		#comment# now we serve cookies #end_comment#
		serve_cookies
		imports { 'cookie_robot_interface' } end_imports
		read_variables {} end_read_variables
		write_variables {} end_write_variables
		initial_values {} end_initial_values
		update {
			write_environment {
				python_function { 'cookie_robot_interface.serve()' } end_python_function
				update_values {
					environment_statement {
						env num_cookies
						result { (max, 0, (subtraction, env num_cookies, 1)), (max, 0, (subtraction, env num_cookies, 2)), (max, 0, (subtraction, env num_cookies, 3)) } end_result
					} end_environment_statement
					environment_statement {
						env cookies_requested
						result { False } end_result
					} end_environment_statement
				} end_update_values
			} end_write_environment
			return_statement { result { success } end_result } end_return_statement
		} end_update
	} end_action
} end_actions
root_node
composite {
	cookie_control
	sequence
	#comment# Cookie Control is our root node.
	It is a sequence, so it goes to the next child only if the current child returns success.
	The False means no memory #end_comment#
	children {
		#comment#
		We will first Confirm we have a mission
		then we will confirm we have cookies
		then we will serve cookies.
		#end_comment#
		composite {
			confirm_mission
			selector
			children {
				#comment#
				First, check if we are alredy on a cookie mission.
				If we aren't, see if someone has asked for cookies.
				#end_comment#
				on_mission
				composite {
					check_new_mission
					sequence
					children {
						mission_called
						set_mission #comment# mark the new mission. #end_comment#
					} end_children
				} end_composite
			} end_children
		} end_composite
		#comment# if we've reached this point, we have confirmed someone asked for cookies #end_comment#
		composite {
			confirm_cookies
			selector
			#comment# before we can serve cookies, we need to have cookies.
			Check if we have cookies, if we do, done.
			If not, bake cookies.#end_comment#
			children {
				cookies_present
				bake_cookies
			} end_children
		} end_composite
		#comment# if we got to this point, then we have confirmed cookies exist. so we can serve cookies #end_comment#
		serve_cookies
	} end_children
} end_composite
tick_prerequisite {True} end_tick_prerequisite #comment# since in this case, our prerequisite is just True, we could have omitted this#end_comment#
specifications {
	INVARSPEC { (implies, (greater_than,  env num_cookies 0, 0), (not, (active, bake_cookies)))} end_INVARSPEC #comment# this one is true. it specifies that if the number of cookies is positive, then we are not baking. #end_comment#
	CTLSPEC { (always_globally, (implies, env cookies_requested 0, (always_finally, (active, serve_cookies)))) } end_CTLSPEC #comment# this one is false. this implies that if cookies are requested, eventually cookies will be served. this is false, because baking can continue forever. #end_comment#
} end_specifications