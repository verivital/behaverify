#{
    
    Hello! This is the Light Controller Example. The premise is there is a tunnel with an East entrance and a West entrance. The tunnel is only wide enough for one car, but cars need to be able to in on both sides. Therefore, a Light Signal is used to tell cars when it is safe to enter.
    
    Some notes:
    Indentation is optional, but suggested (for clarity).
    After any closing bracket , you can type end_X where X is how the bracket was opened. This is optional, but can help improve readability in some cases.
    Spacing is suggested, but frequently optional. thus result{0} and result { 0 } are both acceptable. Spacing between words is required.
    New lines are always optional, but suggested.
    
    Code:
    At various points, you will need to specify values. In these cases, we utilize code statements, which generally look as follows
    CONSTANT | VARIABLE | (func, val1, val2, ... valk)
    each val can be another code statement, so nesting is possible. You may always include more parantheses.
    
    Finally, each section with no indentation is required (except tick prequisite), but can be left empty.
    
    E.G., your file must have constants {} as the first section, but leaving it empty is fine.
    
}#

configuration{}
enumerations { 'empty', 'east_to_west', 'west_to_east', 'off'}

constants {
    #{ constants are used to synchronize values in a .tree file. }#
    
    'max_counter' := 4
    
    #{ if you have more than one constant, we suggest putting them on separate lines.
	'example1' := 1,
	example2 := 2
    }#
    #{ however, the following is also acceptable
	'example1' := 1, 'example2' := 2
    }#
} end_constants

variables {
    #{ Variables have several options
	variable {
	    bl | env | local
	    my_var_name
	    VAR | FROZENVAR | DEFINE
	    [min_val, max_val] | {int1, int2, ... intK} | {'enum1', 'enum2', ... 'enumK'} | BOOLEAN
	    assign {
		case {some_condition} result{some_result}
		case {some_other_condition} result{some_other_result}
		result { default_result}
	    }
	}
	bl :: means the variable is a blackboard variable. It represents shared memory all nodes can access.
	env :: means the variable is an environment variable. Nodes can sometimes access environment variables. Environment variables can be updated in between ticks.
	local :: means the variable is specific to each instance of a node that uses it.
	VAR :: variable has state, can change between ticks.
	FROZENVAR :: variable has state, cannot change between ticks.
	DEFINE :: variable is a macro that is replaced with the condition it represents
	The assign will determine the initial value. You must have a default result. case-result pairs are optional
    }#
    
    #{ variables are initialized in order. If var B depends on var A, then A must be declared first }#
    variable {
	bl fairness_counter VAR [0, 'max_counter'] #{ max_counter is a constant equal to 4 }#
	assign {
	    result {0}
	}
    }
    variable {
	bl direction VAR {'east_to_west', 'west_to_east'}
	assign {
	    result {'west_to_east'}
	}
    }
    variable {
	bl signal VAR BOOLEAN
	assign {
	    result {False}
	}
    }
    variable {
	env tunnel_state VAR {'empty', 'east_to_west', 'west_to_east'}
	assign {
	    result {'empty'}
	}
    }
    variable {
	env east_cars VAR BOOLEAN
	assign {
	    result {True, False}
	}
    }
    variable {
	env west_cars VAR BOOLEAN
	assign {
	    result {True, False}
	}
    }
    variable {
	env west_and_east_cars DEFINE BOOLEAN
	assign {
	    result {(and, west_cars, east_cars)}
	}
    }
    variable {
	env light VAR {'west_to_east', 'east_to_west', 'off'}
	assign {
	    result {'off'}
	}
    }
} end_variables

#{
    In general, if we want to update a variable, we use a variable statement, which looks as follows:
    
    variable_statement {
	var_name
	assign {
	    case {some_condition} result {some_result}
	    case {some_condition} result {some_other_result, some_other_result2}
	    result {default_result1, default_result2, default_result3}
	}
    }
    
    You must have a default result, but the case-result pairs are optional. If you specify multiple results, you comma seperate them, and this indicates nondeterminism.
}#


environment_update {
    #{ environment updates are used to update environment variables in between ticks. The updates will take place in the order they are presented }#
    variable_statement {
	tunnel_state
	assign {
	    case {(equal, light, 'off')}
	    result {tunnel_state, 'empty'}
	    result {light, 'empty'}
	}
    }
    variable_statement {
	west_cars
	assign {
	    case {(equal, light, 'west_to_east')}
	    result {True, False}
	    result {True, west_cars}
	}
    }
    variable_statement {
	east_cars
	assign {
	    case {(equal, light, 'east_to_west')}
	    result {True, False}
	    result {True, east_cars}
	}
    }
} end_environment_update


#{ We are now done with the variable section. Welcome to the node section }#

checks {
    #{ checks are used to check values of blackboard variables }#
    check {
	check_fairness #{ the name of the check }#
	arguments {}
	read_variables {fairness_counter} #{ what variables are read by this node (used for python generation). if multiple, space seperate them (no comma) }#
	condition { (less_than, fairness_counter, 'max_counter')} #{ a condition }#
    }
} end_checks

environment_checks {
    #{ environment checks are used to check values of blackboard variables or environment variables }#
    environment_check {
	check_tunnel_in_use
	arguments {}
	read_variables {}
	condition {(not_equal, tunnel_state, 'empty')}
    }
    environment_check {
	check_west_and_east_cars
	arguments {}
	read_variables {} #{ this still only specifies BLACKBOARD variables. }#
	condition {west_and_east_cars}
    }
    environment_check {
	check_west_cars
	arguments {}
	read_variables {}
	condition {west_cars}
    }
    environment_check {
	check_east_cars
	arguments {}
	read_variables {}
	condition {east_cars}
    }
} end_environment_checks

actions {
    #{ action nodes actually do stuff }#
    action {
	prepare_round #{name of the node}#
	arguments {} #{no arguments}#
	local_variables {} #{no local variables}#
	read_variables {} #{no read variables}#
	write_variables {signal} #{we write to direction}#
	initial_values {} #{no local variables to initialize}#
	update {#{Everything we update}#
	    variable_statement {#{updating a variable}#
		signal #{variable being updated}#
		assign {result {True}}#{we're setting it to off}#
	    }
	    return_statement {
		result {running}#{node always returns running}#
	    }
	}
    }
    action {
	turn_light_off #{name of the node}#
	arguments {} #{no arguments}#
	local_variables {} #{no local variables}#
	read_variables {} #{no read variables}#
	write_variables {signal} #{we write to direction}#
	initial_values {} #{no local variables to initialize}#
	update {#{Everything we update}#
	    variable_statement {#{updating a variable}#
		signal #{variable being updated}#
		assign {result {False}}#{we're setting it to off}#
	    }
	    return_statement {
		result {running}#{node always returns running}#
	    }
	}
    }
    action {
	swap_direction #{name of the node}#
	arguments {} #{no arguments}#
	local_variables {} #{the local variables the node uses}#
	read_variables {} #{the blackboard variables that are read by this node}#
	write_variables {direction, fairness_counter} #{the blackboard variables that are written to}#
	initial_values {} #{initial values for local variables}#
	update {
	    #{
		the update segments consists of variable statements and a return statement. The return statement doesn't need to be last.
		You must have a return statement, but that is the only requirement.
		If you are reading/writing environment variables, you need special syntax, which you will see later.
		Variable updates occur in order.
	    }#
	    variable_statement {
		direction
		assign {
		    case {(equal, direction, 'west_to_east')}
		    result {'east_to_west'}
		    result {'west_to_east'}
		}
	    }
	    variable_statement {
		fairness_counter
		assign {
		    result {0}
		}
	    }
	    return_statement {
		#{ we could have cases in here too. but, the results MUST be deterministic }#
		result { success}
	    }
	}
    }
    action {
	set_direction
	arguments {'new_direction' := ENUM}
	local_variables {}
	read_variables {}
	write_variables {direction, fairness_counter}
	initial_values {}
	update {
	    variable_statement {
		direction
		assign {result {'new_direction'}}
	    }
	    variable_statement {
		fairness_counter
		assign {result {0}}
	    }
	    return_statement {
		result {success}
	    }
	}
    }
    action {
	send_light_signal
	arguments {}
	local_variables {}
	read_variables {direction, signal}
	write_variables {fairness_counter}
	initial_values {}
	update {
	    variable_statement {
		fairness_counter
		assign {
		    result {(min, 'max_counter', (addition, fairness_counter, 1))}
		}
	    }
	    write_environment {
		light_signal_func #{ the name of this update }#
		#{ each of these variable statements must update an environment variable.
		    These updates take place in order, but occur at the end of the tick (before updates between ticks occur).
		    This represents the fact that doing stuff in the environment takes time, while the tree should be isntant.
		    If an update SHOULD be instant, it can be marked as such
		}#
		variable_statement {
		    #{instant}#
		    #{ if we uncommented the above, this would take place instantly }#
		    light
		    assign {
			case {signal}
			result {direction}
			result {'off'}
		    }
		}
	    }
	    return_statement {
		result {success}
	    }
	}
    }
} end_actions

#{ We are now done specifying nodes. We will now specify the tree. }#

sub_trees {
    #{ subtrees are smaller trees which can be inserted. This helps with readability and reusability}#
    sub_tree {
	TUNNEL_OCCUPIED #{ the name of the subtree}#
	composite {
	    tunnel_in_use#{ the name of the composite node }#
	    sequence #{ the type of the composite node }#
	    children {
		check_tunnel_in_use {} #{ no arguments }#
		turn_light_off {}
	    }
	}
    }	    
    sub_tree {
	WEST_AND_EAST #{ the name of the subtree}#
	composite {
	    try_west_and_east#{ the name of the composite node }#
	    sequence #{ the type of the composite node }#
	    children {
		check_west_and_east_cars {} #{ the first child is a check node we defined earlier }#
		#{ the second child is a composite node }#
		composite {
		    choose_fairly
		    selector
		    children {
			check_fairness {} #{ a check node we defined earlier }#
			swap_direction {} #{ an action node we defined earlier }#
		    }
		}
	    }
	}
    }
    sub_tree {
	WEST_ONLY
	composite {
	    try_west
	    sequence
	    children {
		check_west_cars {}
		set_direction {'west_to_east'}
	    }
	}
    }
    sub_tree {
	EAST_ONLY
	composite {
	    try_east
	    sequence
	    children {
		check_east_cars {}
		set_direction {'east_to_west'}
	    }
	}
    }
    sub_tree {
	DIRECTION_SUBTREE
	composite {
	    select_direction
	    selector
	    children {
		insert {TUNNEL_OCCUPIED}
		insert {WEST_AND_EAST}
		insert {WEST_ONLY}
		insert {EAST_ONLY}
	    }
	}
    }
} end_sub_trees

tree {
    #{ this is our actual tree, and the actual root }#
    composite {
	light_controller
	parallel policy success_on_one
	children {
	    prepare_round {}
	    insert {DIRECTION_SUBTREE} #{ here we are inserting a subtree of the name DIRECTION_SUBTREE }#
	    send_light_signal {}
	}
    }
} end_tree

tick_prerequisite {True} end_tick_prerequisite


specifications {
    #{ Specifications are used to write specifications for our model }#
    INVARSPEC {(or, (equal, light -1, 'off'), (equal, tunnel_state -1, 'empty'), (equal, tunnel_state -1, light -1))}
    
    #{ The below attempt to ensure that each car eventually gets to use the tunnel.
	They do this by stating that it is always the case that if there is a car waiting,
	then the light will eventually let that car through.}#
    #{ These will fail, because cars are not guaranteed to ever leave the tunnel.}#
    CTLSPEC {(always_globally, (implies, west_cars -1, (always_finally, (equal, light -1, 'west_to_east'))))}
    CTLSPEC {(always_globally, (implies, east_cars -1, (always_finally, (equal, light -1, 'east_to_west'))))}
    LTLSPEC {(globally, (implies, west_cars -1, (finally, (equal, light -1, 'west_to_east'))))}
    LTLSPEC {(globally, (implies, east_cars -1, (finally, (equal, light -1, 'east_to_west'))))}
    
    #{ So we add a condition to force cars to leave. }#
    CTLSPEC {(implies,
	(always_globally, (always_finally, (equal, tunnel_state -1, 'empty'))),
	(always_globally, (implies, west_cars -1, (always_finally, (equal, light -1, 'west_to_east'))))
	)}
    CTLSPEC {(implies,
	(always_globally, (always_finally, (equal, tunnel_state -1, 'empty'))),
	(always_globally, (implies, east_cars -1, (always_finally, (equal, light -1, 'east_to_west'))))
	)}
    LTLSPEC {(implies,
	(globally, (finally, (equal, tunnel_state -1, 'empty'))),
	(globally, (implies, west_cars -1, (finally, (equal, light -1, 'west_to_east'))))
	)}
    LTLSPEC {(implies,
	(globally, (finally, (equal, tunnel_state -1, 'empty'))),
	(globally, (implies, east_cars -1, (finally, (equal, light -1, 'east_to_west'))))
	)}
} end_specifications