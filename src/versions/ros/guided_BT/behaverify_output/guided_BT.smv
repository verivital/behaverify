MODULE main
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		resume_from_here_in_subtree__theRoot := -3;
		child_index_to_resume_from__theRoot := -2;
		theRoot.active := TRUE;
		--START OF BLACKBOARD DEFINITIONS
		var_varA_stage_2 := 
			case
				!(inputNode.active) : var_varA_stage_1;
				!(inputNode_update_success) : var_varA_stage_1;
				(var_varA_stage_1 = unknown) : off;
				TRUE : var_varA_stage_1;
			esac;
		var_varB_stage_1 := 
			case
				!(taskNode.active) : var_varB;
				TRUE : (var_varA_stage_2 = on);
			esac;
		--END OF BLACKBOARD DEFINITIONS
	VAR
		node_names : define_nodes;
		inputNode : inputNode_module(inputNode_update_success);
		is_varB : is_varB_module(var_varB);
		someName : composite_selector_without_memory_2(is_varB, taskNode);
		taskNode : success_DEFAULT_module();
		theRoot : composite_sequence_with_memory_2(inputNode, someName, child_index_to_resume_from__theRoot);
		--START OF BLACKBOARD VARIABLES DECLARATION
		inputNode_update_success : boolean;
		var_varA : {on, off, unknown};
		var_varA_stage_1 : {on, off, unknown};
		var_varA_stage_3 : {on, off, unknown};
		var_varB : boolean;
		--END OF BLACKBOARD VARIABLES DECLARATION
	ASSIGN
		--START OF BLACKBOARD VARIABLES INITIALIZATION
		init(var_varA) := 
			case
				TRUE : off;
			esac;
		init(var_varB) := 
			case
				TRUE : FALSE;
			esac;
		--END OF BLACKBOARD VARIABLES INITIALIZATION
		--START OF BLACKBOARD VARIABLES TRANSITION
		next(inputNode_update_success) := 
			case
				next(!(theRoot.active)) : inputNode_update_success;
				TRUE : {TRUE, FALSE};
			esac;
		next(var_varA) := var_varA_stage_3;
		var_varA_stage_1 := 
			case
				!(inputNode.active) : var_varA;
				inputNode_update_success : {on, off, unknown};
				TRUE : var_varA;
			esac;
		var_varA_stage_3 := 
			case
				!(taskNode.active) : var_varA_stage_2;
				var_varB_stage_1 : var_varA_stage_2;
				TRUE : {off, unknown};
			esac;
		next(var_varB) := var_varB_stage_1;
		--END OF BLACKBOARD VARIABLES TRANSITION

INVARSPEC !((var_varA = unknown));
INVARSPEC !((var_varA_stage_2 = unknown));
INVARSPEC (var_varB_stage_1 | !(var_varB_stage_1));
CTLSPEC EF(var_varB);
CTLSPEC AF(var_varB);
LTLSPEC G((!(var_varB) | !((taskNode.active))));
LTLSPEC G((!(var_varB) | ((taskNode.active))));
MODULE define_nodes
	DEFINE
		theRoot := 0;
		inputNode := 1;
		someName := 2;
		is_varB := 3;
		taskNode := 4;
MODULE leaf_module(internal_status_module)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status_module.internal_status : invalid;
MODULE composite_selector_without_memory_2(child_0, child_1)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				!(child_0.internal_status = failure) : child_0.internal_status;
				!(child_1.internal_status = failure) : child_1.internal_status;
				TRUE : failure;
			esac;
		child_0.active := active;
		child_1.active := child_0.status = failure;
MODULE composite_sequence_with_memory_2(child_0, child_1, resume_point)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status :=
			case
				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
				TRUE : success;
			esac;
		child_0.active := active & (0 >= resume_point);
		child_1.active := active & ((1 >= resume_point) & ((1 = resume_point) | (child_0.status = success)));
MODULE inputNode_module(inputNode_update_success)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := inputNode_update_success ? success : running;
MODULE is_varB_module(var_varB)
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := (var_varB = TRUE) ? success : failure;
MODULE success_DEFAULT_module
	CONSTANTS
		success, failure, running, invalid;
	DEFINE
		status := active ? internal_status : invalid;
		internal_status := success;
