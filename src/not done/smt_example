; Basic Boolean example
(set-option :print-success false)
(set-logic QF_UF)

;if both S and F are true, then Running. If both false, then invalid
(declare-const child1S Bool)
(declare-const child1F Bool)
(declare-const child2S Bool)
(declare-const child2F Bool)
;(declare-const root status) since root is a selector node, atm, this is actually equal to child1 = Success or child2 = Success else Failure, basically.
;(assert (not (= root invalid))) we don't actually use root, so root will be macro replaced elsewhere
;(assert (= (child1 = invalid) (child1.parent = invalid))) ;this includes.parent, so we replace it with the below
;(assert (= (child1 = invalid) (root = invalid))) ;this includes root, so we replace it with below
(assert (= (= false child1S child1F) false))
(assert (= (not (= child2S child2F false)) (= child1F (not child1S) true)));no replacements, lol. child2 runs only if child1 returns failure.


(assert (and (= child1S true) (= child2S true)))
(check-sat) ; returns 'unsat'
(exit)

;ok, so the plan is we build this out by writing it normally, and then doing mass replacements.





