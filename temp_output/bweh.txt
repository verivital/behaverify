98,102d97
< 		resume_point_39 := 
< 			case
< 				(resume_from_node_27 in {41}) : 1;
< 				TRUE : -2;
< 			esac;
109c104
< 		resume_point_92 := 
---
> 		resume_point_98 := 
111c106
< 				(resume_from_node_27 in {100, 94}) : 1;
---
> 				(resume_from_node_27 in {100}) : 1;
114c109
< 		resume_point_98 := 
---
> 		resume_point_39 := 
116c111,116
< 				(resume_from_node_27 in {100}) : 1;
---
> 				(resume_from_node_27 in {41}) : 1;
> 				TRUE : -2;
> 			esac;
> 		resume_point_92 := 
> 			case
> 				(resume_from_node_27 in {100, 94}) : 1;
119a120,124
> 		parallel_skip_0 := [resume_from_node_1, resume_from_node_19, resume_from_node_25, resume_from_node_26, resume_from_node_27];
> 		parallel_skip_1 := [resume_from_node_2, resume_from_node_3, resume_from_node_4, resume_from_node_5, resume_from_node_6, resume_from_node_7, resume_from_node_8, resume_from_node_9, resume_from_node_10, resume_from_node_11, resume_from_node_12, resume_from_node_13, resume_from_node_14, resume_from_node_15, resume_from_node_16, resume_from_node_17, resume_from_node_18];
> 		parallel_skip_53 := [resume_from_node_54, resume_from_node_55];
> 		parallel_skip_59 := [resume_from_node_60, resume_from_node_61];
> 		parallel_skip_68 := [resume_from_node_69, resume_from_node_70, resume_from_node_80];
125,244c130,169
< 		BlueROV : composite_parallel_unsynchronized_success_on_all_5(topics2bb, dd_tasks, mission_server, obstacle_avoidance, priorities);
< 		topics2bb : composite_parallel_unsynchronized_success_on_all_17(battery2bb, rth2bb, geofence2bb, lec2_am_r_2bb, lec2_am_l_2bb, pipe_lost2bb, sensor_failure2bb, waypoints_completed2bb, mission2bb, ddlec2bb, fls2bb, fls_warning2bb, hsd_pipe2bb, hsd_wp2bb, hsd_rth2bb, hsd_surface2bb, rtreach2bb);
< 		battery2bb : leaf_set_blackboard_variables(battery2bb_STATUS);
< 		rth2bb : leaf_set_blackboard_variables(rth2bb_STATUS);
< 		geofence2bb : leaf_set_blackboard_variables(geofence2bb_STATUS);
< 		lec2_am_r_2bb : leaf_set_blackboard_variables(lec2_am_r_2bb_STATUS);
< 		lec2_am_l_2bb : leaf_set_blackboard_variables(lec2_am_l_2bb_STATUS);
< 		pipe_lost2bb : leaf_set_blackboard_variables(pipe_lost2bb_STATUS);
< 		sensor_failure2bb : leaf_set_blackboard_variables(sensor_failure2bb_STATUS);
< 		waypoints_completed2bb : leaf_set_blackboard_variables(waypoints_completed2bb_STATUS);
< 		mission2bb : leaf_set_blackboard_variables(mission2bb_STATUS);
< 		ddlec2bb : leaf_set_blackboard_variables(ddlec2bb_STATUS);
< 		fls2bb : leaf_set_blackboard_variables(fls2bb_STATUS);
< 		fls_warning2bb : leaf_set_blackboard_variables(fls_warning2bb_STATUS);
< 		hsd_pipe2bb : leaf_set_blackboard_variables(hsd_pipe2bb_STATUS);
< 		hsd_wp2bb : leaf_set_blackboard_variables(hsd_wp2bb_STATUS);
< 		hsd_rth2bb : leaf_set_blackboard_variables(hsd_rth2bb_STATUS);
< 		hsd_surface2bb : leaf_set_blackboard_variables(hsd_surface2bb_STATUS);
< 		rtreach2bb : leaf_set_blackboard_variables(rtreach2bb_STATUS);
< 		dd_tasks : composite_selector_without_memory_2(reallocate_check_SIF, dd_lec_task);
< 		reallocate_check_SIF : decorator_X_is_Y(reallocate_check, success, failure);
< 		reallocate_check : composite_selector_without_memory_2(is_reallocation_requested, reallocate_task);
< 		is_reallocation_requested : leaf_check_blackboard_variable_value(is_reallocation_requested_CHECK_dd_xy_axis_degradation);
< 		reallocate_task : leaf_set_blackboard_variables(reallocate_task_STATUS);
< 		dd_lec_task : leaf_set_blackboard_variables(dd_lec_task_STATUS);
< 		mission_server : leaf_set_blackboard_variables(mission_server_STATUS);
< 		obstacle_avoidance : leaf_set_blackboard_variables(obstacle_avoidance_STATUS);
< 		priorities : composite_selector_without_memory_11(battery_check_SIF, sensor_failure_selector_SIF, emergency_stop_check_SIF, home_reached_selector_SIF, obstacle_standoff_check_SIF, rth_selector_SIF, geofence_selector_SIF, pipe_lost_selector_SIF, track_pipe_mission, waypoint_mission, loiter_task);
< 		battery_check_SIF : decorator_X_is_Y(battery_check, success, failure);
< 		battery_check : composite_selector_without_memory_2(battery_low_fs, surface_task);
< 		battery_low_fs : leaf_check_blackboard_variable_value(battery_low_fs_CHECK_battery_low_warning);
< 		surface_task : leaf_set_blackboard_variables(surface_task_STATUS);
< 		sensor_failure_selector_SIF : decorator_X_is_Y(sensor_failure_selector, success, failure);
< 		sensor_failure_selector : composite_selector_without_memory_2(check_sensor_failure, surface_task1);
< 		check_sensor_failure : leaf_check_blackboard_variable_value(check_sensor_failure_CHECK_bb_sensor_failure_warning);
< 		surface_task1 : leaf_set_blackboard_variables(surface_task1_STATUS);
< 		emergency_stop_check_SIF : decorator_X_is_Y(emergency_stop_check, success, failure);
< 		emergency_stop_check : composite_selector_without_memory_2(emergency_stop_fs, emergency_stop_tasks);
< 		emergency_stop_fs : leaf_check_blackboard_variable_value(emergency_stop_fs_CHECK_emergency_stop_warning);
< 		emergency_stop_tasks : composite_sequence_with_memory_2(emergency_stop_task, surface_task2, resume_point_39);
< 		emergency_stop_task : leaf_set_blackboard_variables(emergency_stop_task_STATUS);
< 		surface_task2 : leaf_set_blackboard_variables(surface_task2_STATUS);
< 		home_reached_selector_SIF : decorator_X_is_Y(home_reached_selector, success, failure);
< 		home_reached_selector : composite_selector_without_memory_2(check_surface, surface_task3);
< 		check_surface : leaf_check_blackboard_variable_value(check_surface_CHECK_bb_home_reached);
< 		surface_task3 : leaf_set_blackboard_variables(surface_task3_STATUS);
< 		obstacle_standoff_check_SIF : decorator_X_is_Y(obstacle_standoff_check, success, failure);
< 		obstacle_standoff_check : composite_selector_without_memory_2(obstacle_standoff_fs, surface_task4);
< 		obstacle_standoff_fs : leaf_check_blackboard_variable_value(obstacle_standoff_fs_CHECK_obstacle_standoff_warning);
< 		surface_task4 : leaf_set_blackboard_variables(surface_task4_STATUS);
< 		rth_selector_SIF : decorator_X_is_Y(rth_selector, success, failure);
< 		rth_selector : composite_selector_without_memory_2(check_rth, rth_par);
< 		check_rth : leaf_check_blackboard_variable_value(check_rth_CHECK_bb_rth_warning);
< 		rth_par : composite_parallel_unsynchronized_success_on_all_2(rth_task, home2bb);
< 		rth_task : leaf_set_blackboard_variables(rth_task_STATUS);
< 		home2bb : leaf_set_blackboard_variables(home2bb_STATUS);
< 		geofence_selector_SIF : decorator_X_is_Y(geofence_selector, success, failure);
< 		geofence_selector : composite_selector_without_memory_2(check_geofence, rth_par1);
< 		check_geofence : leaf_check_blackboard_variable_value(check_geofence_CHECK_bb_geofence_warning);
< 		rth_par1 : composite_parallel_unsynchronized_success_on_all_2(rth_task1, home2bb1);
< 		rth_task1 : leaf_set_blackboard_variables(rth_task1_STATUS);
< 		home2bb1 : leaf_set_blackboard_variables(home2bb1_STATUS);
< 		pipe_lost_selector_SIF : decorator_X_is_Y(pipe_lost_selector, success, failure);
< 		pipe_lost_selector : composite_selector_without_memory_2(check_pipe_post, loiter_task1);
< 		check_pipe_post : leaf_check_blackboard_variable_value(check_pipe_post_CHECK_bb_pipe_lost_warning);
< 		loiter_task1 : leaf_set_blackboard_variables(loiter_task1_STATUS);
< 		track_pipe_mission : composite_sequence_with_memory_3(is_track_pipe_mission_requested, tracking, track_pipe_mission_end, resume_point_66);
< 		is_track_pipe_mission_requested : leaf_check_blackboard_variable_value(is_track_pipe_mission_requested_CHECK_bb_mission_dot_data);
< 		tracking : composite_parallel_unsynchronized_success_on_all_3(tracking_task, lec2am_speed_cmd, lec2am_mapping_cmd);
< 		tracking_task : leaf_set_blackboard_variables(tracking_task_STATUS);
< 		lec2am_speed_cmd : composite_selector_without_memory_3(lec2am_l_speed_check_SIF, lec2am_r_speed_check_SIF, speed_max_task);
< 		lec2am_l_speed_check_SIF : decorator_X_is_Y(lec2am_l_speed_check, success, failure);
< 		lec2am_l_speed_check : composite_selector_without_memory_2(check_lec2am_ls, speed_min_task);
< 		check_lec2am_ls : leaf_check_blackboard_variable_value(check_lec2am_ls_CHECK_lec2_am_l_speed_warning);
< 		speed_min_task : leaf_set_blackboard_variables(speed_min_task_STATUS);
< 		lec2am_r_speed_check_SIF : decorator_X_is_Y(lec2am_r_speed_check, success, failure);
< 		lec2am_r_speed_check : composite_selector_without_memory_2(check_lec2am_rs, speed_min_task1);
< 		check_lec2am_rs : leaf_check_blackboard_variable_value(check_lec2am_rs_CHECK_lec2_am_r_speed_warning);
< 		speed_min_task1 : leaf_set_blackboard_variables(speed_min_task1_STATUS);
< 		speed_max_task : leaf_set_blackboard_variables(speed_max_task_STATUS);
< 		lec2am_mapping_cmd : composite_selector_without_memory_3(lec2am_l_mapping_check_SIF, lec2am_r_mapping_check_SIF, pipe_mapping_enable_task);
< 		lec2am_l_mapping_check_SIF : decorator_X_is_Y(lec2am_l_mapping_check, success, failure);
< 		lec2am_l_mapping_check : composite_selector_without_memory_2(check_lec2am_lp, pipe_mapping_disable_task);
< 		check_lec2am_lp : leaf_check_blackboard_variable_value(check_lec2am_lp_CHECK_lec2_am_l_pipe_warning);
< 		pipe_mapping_disable_task : leaf_set_blackboard_variables(pipe_mapping_disable_task_STATUS);
< 		lec2am_r_mapping_check_SIF : decorator_X_is_Y(lec2am_r_mapping_check, success, failure);
< 		lec2am_r_mapping_check : composite_selector_without_memory_2(check_lec2am_rp, pipe_mapping_disable_task1);
< 		check_lec2am_rp : leaf_check_blackboard_variable_value(check_lec2am_rp_CHECK_lec2_am_r_pipe_warning);
< 		pipe_mapping_disable_task1 : leaf_set_blackboard_variables(pipe_mapping_disable_task1_STATUS);
< 		pipe_mapping_enable_task : leaf_set_blackboard_variables(pipe_mapping_enable_task_STATUS);
< 		track_pipe_mission_end : composite_sequence_with_memory_1(evaluate, -2);
< 		evaluate : leaf_timer();
< 		waypoint_mission : composite_sequence_with_memory_2(is_waypoint_requested, waypoint_selector, resume_point_92);
< 		is_waypoint_requested : leaf_check_blackboard_variable_value(is_waypoint_requested_CHECK_bb_mission_dot_data);
< 		waypoint_selector : composite_selector_without_memory_2(waypoints_sif_SIF, waypoint_task);
< 		waypoints_sif_SIF : decorator_X_is_Y(waypoints_sif, success, failure);
< 		waypoints_sif : composite_selector_without_memory_2(check_waypoints_completed, waypoint_end);
< 		check_waypoints_completed : leaf_check_blackboard_variable_value(check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data);
< 		waypoint_end : composite_sequence_with_memory_2(next_mission, loiter_task2, resume_point_98);
< 		next_mission : leaf_set_blackboard_variables(next_mission_STATUS);
< 		loiter_task2 : leaf_set_blackboard_variables(loiter_task2_STATUS);
< 		waypoint_task : leaf_set_blackboard_variables(waypoint_task_STATUS);
< 		loiter_task : leaf_set_blackboard_variables(loiter_task_STATUS);
< 		battery2bb_STATUS : battery2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		rth2bb_STATUS : rth2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		geofence2bb_STATUS : geofence2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		lec2_am_r_2bb_STATUS : lec2_am_r_2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		lec2_am_l_2bb_STATUS : lec2_am_l_2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		pipe_lost2bb_STATUS : pipe_lost2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		sensor_failure2bb_STATUS : sensor_failure2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		waypoints_completed2bb_STATUS : waypoints_completed2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		mission2bb_STATUS : mission2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		ddlec2bb_STATUS : ddlec2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		fls2bb_STATUS : fls2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		fls_warning2bb_STATUS : fls_warning2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		hsd_pipe2bb_STATUS : hsd_pipe2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		hsd_wp2bb_STATUS : hsd_wp2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		hsd_rth2bb_STATUS : hsd_rth2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		hsd_surface2bb_STATUS : hsd_surface2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		rtreach2bb_STATUS : rtreach2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		BlueROV : node_parallel_success_on_all5(topics2bb, dd_tasks, mission_server, obstacle_avoidance, priorities,  parallel_skip_0);
> 		topics2bb : node_parallel_success_on_all17(battery2bb, rth2bb, geofence2bb, lec2_am_r_2bb, lec2_am_l_2bb, pipe_lost2bb, sensor_failure2bb, waypoints_completed2bb, mission2bb, ddlec2bb, fls2bb, fls_warning2bb, hsd_pipe2bb, hsd_wp2bb, hsd_rth2bb, hsd_surface2bb, rtreach2bb,  parallel_skip_1);
> 		battery2bb : node_set_blackboard_variables(battery2bb_SET_status);
> 		battery2bb_SET_status : battery2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		rth2bb : node_set_blackboard_variables(rth2bb_SET_status);
> 		rth2bb_SET_status : rth2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		geofence2bb : node_set_blackboard_variables(geofence2bb_SET_status);
> 		geofence2bb_SET_status : geofence2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		lec2_am_r_2bb : node_set_blackboard_variables(lec2_am_r_2bb_SET_status);
> 		lec2_am_r_2bb_SET_status : lec2_am_r_2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		lec2_am_l_2bb : node_set_blackboard_variables(lec2_am_l_2bb_SET_status);
> 		lec2_am_l_2bb_SET_status : lec2_am_l_2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		pipe_lost2bb : node_set_blackboard_variables(pipe_lost2bb_SET_status);
> 		pipe_lost2bb_SET_status : pipe_lost2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		sensor_failure2bb : node_set_blackboard_variables(sensor_failure2bb_SET_status);
> 		sensor_failure2bb_SET_status : sensor_failure2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		waypoints_completed2bb : node_set_blackboard_variables(waypoints_completed2bb_SET_status);
> 		waypoints_completed2bb_SET_status : waypoints_completed2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		mission2bb : node_set_blackboard_variables(mission2bb_SET_status);
> 		mission2bb_SET_status : mission2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		ddlec2bb : node_set_blackboard_variables(ddlec2bb_SET_status);
> 		ddlec2bb_SET_status : ddlec2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		fls2bb : node_set_blackboard_variables(fls2bb_SET_status);
> 		fls2bb_SET_status : fls2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		fls_warning2bb : node_set_blackboard_variables(fls_warning2bb_SET_status);
> 		fls_warning2bb_SET_status : fls_warning2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		hsd_pipe2bb : node_set_blackboard_variables(hsd_pipe2bb_SET_status);
> 		hsd_pipe2bb_SET_status : hsd_pipe2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		hsd_wp2bb : node_set_blackboard_variables(hsd_wp2bb_SET_status);
> 		hsd_wp2bb_SET_status : hsd_wp2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		hsd_rth2bb : node_set_blackboard_variables(hsd_rth2bb_SET_status);
> 		hsd_rth2bb_SET_status : hsd_rth2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		hsd_surface2bb : node_set_blackboard_variables(hsd_surface2bb_SET_status);
> 		hsd_surface2bb_SET_status : hsd_surface2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		rtreach2bb : node_set_blackboard_variables(rtreach2bb_SET_status);
> 		rtreach2bb_SET_status : rtreach2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		dd_tasks : node_selector_without_memory2(reallocate_check_SIF, dd_lec_task);
> 		reallocate_check_SIF : decorator_success_is_failure(reallocate_check);
> 		reallocate_check : node_selector_without_memory2(is_reallocation_requested, reallocate_task);
> 		is_reallocation_requested : node_check_blackboard_variable_value(blackboard, 29, is_reallocation_requested_CHECK_dd_xy_axis_degradation);
246,249c171,182
< 		reallocate_task_STATUS : reallocate_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		dd_lec_task_STATUS : dd_lec_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		mission_server_STATUS : mission_server_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		obstacle_avoidance_STATUS : obstacle_avoidance_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		reallocate_task : node_set_blackboard_variables(reallocate_task_SET_status);
> 		reallocate_task_SET_status : reallocate_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		dd_lec_task : node_set_blackboard_variables(dd_lec_task_SET_status);
> 		dd_lec_task_SET_status : dd_lec_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		mission_server : node_set_blackboard_variables(mission_server_SET_status);
> 		mission_server_SET_status : mission_server_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		obstacle_avoidance : node_set_blackboard_variables(obstacle_avoidance_SET_status);
> 		obstacle_avoidance_SET_status : obstacle_avoidance_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		priorities : node_selector_without_memory11(battery_check_SIF, sensor_failure_selector_SIF, emergency_stop_check_SIF, home_reached_selector_SIF, obstacle_standoff_check_SIF, rth_selector_SIF, geofence_selector_SIF, pipe_lost_selector_SIF, track_pipe_mission, waypoint_mission, loiter_task);
> 		battery_check_SIF : decorator_success_is_failure(battery_check);
> 		battery_check : node_selector_without_memory2(battery_low_fs, surface_task);
> 		battery_low_fs : node_check_blackboard_variable_value(blackboard, 1, battery_low_fs_CHECK_battery_low_warning);
251c184,188
< 		surface_task_STATUS : surface_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		surface_task : node_set_blackboard_variables(surface_task_SET_status);
> 		surface_task_SET_status : surface_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		sensor_failure_selector_SIF : decorator_success_is_failure(sensor_failure_selector);
> 		sensor_failure_selector : node_selector_without_memory2(check_sensor_failure, surface_task1);
> 		check_sensor_failure : node_check_blackboard_variable_value(blackboard, 22, check_sensor_failure_CHECK_bb_sensor_failure_warning);
253c190,194
< 		surface_task1_STATUS : surface_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		surface_task1 : node_set_blackboard_variables(surface_task1_SET_status);
> 		surface_task1_SET_status : surface_task1_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		emergency_stop_check_SIF : decorator_success_is_failure(emergency_stop_check);
> 		emergency_stop_check : node_selector_without_memory2(emergency_stop_fs, emergency_stop_tasks);
> 		emergency_stop_fs : node_check_blackboard_variable_value(blackboard, 39, emergency_stop_fs_CHECK_emergency_stop_warning);
255,256c196,203
< 		emergency_stop_task_STATUS : emergency_stop_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		surface_task2_STATUS : surface_task2_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		emergency_stop_tasks : node_sequence_with_memory2(emergency_stop_task, surface_task2, resume_point_39);
> 		emergency_stop_task : node_set_blackboard_variables(emergency_stop_task_SET_status);
> 		emergency_stop_task_SET_status : emergency_stop_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		surface_task2 : node_set_blackboard_variables(surface_task2_SET_status);
> 		surface_task2_SET_status : surface_task2_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		home_reached_selector_SIF : decorator_success_is_failure(home_reached_selector);
> 		home_reached_selector : node_selector_without_memory2(check_surface, surface_task3);
> 		check_surface : node_check_blackboard_variable_value(blackboard, 58, check_surface_CHECK_bb_home_reached);
258c205,209
< 		surface_task3_STATUS : surface_task3_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		surface_task3 : node_set_blackboard_variables(surface_task3_SET_status);
> 		surface_task3_SET_status : surface_task3_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		obstacle_standoff_check_SIF : decorator_success_is_failure(obstacle_standoff_check);
> 		obstacle_standoff_check : node_selector_without_memory2(obstacle_standoff_fs, surface_task4);
> 		obstacle_standoff_fs : node_check_blackboard_variable_value(blackboard, 33, obstacle_standoff_fs_CHECK_obstacle_standoff_warning);
260c211,215
< 		surface_task4_STATUS : surface_task4_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		surface_task4 : node_set_blackboard_variables(surface_task4_SET_status);
> 		surface_task4_SET_status : surface_task4_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		rth_selector_SIF : decorator_success_is_failure(rth_selector);
> 		rth_selector : node_selector_without_memory2(check_rth, rth_par);
> 		check_rth : node_check_blackboard_variable_value(blackboard, 4, check_rth_CHECK_bb_rth_warning);
262,263c217,224
< 		rth_task_STATUS : rth_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		home2bb_STATUS : home2bb_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		rth_par : node_parallel_success_on_all2(rth_task, home2bb,  parallel_skip_53);
> 		rth_task : node_set_blackboard_variables(rth_task_SET_status);
> 		rth_task_SET_status : rth_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		home2bb : node_set_blackboard_variables(home2bb_SET_status);
> 		home2bb_SET_status : home2bb_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		geofence_selector_SIF : decorator_success_is_failure(geofence_selector);
> 		geofence_selector : node_selector_without_memory2(check_geofence, rth_par1);
> 		check_geofence : node_check_blackboard_variable_value(blackboard, 7, check_geofence_CHECK_bb_geofence_warning);
265,266c226,233
< 		rth_task1_STATUS : rth_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		home2bb1_STATUS : home2bb1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		rth_par1 : node_parallel_success_on_all2(rth_task1, home2bb1,  parallel_skip_59);
> 		rth_task1 : node_set_blackboard_variables(rth_task1_SET_status);
> 		rth_task1_SET_status : rth_task1_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		home2bb1 : node_set_blackboard_variables(home2bb1_SET_status);
> 		home2bb1_SET_status : home2bb1_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		pipe_lost_selector_SIF : decorator_success_is_failure(pipe_lost_selector);
> 		pipe_lost_selector : node_selector_without_memory2(check_pipe_post, loiter_task1);
> 		check_pipe_post : node_check_blackboard_variable_value(blackboard, 18, check_pipe_post_CHECK_bb_pipe_lost_warning);
268c235,238
< 		loiter_task1_STATUS : loiter_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		loiter_task1 : node_set_blackboard_variables(loiter_task1_SET_status);
> 		loiter_task1_SET_status : loiter_task1_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		track_pipe_mission : node_sequence_with_memory3(is_track_pipe_mission_requested, tracking, track_pipe_mission_end, resume_point_66);
> 		is_track_pipe_mission_requested : node_check_blackboard_variable_value(blackboard, 20, is_track_pipe_mission_requested_CHECK_bb_mission_dot_data);
270c240,246
< 		tracking_task_STATUS : tracking_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		tracking : node_parallel_success_on_all3(tracking_task, lec2am_speed_cmd, lec2am_mapping_cmd,  parallel_skip_68);
> 		tracking_task : node_set_blackboard_variables(tracking_task_SET_status);
> 		tracking_task_SET_status : tracking_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		lec2am_speed_cmd : node_selector_without_memory3(lec2am_l_speed_check_SIF, lec2am_r_speed_check_SIF, speed_max_task);
> 		lec2am_l_speed_check_SIF : decorator_success_is_failure(lec2am_l_speed_check);
> 		lec2am_l_speed_check : node_selector_without_memory2(check_lec2am_ls, speed_min_task);
> 		check_lec2am_ls : node_check_blackboard_variable_value(blackboard, 14, check_lec2am_ls_CHECK_lec2_am_l_speed_warning);
272c248,252
< 		speed_min_task_STATUS : speed_min_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		speed_min_task : node_set_blackboard_variables(speed_min_task_SET_status);
> 		speed_min_task_SET_status : speed_min_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		lec2am_r_speed_check_SIF : decorator_success_is_failure(lec2am_r_speed_check);
> 		lec2am_r_speed_check : node_selector_without_memory2(check_lec2am_rs, speed_min_task1);
> 		check_lec2am_rs : node_check_blackboard_variable_value(blackboard, 10, check_lec2am_rs_CHECK_lec2_am_r_speed_warning);
274,275c254,261
< 		speed_min_task1_STATUS : speed_min_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		speed_max_task_STATUS : speed_max_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		speed_min_task1 : node_set_blackboard_variables(speed_min_task1_SET_status);
> 		speed_min_task1_SET_status : speed_min_task1_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		speed_max_task : node_set_blackboard_variables(speed_max_task_SET_status);
> 		speed_max_task_SET_status : speed_max_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		lec2am_mapping_cmd : node_selector_without_memory3(lec2am_l_mapping_check_SIF, lec2am_r_mapping_check_SIF, pipe_mapping_enable_task);
> 		lec2am_l_mapping_check_SIF : decorator_success_is_failure(lec2am_l_mapping_check);
> 		lec2am_l_mapping_check : node_selector_without_memory2(check_lec2am_lp, pipe_mapping_disable_task);
> 		check_lec2am_lp : node_check_blackboard_variable_value(blackboard, 15, check_lec2am_lp_CHECK_lec2_am_l_pipe_warning);
277c263,267
< 		pipe_mapping_disable_task_STATUS : pipe_mapping_disable_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		pipe_mapping_disable_task : node_set_blackboard_variables(pipe_mapping_disable_task_SET_status);
> 		pipe_mapping_disable_task_SET_status : pipe_mapping_disable_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		lec2am_r_mapping_check_SIF : decorator_success_is_failure(lec2am_r_mapping_check);
> 		lec2am_r_mapping_check : node_selector_without_memory2(check_lec2am_rp, pipe_mapping_disable_task1);
> 		check_lec2am_rp : node_check_blackboard_variable_value(blackboard, 11, check_lec2am_rp_CHECK_lec2_am_r_pipe_warning);
279,280c269,276
< 		pipe_mapping_disable_task1_STATUS : pipe_mapping_disable_task1_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		pipe_mapping_enable_task_STATUS : pipe_mapping_enable_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		pipe_mapping_disable_task1 : node_set_blackboard_variables(pipe_mapping_disable_task1_SET_status);
> 		pipe_mapping_disable_task1_SET_status : pipe_mapping_disable_task1_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		pipe_mapping_enable_task : node_set_blackboard_variables(pipe_mapping_enable_task_SET_status);
> 		pipe_mapping_enable_task_SET_status : pipe_mapping_enable_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		track_pipe_mission_end : node_sequence_with_memory1(evaluate, -2);
> 		evaluate : node_timer();
> 		waypoint_mission : node_sequence_with_memory2(is_waypoint_requested, waypoint_selector, resume_point_92);
> 		is_waypoint_requested : node_check_blackboard_variable_value(blackboard, 20, is_waypoint_requested_CHECK_bb_mission_dot_data);
281a278,281
> 		waypoint_selector : node_selector_without_memory2(waypoints_sif_SIF, waypoint_task);
> 		waypoints_sif_SIF : decorator_success_is_failure(waypoints_sif);
> 		waypoints_sif : node_selector_without_memory2(check_waypoints_completed, waypoint_end);
> 		check_waypoints_completed : node_check_blackboard_variable_value(blackboard, 25, check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data);
283,286c283,291
< 		next_mission_STATUS : next_mission_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		loiter_task2_STATUS : loiter_task2_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		waypoint_task_STATUS : waypoint_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
< 		loiter_task_STATUS : loiter_task_STATUS_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
---
> 		waypoint_end : node_sequence_with_memory2(next_mission, loiter_task2, resume_point_98);
> 		next_mission : node_set_blackboard_variables(next_mission_SET_status);
> 		next_mission_SET_status : next_mission_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		loiter_task2 : node_set_blackboard_variables(loiter_task2_SET_status);
> 		loiter_task2_SET_status : loiter_task2_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		waypoint_task : node_set_blackboard_variables(waypoint_task_SET_status);
> 		waypoint_task_SET_status : waypoint_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
> 		loiter_task : node_set_blackboard_variables(loiter_task_SET_status);
> 		loiter_task_SET_status : loiter_task_SET_status_module(blackboard.variables, blackboard.variable_exists, node_names, variable_names);
303c308
< MODULE composite_parallel_unsynchronized_success_on_all_5(child_0, child_1, child_2, child_3, child_4)
---
> MODULE node_set_blackboard_variables(status_module)
308,327c313,314
< 		internal_status :=
< 			case
< 				(child_0.internal_status = failure) : failure;
< 				(child_1.internal_status = failure) : failure;
< 				(child_2.internal_status = failure) : failure;
< 				(child_3.internal_status = failure) : failure;
< 				(child_4.internal_status = failure) : failure;
< 				!(child_0.internal_status = success) : child_0.internal_status;
< 				!(child_1.internal_status = success) : child_1.internal_status;
< 				!(child_2.internal_status = success) : child_2.internal_status;
< 				!(child_3.internal_status = success) : child_3.internal_status;
< 				!(child_4.internal_status = success) : child_4.internal_status;
< 				TRUE : success;
< 			esac;
< 		child_0.active := active;
< 		child_1.active := active;
< 		child_2.active := active;
< 		child_3.active := active;
< 		child_4.active := active;
< MODULE composite_parallel_unsynchronized_success_on_all_17(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10, child_11, child_12, child_13, child_14, child_15, child_16)
---
> 		internal_status := status_module.status;
> MODULE decorator_success_is_failure(child_0)
334,368c321,323
< 				(child_0.internal_status = failure) : failure;
< 				(child_1.internal_status = failure) : failure;
< 				(child_2.internal_status = failure) : failure;
< 				(child_3.internal_status = failure) : failure;
< 				(child_4.internal_status = failure) : failure;
< 				(child_5.internal_status = failure) : failure;
< 				(child_6.internal_status = failure) : failure;
< 				(child_7.internal_status = failure) : failure;
< 				(child_8.internal_status = failure) : failure;
< 				(child_9.internal_status = failure) : failure;
< 				(child_10.internal_status = failure) : failure;
< 				(child_11.internal_status = failure) : failure;
< 				(child_12.internal_status = failure) : failure;
< 				(child_13.internal_status = failure) : failure;
< 				(child_14.internal_status = failure) : failure;
< 				(child_15.internal_status = failure) : failure;
< 				(child_16.internal_status = failure) : failure;
< 				!(child_0.internal_status = success) : child_0.internal_status;
< 				!(child_1.internal_status = success) : child_1.internal_status;
< 				!(child_2.internal_status = success) : child_2.internal_status;
< 				!(child_3.internal_status = success) : child_3.internal_status;
< 				!(child_4.internal_status = success) : child_4.internal_status;
< 				!(child_5.internal_status = success) : child_5.internal_status;
< 				!(child_6.internal_status = success) : child_6.internal_status;
< 				!(child_7.internal_status = success) : child_7.internal_status;
< 				!(child_8.internal_status = success) : child_8.internal_status;
< 				!(child_9.internal_status = success) : child_9.internal_status;
< 				!(child_10.internal_status = success) : child_10.internal_status;
< 				!(child_11.internal_status = success) : child_11.internal_status;
< 				!(child_12.internal_status = success) : child_12.internal_status;
< 				!(child_13.internal_status = success) : child_13.internal_status;
< 				!(child_14.internal_status = success) : child_14.internal_status;
< 				!(child_15.internal_status = success) : child_15.internal_status;
< 				!(child_16.internal_status = success) : child_16.internal_status;
< 				TRUE : success;
---
> 				!(active) : invalid;
> 				!(child_0.status = success) : child_0.status;
> 				TRUE : failure;
370,387c325,330
< 		child_0.active := active;
< 		child_1.active := active;
< 		child_2.active := active;
< 		child_3.active := active;
< 		child_4.active := active;
< 		child_5.active := active;
< 		child_6.active := active;
< 		child_7.active := active;
< 		child_8.active := active;
< 		child_9.active := active;
< 		child_10.active := active;
< 		child_11.active := active;
< 		child_12.active := active;
< 		child_13.active := active;
< 		child_14.active := active;
< 		child_15.active := active;
< 		child_16.active := active;
< MODULE leaf_set_blackboard_variables(status_module)
---
> 		child_0.active :=
> 			case
> 				!(active) : FALSE;
> 				TRUE : TRUE;
> 			esac;
> MODULE node_check_blackboard_variable_value(blackboard, variable, check)
392,393c335,344
< 		internal_status := status_module.status;
< MODULE composite_selector_without_memory_2(child_0, child_1)
---
> 		internal_status := (blackboard.variable_exists[variable]) & (check.result) ? success : failure;
> MODULE node_timer()
> 	CONSTANTS
> 		success, failure, running, invalid;
> 	DEFINE
> 		status := active ? internal_status : invalid;
> 		internal_status := input_status;
> 	VAR
> 		input_status : {success, running};
> MODULE node_selector_without_memory2(child_0, child_1)
406,428c357
< MODULE decorator_X_is_Y(child_0, incoming_status, outgoing_status)
< 	CONSTANTS
< 		success, failure, running, invalid;
< 	DEFINE
< 		status := active ? internal_status : invalid;
< 		internal_status :=
< 			case
< 				!(active) : invalid;
< 				child_0.status = incoming_status : outgoing_status;
< 				TRUE : child_0.status;
< 			esac;
< 		child_0.active :=
< 			case
< 				!(active) : FALSE;
< 				TRUE : TRUE;
< 			esac;
< MODULE leaf_check_blackboard_variable_value(check)
< 	CONSTANTS
< 		success, failure, running, invalid;
< 	DEFINE
< 		status := active ? internal_status : invalid;
< 		internal_status := (check.result) ? success : failure;
< MODULE composite_selector_without_memory_11(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10)
---
> MODULE node_selector_without_memory11(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10)
459c388,403
< MODULE composite_sequence_with_memory_2(child_0, child_1, resume_point)
---
> MODULE node_selector_without_memory3(child_0, child_1, child_2)
> 	CONSTANTS
> 		success, failure, running, invalid;
> 	DEFINE
> 		status := active ? internal_status : invalid;
> 		internal_status :=
> 			case
> 				!(child_0.internal_status = failure) : child_0.internal_status;
> 				!(child_1.internal_status = failure) : child_1.internal_status;
> 				!(child_2.internal_status = failure) : child_2.internal_status;
> 				TRUE : failure;
> 			esac;
> 		child_0.active := active;
> 		child_1.active := child_0.status = failure;
> 		child_2.active := child_1.status = failure;
> MODULE node_sequence_with_memory3(child_0, child_1, child_2, resume_point)
467a412
> 				(2 >= resume_point) & !(child_2.internal_status = success) : child_2.internal_status;
472c417,418
< MODULE composite_parallel_unsynchronized_success_on_all_2(child_0, child_1)
---
> 		child_2.active := (2 >= resume_point) & ((2 = resume_point) | (child_1.status = success));
> MODULE node_sequence_with_memory2(child_0, child_1, resume_point)
479,482c425,426
< 				(child_0.internal_status = failure) : failure;
< 				(child_1.internal_status = failure) : failure;
< 				!(child_0.internal_status = success) : child_0.internal_status;
< 				!(child_1.internal_status = success) : child_1.internal_status;
---
> 				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
> 				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
485,487c429,431
< 		child_0.active := active;
< 		child_1.active := active;
< MODULE composite_sequence_with_memory_3(child_0, child_1, child_2, resume_point)
---
> 		child_0.active := active & (0 >= resume_point);
> 		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
> MODULE node_sequence_with_memory1(child_0, resume_point)
495,496d438
< 				(1 >= resume_point) & !(child_1.internal_status = success) : child_1.internal_status;
< 				(2 >= resume_point) & !(child_2.internal_status = success) : child_2.internal_status;
500,502c442
< 		child_1.active := (1 >= resume_point) & ((1 = resume_point) | (child_0.status = success));
< 		child_2.active := (2 >= resume_point) & ((2 = resume_point) | (child_1.status = success));
< MODULE composite_parallel_unsynchronized_success_on_all_3(child_0, child_1, child_2)
---
> MODULE node_parallel_success_on_all5(child_0, child_1, child_2, child_3, child_4, skip_child)
511a452,453
> 				(child_3.internal_status = failure) : failure;
> 				(child_4.internal_status = failure) : failure;
514a457,458
> 				!(child_3.internal_status = success) : child_3.internal_status;
> 				!(child_4.internal_status = success) : child_4.internal_status;
517,520c461,466
< 		child_0.active := active;
< 		child_1.active := active;
< 		child_2.active := active;
< MODULE composite_selector_without_memory_3(child_0, child_1, child_2)
---
> 		child_0.active := active & !(skip_child[0] = -2);
> 		child_1.active := active & !(skip_child[1] = -2);
> 		child_2.active := active & !(skip_child[2] = -2);
> 		child_3.active := active & !(skip_child[3] = -2);
> 		child_4.active := active & !(skip_child[4] = -2);
> MODULE node_parallel_success_on_all17(child_0, child_1, child_2, child_3, child_4, child_5, child_6, child_7, child_8, child_9, child_10, child_11, child_12, child_13, child_14, child_15, child_16, skip_child)
527,530c473,507
< 				!(child_0.internal_status = failure) : child_0.internal_status;
< 				!(child_1.internal_status = failure) : child_1.internal_status;
< 				!(child_2.internal_status = failure) : child_2.internal_status;
< 				TRUE : failure;
---
> 				(child_0.internal_status = failure) : failure;
> 				(child_1.internal_status = failure) : failure;
> 				(child_2.internal_status = failure) : failure;
> 				(child_3.internal_status = failure) : failure;
> 				(child_4.internal_status = failure) : failure;
> 				(child_5.internal_status = failure) : failure;
> 				(child_6.internal_status = failure) : failure;
> 				(child_7.internal_status = failure) : failure;
> 				(child_8.internal_status = failure) : failure;
> 				(child_9.internal_status = failure) : failure;
> 				(child_10.internal_status = failure) : failure;
> 				(child_11.internal_status = failure) : failure;
> 				(child_12.internal_status = failure) : failure;
> 				(child_13.internal_status = failure) : failure;
> 				(child_14.internal_status = failure) : failure;
> 				(child_15.internal_status = failure) : failure;
> 				(child_16.internal_status = failure) : failure;
> 				!(child_0.internal_status = success) : child_0.internal_status;
> 				!(child_1.internal_status = success) : child_1.internal_status;
> 				!(child_2.internal_status = success) : child_2.internal_status;
> 				!(child_3.internal_status = success) : child_3.internal_status;
> 				!(child_4.internal_status = success) : child_4.internal_status;
> 				!(child_5.internal_status = success) : child_5.internal_status;
> 				!(child_6.internal_status = success) : child_6.internal_status;
> 				!(child_7.internal_status = success) : child_7.internal_status;
> 				!(child_8.internal_status = success) : child_8.internal_status;
> 				!(child_9.internal_status = success) : child_9.internal_status;
> 				!(child_10.internal_status = success) : child_10.internal_status;
> 				!(child_11.internal_status = success) : child_11.internal_status;
> 				!(child_12.internal_status = success) : child_12.internal_status;
> 				!(child_13.internal_status = success) : child_13.internal_status;
> 				!(child_14.internal_status = success) : child_14.internal_status;
> 				!(child_15.internal_status = success) : child_15.internal_status;
> 				!(child_16.internal_status = success) : child_16.internal_status;
> 				TRUE : success;
532,535c509,526
< 		child_0.active := active;
< 		child_1.active := child_0.status = failure;
< 		child_2.active := child_1.status = failure;
< MODULE composite_sequence_with_memory_1(child_0, resume_point)
---
> 		child_0.active := active & !(skip_child[0] = -2);
> 		child_1.active := active & !(skip_child[1] = -2);
> 		child_2.active := active & !(skip_child[2] = -2);
> 		child_3.active := active & !(skip_child[3] = -2);
> 		child_4.active := active & !(skip_child[4] = -2);
> 		child_5.active := active & !(skip_child[5] = -2);
> 		child_6.active := active & !(skip_child[6] = -2);
> 		child_7.active := active & !(skip_child[7] = -2);
> 		child_8.active := active & !(skip_child[8] = -2);
> 		child_9.active := active & !(skip_child[9] = -2);
> 		child_10.active := active & !(skip_child[10] = -2);
> 		child_11.active := active & !(skip_child[11] = -2);
> 		child_12.active := active & !(skip_child[12] = -2);
> 		child_13.active := active & !(skip_child[13] = -2);
> 		child_14.active := active & !(skip_child[14] = -2);
> 		child_15.active := active & !(skip_child[15] = -2);
> 		child_16.active := active & !(skip_child[16] = -2);
> MODULE node_parallel_success_on_all3(child_0, child_1, child_2, skip_child)
542c533,538
< 				(0 >= resume_point) & !(child_0.internal_status = success) : child_0.internal_status;
---
> 				(child_0.internal_status = failure) : failure;
> 				(child_1.internal_status = failure) : failure;
> 				(child_2.internal_status = failure) : failure;
> 				!(child_0.internal_status = success) : child_0.internal_status;
> 				!(child_1.internal_status = success) : child_1.internal_status;
> 				!(child_2.internal_status = success) : child_2.internal_status;
545,546c541,544
< 		child_0.active := active & (0 >= resume_point);
< MODULE leaf_timer()
---
> 		child_0.active := active & !(skip_child[0] = -2);
> 		child_1.active := active & !(skip_child[1] = -2);
> 		child_2.active := active & !(skip_child[2] = -2);
> MODULE node_parallel_success_on_all2(child_0, child_1, skip_child)
551,553c549,558
< 		internal_status := input_status;
< 	VAR
< 		input_status : {success, running};
---
> 		internal_status :=
> 			case
> 				(child_0.internal_status = failure) : failure;
> 				(child_1.internal_status = failure) : failure;
> 				!(child_0.internal_status = success) : child_0.internal_status;
> 				!(child_1.internal_status = success) : child_1.internal_status;
> 				TRUE : success;
> 			esac;
> 		child_0.active := active & !(skip_child[0] = -2);
> 		child_1.active := active & !(skip_child[1] = -2);
556,575c561,622
< 		battery_low_warning := 0;
< 		bb_rth_warning := 1;
< 		bb_geofence_warning := 2;
< 		lec2_am_r_speed_warning := 3;
< 		lec2_am_r_pipe_warning := 4;
< 		lec2_am_l_speed_warning := 5;
< 		lec2_am_l_pipe_warning := 6;
< 		bb_pipe_lost_warning := 7;
< 		bb_mission_dot_data := 8;
< 		bb_sensor_failure_warning := 9;
< 		bb_waypoints_completed_dot_data := 10;
< 		dd_z_axis_warning := 11;
< 		dd_xy_axis_degradation := 12;
< 		obstacle_standoff_warning := 13;
< 		bb_fls_warning := 14;
< 		emergency_stop_warning := 15;
< 		next_mission := 16;
< 		bb_obstacle_warning := 17;
< 		bb_home_reached := 18;
< 		pipe_mapping_enable := 19;
---
> 		battery := 0;
> 		battery_low_warning := 1;
> 		battery_dot_batt_charge_remaining := 2;
> 		bb_rth := 3;
> 		bb_rth_warning := 4;
> 		bb_rth_dot_data := 5;
> 		bb_geofence := 6;
> 		bb_geofence_warning := 7;
> 		bb_geofence_dot_data := 8;
> 		lec2_am_r := 9;
> 		lec2_am_r_speed_warning := 10;
> 		lec2_am_r_pipe_warning := 11;
> 		lec2_am_r_dot_confs := 12;
> 		lec2_am_l := 13;
> 		lec2_am_l_speed_warning := 14;
> 		lec2_am_l_pipe_warning := 15;
> 		lec2_am_l_dot_confs := 16;
> 		bb_pipelost := 17;
> 		bb_pipe_lost_warning := 18;
> 		bb_pipelost_dot_data := 19;
> 		bb_mission_dot_data := 20;
> 		bb_sensor_failure := 21;
> 		bb_sensor_failure_warning := 22;
> 		bb_sensor_failure_dot_data := 23;
> 		bb_waypoints_completed := 24;
> 		bb_waypoints_completed_dot_data := 25;
> 		bb_mission := 26;
> 		dd_output := 27;
> 		dd_z_axis_warning := 28;
> 		dd_xy_axis_degradation := 29;
> 		dd_output_dot_data := 30;
> 		total_degradation := 31;
> 		fls_range := 32;
> 		obstacle_standoff_warning := 33;
> 		obstacle_min_standoff := 34;
> 		fls_range_dot_range := 35;
> 		obstacle_in_view := 36;
> 		bb_fls_warning := 37;
> 		obstacle_in_view_dot_stamp := 38;
> 		emergency_stop_warning := 39;
> 		hsd_pipeline_mapping := 40;
> 		hsd_to_waypoint := 41;
> 		hsd_to_rth := 42;
> 		hsd_to_surface := 43;
> 		rtreach_out := 44;
> 		rtreach_out_dot_data := 45;
> 		HSD_out_dot_heading := 46;
> 		uuv_max_speed := 47;
> 		mission_file := 48;
> 		refLat := 49;
> 		refLon := 50;
> 		next_mission := 51;
> 		decision_threshold := 52;
> 		HSD_out := 53;
> 		bb_obstacle_warning := 54;
> 		cm_hsd_input := 55;
> 		HSD_out_dot_speed := 56;
> 		HSD_out_dot_depth := 57;
> 		bb_home_reached := 58;
> 		bb_home_dist := 59;
> 		bb_home_dist_dot_data := 60;
> 		pipe_mapping_enable := 61;
681c728
< --battery_low_warning : 0
---
> --battery : 0
683c730,736
< --bb_rth_warning : 1
---
> --battery_low_warning : 1
> ----battery2bb
> --battery_dot_batt_charge_remaining : 2
> ----battery2bb
> --bb_rth : 3
> ----rth2bb
> --bb_rth_warning : 4
686c739,741
< --bb_geofence_warning : 2
---
> --bb_rth_dot_data : 5
> ----rth2bb
> --bb_geofence : 6
688c743,749
< --lec2_am_r_speed_warning : 3
---
> --bb_geofence_warning : 7
> ----geofence2bb
> --bb_geofence_dot_data : 8
> ----geofence2bb
> --lec2_am_r : 9
> ----lec2_am_r_2bb
> --lec2_am_r_speed_warning : 10
690c751
< --lec2_am_r_pipe_warning : 4
---
> --lec2_am_r_pipe_warning : 11
692c753,757
< --lec2_am_l_speed_warning : 5
---
> --lec2_am_r_dot_confs : 12
> ----lec2_am_r_2bb
> --lec2_am_l : 13
> ----lec2_am_l_2bb
> --lec2_am_l_speed_warning : 14
694c759
< --lec2_am_l_pipe_warning : 6
---
> --lec2_am_l_pipe_warning : 15
696c761,763
< --bb_pipe_lost_warning : 7
---
> --lec2_am_l_dot_confs : 16
> ----lec2_am_l_2bb
> --bb_pipelost : 17
698,699c765,769
< --bb_mission_dot_data : 8
< ----mission2bb
---
> --bb_pipe_lost_warning : 18
> ----pipe_lost2bb
> --bb_pipelost_dot_data : 19
> ----pipe_lost2bb
> --bb_mission_dot_data : 20
700a771
> ----mission2bb
702c773,777
< --bb_sensor_failure_warning : 9
---
> --bb_sensor_failure : 21
> ----sensor_failure2bb
> --bb_sensor_failure_warning : 22
> ----sensor_failure2bb
> --bb_sensor_failure_dot_data : 23
704c779
< --bb_waypoints_completed_dot_data : 10
---
> --bb_waypoints_completed : 24
706c781,792
< --dd_z_axis_warning : 11
---
> --bb_waypoints_completed_dot_data : 25
> ----waypoints_completed2bb
> --bb_mission : 26
> ----mission2bb
> --dd_output : 27
> ----ddlec2bb
> --dd_z_axis_warning : 28
> ----ddlec2bb
> --dd_xy_axis_degradation : 29
> ----ddlec2bb
> ----reallocate_task
> --dd_output_dot_data : 30
708c794,795
< --dd_xy_axis_degradation : 12
---
> ----reallocate_task
> --total_degradation : 31
711c798,805
< --obstacle_standoff_warning : 13
---
> --fls_range : 32
> ----fls2bb
> --obstacle_standoff_warning : 33
> ----fls2bb
> --obstacle_min_standoff : 34
> ----fls2bb
> ----mission_server
> --fls_range_dot_range : 35
713c807
< --bb_fls_warning : 14
---
> --obstacle_in_view : 36
715,716c809,813
< --emergency_stop_warning : 15
< ----rtreach2bb
---
> --bb_fls_warning : 37
> ----fls_warning2bb
> --obstacle_in_view_dot_stamp : 38
> ----fls_warning2bb
> --emergency_stop_warning : 39
717a815,856
> ----rtreach2bb
> ----mission_server
> --hsd_pipeline_mapping : 40
> ----hsd_pipe2bb
> --hsd_to_waypoint : 41
> ----hsd_wp2bb
> --hsd_to_rth : 42
> ----hsd_rth2bb
> --hsd_to_surface : 43
> ----hsd_surface2bb
> --rtreach_out : 44
> ----rtreach2bb
> --rtreach_out_dot_data : 45
> ----rtreach2bb
> --HSD_out_dot_heading : 46
> ----reallocate_task
> ----obstacle_avoidance
> ----surface_task
> ----surface_task1
> ----surface_task2
> ----surface_task3
> ----surface_task4
> ----rth_task
> ----rth_task1
> ----loiter_task1
> ----tracking_task
> ----speed_min_task
> ----speed_min_task1
> ----speed_max_task
> ----loiter_task2
> ----waypoint_task
> ----loiter_task
> --uuv_max_speed : 47
> ----mission_server
> ----speed_max_task
> --mission_file : 48
> ----mission_server
> --refLat : 49
> ----mission_server
> --refLon : 50
> ----mission_server
> --next_mission : 51
719d857
< --next_mission : 16
720a859
> --decision_threshold : 52
722c861,878
< --bb_obstacle_warning : 17
---
> --HSD_out : 53
> ----obstacle_avoidance
> ----surface_task
> ----surface_task1
> ----surface_task2
> ----surface_task3
> ----surface_task4
> ----rth_task
> ----rth_task1
> ----loiter_task1
> ----tracking_task
> ----speed_min_task
> ----speed_min_task1
> ----speed_max_task
> ----loiter_task2
> ----waypoint_task
> ----loiter_task
> --bb_obstacle_warning : 54
724c880,928
< --bb_home_reached : 18
---
> --cm_hsd_input : 55
> ----obstacle_avoidance
> ----surface_task
> ----surface_task1
> ----surface_task2
> ----surface_task3
> ----surface_task4
> ----rth_task
> ----rth_task1
> ----loiter_task1
> ----tracking_task
> ----loiter_task2
> ----waypoint_task
> ----loiter_task
> --HSD_out_dot_speed : 56
> ----obstacle_avoidance
> ----surface_task
> ----surface_task1
> ----surface_task2
> ----surface_task3
> ----surface_task4
> ----rth_task
> ----rth_task1
> ----loiter_task1
> ----tracking_task
> ----speed_min_task
> ----speed_min_task1
> ----speed_max_task
> ----loiter_task2
> ----waypoint_task
> ----loiter_task
> --HSD_out_dot_depth : 57
> ----obstacle_avoidance
> ----surface_task
> ----surface_task1
> ----surface_task2
> ----surface_task3
> ----surface_task4
> ----rth_task
> ----rth_task1
> ----loiter_task1
> ----tracking_task
> ----speed_min_task
> ----speed_min_task1
> ----speed_max_task
> ----loiter_task2
> ----waypoint_task
> ----loiter_task
> --bb_home_reached : 58
727,729c931,937
< ----check_surface
< --pipe_mapping_enable : 19
< ----pipe_mapping_disable_task1
---
> --bb_home_dist : 59
> ----home2bb
> ----home2bb1
> --bb_home_dist_dot_data : 60
> ----home2bb
> ----home2bb1
> --pipe_mapping_enable : 61
730a939
> ----pipe_mapping_disable_task1
736,737c945,1015
< 		variables := [battery_low_warning, bb_rth_warning, bb_geofence_warning, lec2_am_r_speed_warning, lec2_am_r_pipe_warning, lec2_am_l_speed_warning, lec2_am_l_pipe_warning, bb_pipe_lost_warning, bb_mission_dot_data, bb_sensor_failure_warning, bb_waypoints_completed_dot_data, dd_z_axis_warning, dd_xy_axis_degradation, obstacle_standoff_warning, bb_fls_warning, emergency_stop_warning, next_mission, bb_obstacle_warning, bb_home_reached, pipe_mapping_enable];
< 		variable_exists := [battery_low_warning_exists, bb_rth_warning_exists, bb_geofence_warning_exists, lec2_am_r_speed_warning_exists, lec2_am_r_pipe_warning_exists, lec2_am_l_speed_warning_exists, lec2_am_l_pipe_warning_exists, bb_pipe_lost_warning_exists, bb_mission_dot_data_exists, bb_sensor_failure_warning_exists, bb_waypoints_completed_dot_data_exists, dd_z_axis_warning_exists, dd_xy_axis_degradation_exists, obstacle_standoff_warning_exists, bb_fls_warning_exists, emergency_stop_warning_exists, next_mission_exists, bb_obstacle_warning_exists, bb_home_reached_exists, pipe_mapping_enable_exists];
---
> 		variables := [battery_SET.battery, battery_low_warning_SET.battery_low_warning, battery_dot_batt_charge_remaining_SET.battery_dot_batt_charge_remaining, bb_rth_SET.bb_rth, bb_rth_warning_SET.bb_rth_warning, bb_rth_dot_data_SET.bb_rth_dot_data, bb_geofence_SET.bb_geofence, bb_geofence_warning_SET.bb_geofence_warning, bb_geofence_dot_data_SET.bb_geofence_dot_data, lec2_am_r_SET.lec2_am_r, lec2_am_r_speed_warning_SET.lec2_am_r_speed_warning, lec2_am_r_pipe_warning_SET.lec2_am_r_pipe_warning, lec2_am_r_dot_confs_SET.lec2_am_r_dot_confs, lec2_am_l_SET.lec2_am_l, lec2_am_l_speed_warning_SET.lec2_am_l_speed_warning, lec2_am_l_pipe_warning_SET.lec2_am_l_pipe_warning, lec2_am_l_dot_confs_SET.lec2_am_l_dot_confs, bb_pipelost_SET.bb_pipelost, bb_pipe_lost_warning_SET.bb_pipe_lost_warning, bb_pipelost_dot_data_SET.bb_pipelost_dot_data, bb_mission_dot_data_SET.bb_mission_dot_data, bb_sensor_failure_SET.bb_sensor_failure, bb_sensor_failure_warning_SET.bb_sensor_failure_warning, bb_sensor_failure_dot_data_SET.bb_sensor_failure_dot_data, bb_waypoints_completed_SET.bb_waypoints_completed, bb_waypoints_completed_dot_data_SET.bb_waypoints_completed_dot_data, bb_mission_SET.bb_mission, dd_output_SET.dd_output, dd_z_axis_warning_SET.dd_z_axis_warning, dd_xy_axis_degradation_SET.dd_xy_axis_degradation, dd_output_dot_data_SET.dd_output_dot_data, total_degradation_SET.total_degradation, fls_range_SET.fls_range, obstacle_standoff_warning_SET.obstacle_standoff_warning, obstacle_min_standoff_SET.obstacle_min_standoff, fls_range_dot_range_SET.fls_range_dot_range, obstacle_in_view_SET.obstacle_in_view, bb_fls_warning_SET.bb_fls_warning, obstacle_in_view_dot_stamp_SET.obstacle_in_view_dot_stamp, emergency_stop_warning_SET.emergency_stop_warning, hsd_pipeline_mapping_SET.hsd_pipeline_mapping, hsd_to_waypoint_SET.hsd_to_waypoint, hsd_to_rth_SET.hsd_to_rth, hsd_to_surface_SET.hsd_to_surface, rtreach_out_SET.rtreach_out, rtreach_out_dot_data_SET.rtreach_out_dot_data, HSD_out_dot_heading_SET.HSD_out_dot_heading, uuv_max_speed_SET.uuv_max_speed, mission_file_SET.mission_file, refLat_SET.refLat, refLon_SET.refLon, next_mission_SET.next_mission, decision_threshold_SET.decision_threshold, HSD_out_SET.HSD_out, bb_obstacle_warning_SET.bb_obstacle_warning, cm_hsd_input_SET.cm_hsd_input, HSD_out_dot_speed_SET.HSD_out_dot_speed, HSD_out_dot_depth_SET.HSD_out_dot_depth, bb_home_reached_SET.bb_home_reached, bb_home_dist_SET.bb_home_dist, bb_home_dist_dot_data_SET.bb_home_dist_dot_data, pipe_mapping_enable_SET.pipe_mapping_enable];
> 		variable_exists := [battery_SET.battery_exists, battery_low_warning_SET.battery_low_warning_exists, battery_dot_batt_charge_remaining_SET.battery_dot_batt_charge_remaining_exists, bb_rth_SET.bb_rth_exists, bb_rth_warning_SET.bb_rth_warning_exists, bb_rth_dot_data_SET.bb_rth_dot_data_exists, bb_geofence_SET.bb_geofence_exists, bb_geofence_warning_SET.bb_geofence_warning_exists, bb_geofence_dot_data_SET.bb_geofence_dot_data_exists, lec2_am_r_SET.lec2_am_r_exists, lec2_am_r_speed_warning_SET.lec2_am_r_speed_warning_exists, lec2_am_r_pipe_warning_SET.lec2_am_r_pipe_warning_exists, lec2_am_r_dot_confs_SET.lec2_am_r_dot_confs_exists, lec2_am_l_SET.lec2_am_l_exists, lec2_am_l_speed_warning_SET.lec2_am_l_speed_warning_exists, lec2_am_l_pipe_warning_SET.lec2_am_l_pipe_warning_exists, lec2_am_l_dot_confs_SET.lec2_am_l_dot_confs_exists, bb_pipelost_SET.bb_pipelost_exists, bb_pipe_lost_warning_SET.bb_pipe_lost_warning_exists, bb_pipelost_dot_data_SET.bb_pipelost_dot_data_exists, bb_mission_dot_data_SET.bb_mission_dot_data_exists, bb_sensor_failure_SET.bb_sensor_failure_exists, bb_sensor_failure_warning_SET.bb_sensor_failure_warning_exists, bb_sensor_failure_dot_data_SET.bb_sensor_failure_dot_data_exists, bb_waypoints_completed_SET.bb_waypoints_completed_exists, bb_waypoints_completed_dot_data_SET.bb_waypoints_completed_dot_data_exists, bb_mission_SET.bb_mission_exists, dd_output_SET.dd_output_exists, dd_z_axis_warning_SET.dd_z_axis_warning_exists, dd_xy_axis_degradation_SET.dd_xy_axis_degradation_exists, dd_output_dot_data_SET.dd_output_dot_data_exists, total_degradation_SET.total_degradation_exists, fls_range_SET.fls_range_exists, obstacle_standoff_warning_SET.obstacle_standoff_warning_exists, obstacle_min_standoff_SET.obstacle_min_standoff_exists, fls_range_dot_range_SET.fls_range_dot_range_exists, obstacle_in_view_SET.obstacle_in_view_exists, bb_fls_warning_SET.bb_fls_warning_exists, obstacle_in_view_dot_stamp_SET.obstacle_in_view_dot_stamp_exists, emergency_stop_warning_SET.emergency_stop_warning_exists, hsd_pipeline_mapping_SET.hsd_pipeline_mapping_exists, hsd_to_waypoint_SET.hsd_to_waypoint_exists, hsd_to_rth_SET.hsd_to_rth_exists, hsd_to_surface_SET.hsd_to_surface_exists, rtreach_out_SET.rtreach_out_exists, rtreach_out_dot_data_SET.rtreach_out_dot_data_exists, HSD_out_dot_heading_SET.HSD_out_dot_heading_exists, uuv_max_speed_SET.uuv_max_speed_exists, mission_file_SET.mission_file_exists, refLat_SET.refLat_exists, refLon_SET.refLon_exists, next_mission_SET.next_mission_exists, decision_threshold_SET.decision_threshold_exists, HSD_out_SET.HSD_out_exists, bb_obstacle_warning_SET.bb_obstacle_warning_exists, cm_hsd_input_SET.cm_hsd_input_exists, HSD_out_dot_speed_SET.HSD_out_dot_speed_exists, HSD_out_dot_depth_SET.HSD_out_dot_depth_exists, bb_home_reached_SET.bb_home_reached_exists, bb_home_dist_SET.bb_home_dist_exists, bb_home_dist_dot_data_SET.bb_home_dist_dot_data_exists, pipe_mapping_enable_SET.pipe_mapping_enable_exists];
> 	VAR
> 		battery_SET : battery_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		battery_low_warning_SET : battery_low_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		battery_dot_batt_charge_remaining_SET : battery_dot_batt_charge_remaining_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_rth_SET : bb_rth_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_rth_warning_SET : bb_rth_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_rth_dot_data_SET : bb_rth_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_geofence_SET : bb_geofence_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_geofence_warning_SET : bb_geofence_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_geofence_dot_data_SET : bb_geofence_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_r_SET : lec2_am_r_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_r_speed_warning_SET : lec2_am_r_speed_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_r_pipe_warning_SET : lec2_am_r_pipe_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_r_dot_confs_SET : lec2_am_r_dot_confs_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_l_SET : lec2_am_l_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_l_speed_warning_SET : lec2_am_l_speed_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_l_pipe_warning_SET : lec2_am_l_pipe_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		lec2_am_l_dot_confs_SET : lec2_am_l_dot_confs_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_pipelost_SET : bb_pipelost_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_pipe_lost_warning_SET : bb_pipe_lost_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_pipelost_dot_data_SET : bb_pipelost_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_mission_dot_data_SET : bb_mission_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_sensor_failure_SET : bb_sensor_failure_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_sensor_failure_warning_SET : bb_sensor_failure_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_sensor_failure_dot_data_SET : bb_sensor_failure_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_waypoints_completed_SET : bb_waypoints_completed_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_waypoints_completed_dot_data_SET : bb_waypoints_completed_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_mission_SET : bb_mission_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		dd_output_SET : dd_output_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		dd_z_axis_warning_SET : dd_z_axis_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		dd_xy_axis_degradation_SET : dd_xy_axis_degradation_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		dd_output_dot_data_SET : dd_output_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		total_degradation_SET : total_degradation_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		fls_range_SET : fls_range_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		obstacle_standoff_warning_SET : obstacle_standoff_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		obstacle_min_standoff_SET : obstacle_min_standoff_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		fls_range_dot_range_SET : fls_range_dot_range_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		obstacle_in_view_SET : obstacle_in_view_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_fls_warning_SET : bb_fls_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		obstacle_in_view_dot_stamp_SET : obstacle_in_view_dot_stamp_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		emergency_stop_warning_SET : emergency_stop_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		hsd_pipeline_mapping_SET : hsd_pipeline_mapping_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		hsd_to_waypoint_SET : hsd_to_waypoint_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		hsd_to_rth_SET : hsd_to_rth_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		hsd_to_surface_SET : hsd_to_surface_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		rtreach_out_SET : rtreach_out_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		rtreach_out_dot_data_SET : rtreach_out_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		HSD_out_dot_heading_SET : HSD_out_dot_heading_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		uuv_max_speed_SET : uuv_max_speed_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		mission_file_SET : mission_file_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		refLat_SET : refLat_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		refLon_SET : refLon_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		next_mission_SET : next_mission_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		decision_threshold_SET : decision_threshold_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		HSD_out_SET : HSD_out_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_obstacle_warning_SET : bb_obstacle_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		cm_hsd_input_SET : cm_hsd_input_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		HSD_out_dot_speed_SET : HSD_out_dot_speed_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		HSD_out_dot_depth_SET : HSD_out_dot_depth_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_home_reached_SET : bb_home_reached_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_home_dist_SET : bb_home_dist_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		bb_home_dist_dot_data_SET : bb_home_dist_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> 		pipe_mapping_enable_SET : pipe_mapping_enable_SET_module(variables, variable_exists, node_names, variable_names, statuses);
> MODULE battery_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		battery := 0; --this isn't actually used. it's representing a pixhawk message
> 		battery_exists := TRUE;
> MODULE battery_low_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
739,757d1016
< 		bb_rth_warning_exists := TRUE;
< 		bb_geofence_warning_exists := TRUE;
< 		lec2_am_r_speed_warning_exists := TRUE;
< 		lec2_am_r_pipe_warning_exists := TRUE;
< 		lec2_am_l_speed_warning_exists := TRUE;
< 		lec2_am_l_pipe_warning_exists := TRUE;
< 		bb_pipe_lost_warning_exists := TRUE;
< 		bb_mission_dot_data_exists := TRUE;
< 		bb_sensor_failure_warning_exists := TRUE;
< 		bb_waypoints_completed_dot_data_exists := TRUE;
< 		dd_z_axis_warning_exists := TRUE;
< 		dd_xy_axis_degradation_exists := TRUE;
< 		obstacle_standoff_warning_exists := TRUE;
< 		bb_fls_warning_exists := TRUE;
< 		emergency_stop_warning_exists := TRUE;
< 		next_mission_exists := TRUE;
< 		bb_obstacle_warning_exists := TRUE;
< 		bb_home_reached_exists := TRUE;
< 		pipe_mapping_enable_exists := TRUE;
760,778d1018
< 		bb_rth_warning : 0..1;
< 		bb_geofence_warning : 0..1;
< 		lec2_am_r_speed_warning : 0..1;
< 		lec2_am_r_pipe_warning : 0..1;
< 		lec2_am_l_speed_warning : 0..1;
< 		lec2_am_l_pipe_warning : 0..1;
< 		bb_pipe_lost_warning : 0..1;
< 		bb_mission_dot_data : 0..4;
< 		bb_sensor_failure_warning : 0..1;
< 		bb_waypoints_completed_dot_data : 0..1;
< 		dd_z_axis_warning : 0..1;
< 		dd_xy_axis_degradation : 0..1;
< 		obstacle_standoff_warning : 0..1;
< 		bb_fls_warning : 0..1;
< 		emergency_stop_warning : 0..1;
< 		next_mission : 0..1;
< 		bb_obstacle_warning : 0..1;
< 		bb_home_reached : 0..1;
< 		pipe_mapping_enable : 0..1;
780c1020,1021
< 		next(battery_low_warning) := 
---
> 		init(battery_low_warning) := 0;
> 		next(battery_low_warning) :=
782c1023
< 				statuses[node_names.battery2bb] = success : {0, 1};
---
> 				(statuses[node_names.battery2bb] = success) : {0, 1};
784a1026,1040
> MODULE battery_dot_batt_charge_remaining_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		battery_dot_batt_charge_remaining_exists := TRUE;
> 		battery_dot_batt_charge_remaining := 0;
> MODULE bb_rth_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_rth := 0; --fake variable
> 		bb_rth_exists := TRUE;
> MODULE bb_rth_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_rth_warning_exists := TRUE;
> 	VAR
> 		bb_rth_warning : 0..1;
> 	ASSIGN
> 		init(bb_rth_warning) := 0;
787,789c1043,1045
< 				bb_rth_warning = 1 : 1;
< 				statuses[node_names.rth2bb] = success : {0, 1};
< 				(statuses[node_names.mission_server] = running) & (next_mission = 1) : {0, 1};
---
> 				(bb_rth_warning = 1) : 1; -- can't be unset.
> 				(statuses[node_names.mission_server] = running) & (variables[variable_names.next_mission] = 1) : {0, 1}; -- can be either, but only runs if next mission is true.
> 				(statuses[node_names.rth2bb] = success) : {0, 1};
791a1048,1062
> MODULE bb_rth_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_rth_dot_data_exists := TRUE;
> 		bb_rth_dot_data := 0;
> MODULE bb_geofence_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_geofence := 0; -- a fake variable
> 		bb_geofence_exists := TRUE;
> MODULE bb_geofence_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_geofence_warning_exists := TRUE;
> 	VAR
> 		bb_geofence_warning : 0..1;
> 	ASSIGN
> 		init(bb_geofence_warning) := 0;
794,795c1065,1066
< 				bb_geofence_warning = 1 : 1;
< 				statuses[node_names.geofence2bb] = success : {0, 1};
---
> 				(bb_geofence_warning = 1) : 1;
> 				(statuses[node_names.geofence2bb] = success) : {0, 1};
797a1069,1083
> MODULE bb_geofence_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_geofence_dot_data_exists := TRUE;
> 		bb_geofence_dot_data := 0;
> MODULE lec2_am_r_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_r_exists := TRUE;
> 		lec2_am_r := 0;
> MODULE lec2_am_r_speed_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_r_speed_warning_exists := TRUE;
> 	VAR
> 		lec2_am_r_speed_warning : 0..1;
> 	ASSIGN
> 		init(lec2_am_r_speed_warning) := 0;
800c1086
< 				statuses[node_names.lec2_am_r_2bb] = success : {0, 1};
---
> 				(statuses[node_names.lec2_am_r_2bb] = success) : {0, 1};
802a1089,1095
> MODULE lec2_am_r_pipe_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_r_pipe_warning_exists := TRUE;
> 	VAR
> 		lec2_am_r_pipe_warning : 0..1;
> 	ASSIGN
> 		init(lec2_am_r_pipe_warning) := 0;
805c1098
< 				statuses[node_names.lec2_am_l_2bb] = success : {0, 1};
---
> 				(statuses[node_names.lec2_am_r_2bb] = success) : {0, 1};
807a1101,1115
> MODULE lec2_am_r_dot_confs_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_r_dot_confs := 0;
> 		lec2_am_r_dot_confs_exists := TRUE;
> MODULE lec2_am_l_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_l_exists := TRUE;
> 		lec2_am_l := 0;
> MODULE lec2_am_l_speed_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_l_speed_warning_exists := TRUE;
> 	VAR
> 		lec2_am_l_speed_warning : 0..1;
> 	ASSIGN
> 		init(lec2_am_l_speed_warning) := 0;
810c1118
< 				statuses[node_names.lec2_am_l_2bb] = success : {0, 1};
---
> 				(statuses[node_names.lec2_am_l_2bb] = success) : {0, 1};
812a1121,1127
> MODULE lec2_am_l_pipe_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_l_pipe_warning_exists := TRUE;
> 	VAR
> 		lec2_am_l_pipe_warning : 0..1;
> 	ASSIGN
> 		init(lec2_am_l_pipe_warning) := 0;
814a1130
> 				(statuses[node_names.lec2_am_l_2bb] = success) : {0, 1};
816a1133,1148
> 
> MODULE lec2_am_l_dot_confs_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		lec2_am_l_dot_confs := 0;
> 		lec2_am_l_dot_confs_exists := TRUE;
> MODULE bb_pipelost_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_pipelost := 0;
> 		bb_pipelost_exists := TRUE;
> MODULE bb_pipe_lost_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_pipe_lost_warning_exists := TRUE;
> 	VAR
> 		bb_pipe_lost_warning : 0..1;
> 	ASSIGN
> 		init(bb_pipe_lost_warning) := 0;
819c1151
< 				statuses[node_names.pipe_lost2bb] = success & bb_mission_dot_data = 1 : {0, 1};
---
> 				(variables[variable_names.bb_mission_dot_data] = 1) & (statuses[node_names.pipe_lost2bb] = success) : {0, 1}; -- only set it if mission_dot_data is pipe-tracking
822,828c1154,1168
< 		init(bb_mission_dot_data) := 1;
< 		next(bb_mission_dot_data) := 
< 			case
< 				statuses[node_names.sensor_failure2bb] = running : {0, 1, 2, 3, 4};
< 				statuses[node_names.mission2bb] = success : {0, 1, 2, 3, 4};
< 				TRUE : bb_mission_dot_data;
< 			esac;
---
> MODULE bb_pipelost_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_pipelost_dot_data_exists := TRUE;
> 		bb_pipelost_dot_data := 0; -- as far as i can tell, this is just going to set the warning
> MODULE bb_sensor_failure_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_sensor_failure := 0;
> 		bb_sensor_failure_exists := TRUE;
> MODULE bb_sensor_failure_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_sensor_failure_warning_exists := TRUE;
> 	VAR
> 		bb_sensor_failure_warning : 0..1;
> 	ASSIGN
> 		init(bb_sensor_failure_warning) := 0;
831,832c1171,1172
< 				bb_sensor_failure_warning = 1 : 1;
< 				statuses[node_names.sensor_failure2bb] = success : {0, 1};
---
> 				(bb_sensor_failure_warning = 1) : 1;
> 				(statuses[node_names.sensor_failure2bb] = success) : {0, 1};
834a1175,1189
> MODULE bb_sensor_failure_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_sensor_failure_dot_data_exists := TRUE;
> 		bb_sensor_failure_dot_data := 0; --i think this it just used to set the warning.
> MODULE bb_waypoints_completed_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_waypoints_completed := 0; -- fake variable?
> 		bb_waypoints_completed_exists := TRUE;
> MODULE bb_waypoints_completed_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_waypoints_completed_dot_data_exists := TRUE;
> 	VAR
> 		bb_waypoints_completed_dot_data : 0..1; -- this one is initialized to false. 
> 	ASSIGN
> 		init(bb_waypoints_completed_dot_data) := 0;
837c1192
< 				statuses[node_names.waypoints_completed2bb] = success : {0, 1};
---
> 				(statuses[node_names.waypoints_completed2bb] = success) : {0, 1};
839a1195,1226
> MODULE bb_mission_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_mission := 0;
> 		bb_mission_exists := TRUE;
> MODULE bb_mission_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_mission_dot_data_exists := TRUE;
> 	VAR
> 		bb_mission_dot_data : 0..4; -- 0 means other, 1 means pipe-track,  2 means waypoint-follow, 3 means fdr, 4 mean loiter.
> 	ASSIGN
> 		init(bb_mission_dot_data) := 1;
> 		next(bb_mission_dot_data) := 
> 			case
> 				(statuses[node_names.mission_server] = running) : {0, 1, 2, 3, 4};
> 				(statuses[node_names.mission2bb] = success) : {0, 1, 2, 3, 4};
> 				TRUE : bb_mission_dot_data;
> 			esac;
> MODULE dd_output_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		dd_output_exists := TRUE;
> 		dd_output := 0;
> MODULE dd_output_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		dd_output_dot_data_exists := TRUE;
> 		dd_output_dot_data := 0;
> MODULE dd_z_axis_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		dd_z_axis_warning_exists := TRUE;
> 	VAR
> 		dd_z_axis_warning : 0..1;
> 	ASSIGN
> 		init(dd_z_axis_warning) := 0;
842c1229
< 				statuses[node_names.ddlec2bb] = success : {0, 1};
---
> 				(statuses[node_names.ddlec2bb] = success) : {0, 1};
844a1232,1238
> MODULE dd_xy_axis_degradation_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		dd_xy_axis_degradation_exists := TRUE;
> 	VAR
> 		dd_xy_axis_degradation : 0..1;
> 	ASSIGN
> 		init(dd_xy_axis_degradation) := 0;
847c1241
< 				statuses[node_names.ddlec2bb] = success : {0, 1};
---
> 				(statuses[node_names.ddlec2bb] = success) : {0, 1};
849a1244,1258
> MODULE fls_range_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		fls_range := 0;
> 		fls_range_exists := TRUE;
> MODULE fls_range_dot_range_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		fls_range_dot_range := 0;
> 		fls_range_dot_range_exists := TRUE;
> MODULE obstacle_standoff_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		obstacle_standoff_warning_exists := TRUE;
> 	VAR
> 		obstacle_standoff_warning : 0..1;
> 	ASSIGN
> 		init(obstacle_standoff_warning) := 0;
852,853c1261,1262
< 				obstacle_standoff_warning = 1 : 1;
< 				statuses[node_names.fls2bb] = success : {0, 1};
---
> 				(obstacle_standoff_warning = 1) : 1;
> 				(statuses[node_names.fls2bb] = success) : {0, 1};
855a1265,1283
> MODULE obstacle_min_standoff_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		obstacle_min_standoff_exists := TRUE;
> 		obstacle_min_standoff := 0; -- currently not dealing with this, as it's just used to set the standoff warning, which is just nondeterministic anyways
> MODULE obstacle_in_view_dot_stamp_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		obstacle_in_view_dot_stamp := 0;
> 		obstacle_in_view_dot_stamp_exists := TRUE;
> MODULE obstacle_in_view_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		obstacle_in_view := 0;
> 		obstacle_in_view_exists := TRUE;
> MODULE bb_fls_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_fls_warning_exists := TRUE;
> 	VAR
> 		bb_fls_warning : 0..1;
> 	ASSIGN
> 		init(bb_fls_warning) := 0;
858,859c1286,1287
< 				bb_fls_warning = 1 : 1;
< 				statuses[node_names.fls_warning2bb] = success : {0, 1};
---
> 				(bb_fls_warning = 1 ) : 1;
> 				(statuses[node_names.fls_warning2bb] = success) : {0, 1};
861a1290,1320
> MODULE hsd_pipeline_mapping_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		hsd_pipeline_mapping := 0;
> 		hsd_pipeline_mapping_exists := TRUE; --yeah i don't know what this does yet
> MODULE hsd_to_waypoint_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		hsd_to_waypoint := 0;
> 		hsd_to_waypoint_exists := TRUE;
> MODULE hsd_to_rth_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		hsd_to_rth := 0;
> 		hsd_to_rth_exists := TRUE;
> MODULE hsd_to_surface_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		hsd_to_surface := 0;
> 		hsd_to_surface_exists := TRUE;
> MODULE rtreach_out_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		rtreach_out := 0;
> 		rtreach_out_exists := TRUE;
> MODULE rtreach_out_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		rtreach_out_dot_data := 0;
> 		rtreach_out_dot_data_exists := TRUE;
> MODULE emergency_stop_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		emergency_stop_warning_exists := TRUE;
> 	VAR
> 		emergency_stop_warning : 0..1;
> 	ASSIGN
> 		init(emergency_stop_warning) := 0;
864,866c1323,1325
< 				emergency_stop_warning = 1 : 1;
< 				statuses[node_names.mission_server] = running : {0, 1};
< 				statuses[node_names.fls_warning2bb] = success | statuses[node_names.rtreach2bb] = success : {0, 1};
---
> 				(emergency_stop_warning = 1) : 1;
> 				(statuses[node_names.mission_server] = running) : {0, 1};
> 				(statuses[node_names.fls_warning2bb] = success | statuses[node_names.rtreach2bb] = success) : {0, 1};--this means we're not in mission server, so only update if success
868a1328,1354
> MODULE total_degradation_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		total_degradation := 0;
> 		total_degradation_exists := TRUE;
> MODULE uuv_max_speed_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		uuv_max_speed := 0;
> 		uuv_max_speed_exists := TRUE;
> MODULE mission_file_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		mission_file := 0;
> 		mission_file_exists := TRUE; -- i actually don't know what this variable is for.
> MODULE refLat_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		refLat := 0;
> 		refLat_exists := TRUE; --not sure what this is either. pretty sure it's storing lattitude.
> MODULE refLon_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		refLon := 0;
> 		refLon_exists := TRUE; --not sure what this is either. pretty sure it's storing longitude
> MODULE next_mission_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		next_mission_exists := TRUE;
> 	VAR
> 		next_mission : 0..1;
> 	ASSIGN
> 		init(next_mission) := 0; -- starts out as false.
871,872c1357,1358
< 				statuses[node_names.next_mission] = running : 1;
< 				statuses[node_names.mission_server] = running : 0;
---
> 				(statuses[node_names.next_mission] = running) : 1;
> 				(statuses[node_names.mission_server] = running) : 0;
874a1361,1375
> MODULE decision_threshold_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		decision_threshold := 0;
> 		decision_threshold_exists := TRUE;
> MODULE HSD_out_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		HSD_out := 0; --fake variable
> 		HSD_out_exists := TRUE; --always exists, cuz it's initialized. 
> MODULE bb_obstacle_warning_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_obstacle_warning_exists := TRUE;
> 	VAR
> 		bb_obstacle_warning : 0..1;
> 	ASSIGN
> 		init(bb_obstacle_warning) := 0; -- starts as false.
877c1378
< 				statuses[node_names.obstacle_avoidance] = running : {0, 1};
---
> 				(statuses[node_names.obstacle_avoidance] = running) : {0, 1}; -- can be set either way
879a1381,1403
> MODULE cm_hsd_input_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		cm_hsd_input := 0;
> 		cm_hsd_input_exists := TRUE;
> MODULE HSD_out_dot_heading_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		HSD_out_dot_heading := 0;
> 		HSD_out_dot_heading_exists := TRUE;
> MODULE HSD_out_dot_speed_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		HSD_out_dot_speed := 0;
> 		HSD_out_dot_speed_exists := TRUE;
> MODULE HSD_out_dot_depth_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		HSD_out_dot_depth := 0;
> 		HSD_out_dot_depth_exists := TRUE;
> MODULE bb_home_reached_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_home_reached_exists := TRUE;
> 	VAR
> 		bb_home_reached : 0..1;
> 	ASSIGN
> 		init(bb_home_reached) := 0;--starts at false
882c1406
< 				statuses[node_names.home2bb] = success | statuses[node_names.home2bb1] = success : {0, 1};
---
> 				(statuses[node_names.home2bb] = success | statuses[node_names.home2bb1] = success) : {0, 1};
885c1409,1423
< 		init(pipe_mapping_enable) := 1;
---
> MODULE bb_home_dist_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_home_dist := 0;
> 		bb_home_dist_exists := TRUE;
> MODULE bb_home_dist_dot_data_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		bb_home_dist_dot_data := 0;
> 		bb_home_dist_dot_data_exists := TRUE;
> MODULE pipe_mapping_enable_SET_module(variables, variable_exists, node_names, variable_names, statuses)
> 	DEFINE
> 		pipe_mapping_enable_exists := TRUE;
> 	VAR
> 		pipe_mapping_enable : 0..1;
> 	ASSIGN
> 		init(pipe_mapping_enable) := 1; -- starts as true.
888,890c1426,1428
< 				statuses[node_names.pipe_mapping_enable_task] != invalid : 1;
< 				statuses[node_names.pipe_mapping_disable_task1] != invalid : 0;
< 				statuses[node_names.pipe_mapping_disable_task] != invalid : 0;
---
> 				!(statuses[node_names.pipe_mapping_enable_task] in {invalid, error}) : 1;
> 				!(statuses[node_names.pipe_mapping_disable_task1] in {invalid, error}) : 0;
> 				!(statuses[node_names.pipe_mapping_disable_task] in {invalid, error}) : 0;
893c1431
< MODULE battery2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> MODULE battery2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
895,905c1433,1438
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE rth2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
< 	CONSTANTS
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE geofence2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE rth2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
907,911c1440,1445
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE lec2_am_r_2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE geofence2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
913,917c1447,1452
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE lec2_am_l_2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE lec2_am_r_2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
919,923c1454,1459
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE pipe_lost2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE lec2_am_l_2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
925,929c1461,1466
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE sensor_failure2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE pipe_lost2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
931,935c1468,1473
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE waypoints_completed2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE sensor_failure2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
937,941c1475,1480
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE mission2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE waypoints_completed2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
943,947c1482,1487
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE ddlec2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE mission2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
949,953c1489,1494
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE fls2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE ddlec2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
955,959c1496,1501
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE fls_warning2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE fls2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
961,965c1503,1508
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE hsd_pipe2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status; 
> MODULE fls_warning2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
967,971c1510,1515
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE hsd_wp2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE hsd_pipe2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
973,977c1517,1522
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE hsd_rth2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE hsd_wp2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
979,983c1524,1529
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE hsd_surface2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE hsd_rth2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
985,989c1531,1536
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE rtreach2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE hsd_surface2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
991,995c1538,1540
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
997,999c1542,1543
< 		result := next(variable_exists[variable_names.dd_xy_axis_degradation]) & (next(variables[variable_names.dd_xy_axis_degradation]) =0);
< 
< MODULE reallocate_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := random_status;
> MODULE rtreach2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
1001,1005c1545,1550
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE dd_lec_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status; 
> MODULE reallocate_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1007,1011c1552,1555
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE mission_server_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE dd_lec_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1013,1017c1557,1560
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE obstacle_avoidance_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE mission_server_SET_status_module(variables, variable_exists, node_names, variable_names)
1019,1023c1562
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE battery_low_fs_CHECK_battery_low_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1025,1027c1564,1565
< 		result := next(variable_exists[variable_names.battery_low_warning]) & (next(variables[variable_names.battery_low_warning]) =0);
< 
< MODULE surface_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE obstacle_avoidance_SET_status_module(variables, variable_exists, node_names, variable_names)
1029,1033c1567
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_sensor_failure_CHECK_bb_sensor_failure_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1035,1037c1569,1570
< 		result := next(variable_exists[variable_names.bb_sensor_failure_warning]) & (next(variables[variable_names.bb_sensor_failure_warning]) =0);
< 
< MODULE surface_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE surface_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1039,1043c1572
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE emergency_stop_fs_CHECK_emergency_stop_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1045,1047c1574,1575
< 		result := next(variable_exists[variable_names.emergency_stop_warning]) & (next(variables[variable_names.emergency_stop_warning]) =0);
< 
< MODULE emergency_stop_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE surface_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
1049,1053c1577,1580
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE surface_task2_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE emergency_stop_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1055,1059c1582
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_surface_CHECK_bb_home_reached_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1061,1063c1584,1585
< 		result := next(variable_exists[variable_names.bb_home_reached]) & (next(variables[variable_names.bb_home_reached]) =0);
< 
< MODULE surface_task3_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := success;
> MODULE surface_task2_SET_status_module(variables, variable_exists, node_names, variable_names)
1065,1069c1587
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1071,1073c1589,1590
< 		result := next(variable_exists[variable_names.obstacle_standoff_warning]) & (next(variables[variable_names.obstacle_standoff_warning]) =0);
< 
< MODULE surface_task4_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE surface_task3_SET_status_module(variables, variable_exists, node_names, variable_names)
1075,1079c1592
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_rth_CHECK_bb_rth_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1081,1083c1594,1595
< 		result := next(variable_exists[variable_names.bb_rth_warning]) & (next(variables[variable_names.bb_rth_warning]) =0);
< 
< MODULE rth_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE surface_task4_SET_status_module(variables, variable_exists, node_names, variable_names)
1085,1089c1597,1600
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE home2bb_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE rth_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1091,1095c1602
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_geofence_CHECK_bb_geofence_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1097,1099c1604,1605
< 		result := next(variable_exists[variable_names.bb_geofence_warning]) & (next(variables[variable_names.bb_geofence_warning]) =0);
< 
< MODULE rth_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE home2bb_SET_status_module(variables, variable_exists, node_names, variable_names)
1101,1105c1607,1612
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE home2bb1_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
> 	DEFINE
> 		status := random_status;
> MODULE rth_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
1107,1111c1614
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_pipe_post_CHECK_bb_pipe_lost_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1113,1115c1616,1617
< 		result := next(variable_exists[variable_names.bb_pipe_lost_warning]) & (next(variables[variable_names.bb_pipe_lost_warning]) =0);
< 
< MODULE loiter_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE home2bb1_SET_status_module(variables, variable_exists, node_names, variable_names)
1117,1121c1619,1621
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE is_track_pipe_mission_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	IVAR
> 		random_status : {success, running};
1123,1125c1623,1624
< 		result := next(variable_exists[variable_names.bb_mission_dot_data]) & (next(variables[variable_names.bb_mission_dot_data]) =0);
< 
< MODULE tracking_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := random_status;
> MODULE loiter_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1127,1131c1626
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1133,1135c1628,1629
< 		result := next(variable_exists[variable_names.lec2_am_l_speed_warning]) & (next(variables[variable_names.lec2_am_l_speed_warning]) =0);
< 
< MODULE speed_min_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE tracking_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1137,1141c1631
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1143,1145c1633,1634
< 		result := next(variable_exists[variable_names.lec2_am_r_speed_warning]) & (next(variables[variable_names.lec2_am_r_speed_warning]) =0);
< 
< MODULE speed_min_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE speed_min_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1147,1151c1636,1639
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE speed_max_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE speed_min_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
1153,1157c1641
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1159,1161c1643,1644
< 		result := next(variable_exists[variable_names.lec2_am_l_pipe_warning]) & (next(variables[variable_names.lec2_am_l_pipe_warning]) =0);
< 
< MODULE pipe_mapping_disable_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE speed_max_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1163,1167c1646
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1169,1171c1648,1649
< 		result := next(variable_exists[variable_names.lec2_am_r_pipe_warning]) & (next(variables[variable_names.lec2_am_r_pipe_warning]) =0);
< 
< MODULE pipe_mapping_disable_task1_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE pipe_mapping_disable_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1173,1177c1651,1654
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE pipe_mapping_enable_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE pipe_mapping_disable_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
1179,1183c1656
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE is_waypoint_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
1185,1187c1658,1661
< 		result := next(variable_exists[variable_names.bb_mission_dot_data]) & (next(variables[variable_names.bb_mission_dot_data]) =0);
< 
< MODULE check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE pipe_mapping_enable_task_SET_status_module(variables, variable_exists, node_names, variable_names)
> 	CONSTANTS
> 		success, failure, running, invalid, error;
1189,1191c1663,1664
< 		result := next(variable_exists[variable_names.bb_waypoints_completed_dot_data]) & (next(variables[variable_names.bb_waypoints_completed_dot_data]) =0);
< 
< MODULE next_mission_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		status := running;
> MODULE next_mission_SET_status_module(variables, variable_exists, node_names, variable_names)
1193,1197c1666,1669
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE loiter_task2_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := success;
> MODULE loiter_task1_SET_status_module(variables, variable_exists, node_names, variable_names)
1199,1203c1671,1674
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE waypoint_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE waypoint_task_SET_status_module(variables, variable_exists, node_names, variable_names)
1205,1209c1676,1679
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
< 
< MODULE loiter_task_STATUS_module(variables, variable_exists, node_names, variable_names)
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE loiter_task2_SET_status_module(variables, variable_exists, node_names, variable_names)
1211,1213c1681,1754
< 		success, failure, running;
< 	VAR
< 		status : {success, failure, running};
---
> 		success, failure, running, invalid, error;
> 	DEFINE
> 		status := running;
> MODULE is_reallocation_requested_CHECK_dd_xy_axis_degradation_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--dd_xy_axis_degradation is set before this check is made. therefore, we need to use next() value
> 		result := (next(variables[variable_names.dd_xy_axis_degradation]) = 0);
> MODULE battery_low_fs_CHECK_battery_low_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--battery_low_warning is set before this check is made. need next()
> 		result := (next(variables[variable_names.battery_low_warning]) = 0);
> MODULE check_sensor_failure_CHECK_bb_sensor_failure_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--bb_sensor_failure-warning is set before this check. need next()
> 		result := (next(variables[variable_names.bb_sensor_failure_warning]) = 0);
> MODULE emergency_stop_fs_CHECK_emergency_stop_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--fls_warning2bb comes before
> 		--rtreach2bb comes before
> 		--mission_server comes before.
> 		--therefore, the value will be set before we enter this check, and will not be changed afterwards.
> 		--safe to use next()
> 		result := (next(variables[variable_names.emergency_stop_warning]) = 0);
> MODULE check_surface_CHECK_bb_home_reached_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in home2bb and home2bb1, both of which occur AFTER this check. use value as is. no next()
> 		result := (variables[variable_names.bb_home_reached] = 0);
> MODULE obstacle_standoff_fs_CHECK_obstacle_standoff_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in fls2bb, which is before. use next
> 		result := (next(variables[variable_names.obstacle_standoff_warning]) = 0);
> MODULE check_rth_CHECK_bb_rth_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in rth2bb and mission_server. both before check_rth. use next()
> 		result := (next(variables[variable_names.bb_rth_warning]) = 0);
> MODULE check_geofence_CHECK_bb_geofence_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in geofence2bb. occurs before check_geofence. use next() value
> 		result := (next(variables[variable_names.bb_geofence_warning]) = 0);
> MODULE check_pipe_post_CHECK_bb_pipe_lost_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in pipe_lost2bb. occurs before check_pipe_post. use next()
> 		result := (next(variables[variable_names.bb_pipe_lost_warning]) = 0);
> MODULE is_track_pipe_mission_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in mission2bb
> 		--set in mission_server
> 		--both occur before this check
> 		--use next()
> 		result := (next(variables[variable_names.bb_mission_dot_data]) = 1);
> MODULE is_waypoint_requested_CHECK_bb_mission_dot_data_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--as above
> 		result := (next(variables[variable_names.bb_mission_dot_data]) = 2);
> MODULE check_lec2am_ls_CHECK_lec2_am_l_speed_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in lec2_am_l_2bb. occurs before this check. use next()
> 		result := (next(variables[variable_names.lec2_am_l_speed_warning]) = 0);
> MODULE check_lec2am_rs_CHECK_lec2_am_r_speed_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--as above
> 		result := (next(variables[variable_names.lec2_am_r_speed_warning]) = 0);
> MODULE check_lec2am_lp_CHECK_lec2_am_l_pipe_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--as above
> 		result := (next(variables[variable_names.lec2_am_l_pipe_warning]) = 0);
> MODULE check_lec2am_rp_CHECK_lec2_am_r_pipe_warning_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--as above
> 		result := (next(variables[variable_names.lec2_am_r_pipe_warning]) = 0);
> MODULE check_waypoints_completed_CHECK_bb_waypoints_completed_dot_data_module(variables, variable_exists, node_names, variable_names)
> 	DEFINE
> 		--set in waypoints_completed2bb. occurs before this check. use next()
> 		result := (next(variables[variable_names.bb_waypoints_completed_dot_data]) = 0);
